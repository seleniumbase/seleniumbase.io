{"config": {"lang": ["en"], "separator": "[\\s]+", "pipeline": ["stopWordFilter"]}, "docs": [{"location": "", "title": "\u2705 SeleniumBase README", "text": "SeleniumBase Create reliable end-to-end browser tests with Python <p> \ud83d\ude80 Start | \ud83c\udff0 Features | \ud83d\udcda Examples | \ud83c\udf9b\ufe0f Options | \ud83c\udf20 Scripts | \ud83d\udcf1 Phone \ud83d\udcd8 APIs |  \ud83d\udd21 Formats | \ud83d\udcca Dashboard | \ud83d\udd34 Recorder | \ud83d\uddfe Locales | \ud83c\udf10 Grid \ud83c\udf96\ufe0f GUI | \ud83d\udcf0 TestPage | \ud83d\uddc2\ufe0f CasePlans | \ud83d\udd75\ufe0f Inspector | \ud83e\uddec Hybrid | \ud83d\udcbb Farm \ud83d\udc41\ufe0f How | \ud83d\ude9d Migrate | \u267b\ufe0f Templates | \ud83d\ude89 NodeGUI | \ud83d\udcf6 Charts | \ud83d\ude8e Tours \ud83e\udd16 CI/CD | \ud83d\udd79\ufe0f JSMgr | \ud83c\udf0f Translator | \ud83c\udf9e\ufe0f Presenter | \ud83d\udec2 Boxes | \ud83d\uddbc\ufe0f Visual </p> <p></p> <p>Example: test_coffee_cart.py from ./examples/</p> <pre><code>cd examples/\npytest test_coffee_cart.py --demo\n</code></pre> <p>(<code>--demo</code> mode slows down tests and highlights actions)</p> <p></p> <ul> <li>Here's a preview of that test:</li> </ul> <pre><code>from seleniumbase import BaseCase\nBaseCase.main(__name__, __file__)\n\nclass CoffeeCartTest(BaseCase):\n    def test_coffee_cart(self):\n        self.open(\"https://seleniumbase.io/coffee/\")\n        self.assert_title(\"Coffee Cart\")\n        self.click('div[data-sb=\"Cappuccino\"]')\n        self.click('div[data-sb=\"Flat-White\"]')\n        self.click('div[data-sb=\"Cafe-Latte\"]')\n        self.click('a[aria-label=\"Cart page\"]')\n        self.assert_exact_text(\"Total: $53.00\", \"button.pay\")\n        self.click(\"button.pay\")\n        self.type(\"input#name\", \"Selenium Coffee\")\n        self.type(\"input#email\", \"test@test.test\")\n        self.click(\"button#submit-payment\")\n        self.assert_text(\"Thanks for your purchase.\", \"#app .success\")\n</code></pre>  \u25b6\ufe0f How is SeleniumBase different from raw Selenium? (click to expand) <p>\ud83d\udca1 SeleniumBase is a Python framework for browser automation and testing. SeleniumBase uses Selenium/WebDriver APIs, and incorporates test-runners such as <code>pytest</code>, <code>nosetests</code>, and <code>behave</code> to provide organized structure, test discovery, test execution, test state (eg. passed, failed, or skipped), and command-line options for changing default settings (such as choosing the browser to use). With raw Selenium, you would need to set up your own options-parser for configuring tests from the command-line.</p> <p>\ud83d\udca1 With raw Selenium, commands that use selectors need to specify the type of selector (eg. <code>\"css selector\", \"button#myButton\"</code>). With SeleniumBase, there's auto-detection between CSS Selectors and XPath, which means you don't need to specify the type of selector in your commands (but optionally you could).</p> <p>\ud83d\udca1 SeleniumBase methods often perform multiple actions in a single method call. For example, <code>self.type(selector,text)</code> does the following:1. Waits for the element to be visible.2. Waits for the element to be interactive.3. Clears the text field.4. Types in the new text.5. Presses Enter/Submit if the text ends in \"\\n\".With raw Selenium, those actions require multiple method calls.</p> <p>\ud83d\udca1 SeleniumBase uses default timeout values when not set: \u2705<code>self.click(\"button\")</code> With raw Selenium, methods would fail instantly (by default) if an element needed more time to load: \u274c<code>self.driver.find_element(by=\"css selector\", value=\"button\").click()</code> (Reliable code is better than unreliable code.)</p> <p>\ud83d\udca1 SeleniumBase lets you change the explicit timeout values of methods: \u2705<code>self.click(\"button\",timeout=10)</code> With raw Selenium, that requires more code: \u274c<code>WebDriverWait(driver,10).until(EC.element_to_be_clickable(\"css selector\", \"button\")).click()</code> (Simple code is better than complex code.)</p> <p>\ud83d\udca1 SeleniumBase gives you clean error output when a test fails. With raw Selenium, error messages can get very messy.</p> <p>\ud83d\udca1 SeleniumBase gives you the option to generate a dashboard and reports for tests. It also saves screenshots from failing tests to the <code>./latest_logs/</code> folder. Raw Selenium does not have these options out-of-the-box.</p> <p>\ud83d\udca1 SeleniumBase includes desktop GUI apps for running tests, such as SeleniumBase Commander for <code>pytest</code>, and SeleniumBase Behave GUI.</p> <p>\ud83d\udca1 SeleniumBase has its own Recorder &amp; Test Generator that can create tests from manual browser actions. SeleniumBase also has many other useful tools and console scripts for getting things done quickly. (See the documentation for more details!)</p>  \u25b6\ufe0f Learn about different ways of writing tests (click to expand) <p>\ud83d\udcd8\ud83d\udcdd An example test with the BaseCase class. Runs with pytest or nosetests. (Learn more)</p> <pre><code>from seleniumbase import BaseCase\n\nclass TestMFALogin(BaseCase):\n    def test_mfa_login(self):\n        self.open(\"https://seleniumbase.io/realworld/login\")\n        self.type(\"#username\", \"demo_user\")\n        self.type(\"#password\", \"secret_pass\")\n        self.enter_mfa_code(\"#totpcode\", \"GAXG2MTEOR3DMMDG\")  # 6-digit\n        self.assert_exact_text(\"Welcome!\", \"h1\")\n        self.assert_element(\"img#image1\")\n        self.click('a:contains(\"This Page\")')\n        self.save_screenshot_to_logs()\n</code></pre> <p>\ud83d\udcd7\ud83d\udcdd An example test with the <code>sb</code> <code>pytest</code> fixture. Runs with pytest.</p> <pre><code>def test_mfa_login(sb):\n    sb.open(\"https://seleniumbase.io/realworld/login\")\n    sb.type(\"#username\", \"demo_user\")\n    sb.type(\"#password\", \"secret_pass\")\n    sb.enter_mfa_code(\"#totpcode\", \"GAXG2MTEOR3DMMDG\")  # 6-digit\n    sb.assert_exact_text(\"Welcome!\", \"h1\")\n    sb.assert_element(\"img#image1\")\n    sb.click('a:contains(\"This Page\")')\n    sb.save_screenshot_to_logs()\n</code></pre> <p>\ud83d\udcd9\ud83d\udcdd An example test with the <code>SB</code> Context Manager. Runs with pure <code>python</code>.</p> <pre><code>from seleniumbase import SB\n\nwith SB() as sb:  # By default, browser=\"chrome\" if not set.\n    sb.open(\"https://seleniumbase.io/realworld/login\")\n    sb.type(\"#username\", \"demo_user\")\n    sb.type(\"#password\", \"secret_pass\")\n    sb.enter_mfa_code(\"#totpcode\", \"GAXG2MTEOR3DMMDG\")  # 6-digit\n    sb.assert_text(\"Welcome!\", \"h1\")\n    sb.highlight(\"img#image1\")  # A fancier assert_element() call\n    sb.click('a:contains(\"This Page\")')  # Use :contains() on any tag\n    sb.click_link(\"Sign out\")  # Link must be \"a\" tag. Not \"button\".\n    sb.assert_element('a:contains(\"Sign in\")')\n    sb.assert_exact_text(\"You have been signed out!\", \"#top_message\")\n</code></pre> <p>\ud83d\udcd5\ud83d\udcdd An example test with behave-BDD Gherkin structure. Runs with <code>behave</code>. (Learn more)</p> <pre><code>Feature: SeleniumBase scenarios for the RealWorld App\n\nScenario: Verify RealWorld App\n    Given Open \"seleniumbase.io/realworld/login\"\nWhen Type \"demo_user\" into \"#username\"\nAnd Type \"secret_pass\" into \"#password\"\nAnd Do MFA \"GAXG2MTEOR3DMMDG\" into \"#totpcode\"\nThen Assert exact text \"Welcome!\" in \"h1\"\nAnd Assert element \"img#image1\"\nAnd Click 'a:contains(\"This Page\")'\nAnd Save screenshot to logs\n</code></pre> <p></p>  Set up Python &amp; Git: <p>\ud83d\udd35 Add Python and Git to your System PATH.</p> <p>\ud83d\udd35 Using a Python virtual env is recommended.</p> <p></p>  Install SeleniumBase: <p>You can install <code>seleniumbase</code> from GitHub or PyPI:</p> <p>\ud83d\udd35 Installing <code>seleniumbase</code> from a GitHub clone:</p> <pre><code>git clone https://github.com/seleniumbase/SeleniumBase.git\ncd SeleniumBase/\npip install -e .\n</code></pre> <p>To upgrade an existing install from a GitHub clone:</p> <pre><code>git pull\npip install -e .\n</code></pre> <p>\ud83d\udd35 Installing <code>seleniumbase</code> from PyPI:</p> <pre><code>pip install seleniumbase\n</code></pre> <ul> <li>(Add <code>--upgrade</code> OR <code>-U</code> to upgrade SeleniumBase.)</li> <li>(Add <code>--force-reinstall</code> to upgrade indirect libraries.)</li> <li>(Use <code>pip3</code> if multiple versions of Python are present.)</li> </ul> <p>To upgrade an existing install from PyPI:</p> <pre><code>pip install -U seleniumbase\n</code></pre> <p>\ud83d\udd35 Type <code>seleniumbase</code> or <code>sbase</code> to verify that SeleniumBase was installed successfully:</p> <pre><code>   ______     __           _                  ____                / ____/__  / /__  ____  (_)_  ______ ___   / _  \\____  ________ \\__ \\/ _ \\/ / _ \\/ __ \\/ / / / / __ `__ \\ / /_) / __ \\/ ___/ _ \\\n___/ /  __/ /  __/ / / / / /_/ / / / / / // /_) / (_/ /__  /  __/\n/____/\\___/_/\\___/_/ /_/_/\\__,_/_/ /_/ /_//_____/\\__,_/____/\\___/ \n------------------------------------------------------------------\n\n * USAGE: \"seleniumbase [COMMAND] [PARAMETERS]\"\n*    OR:        \"sbase [COMMAND] [PARAMETERS]\"\n\nCOMMANDS:\n      get / install    [DRIVER] [OPTIONS]\nmethods          (List common Python methods)\noptions          (List common pytest options)\nbehave-options   (List common behave options)\ngui / commander  [OPTIONAL PATH or TEST FILE]\nbehave-gui       (SBase Commander for Behave)\ncaseplans        [OPTIONAL PATH or TEST FILE]\nmkdir            [DIRECTORY] [OPTIONS]\nmkfile           [FILE.py] [OPTIONS]\nmkrec / codegen  [FILE.py] [OPTIONS]\nrecorder         (Open Recorder Desktop App.)\nrecord           (If args: mkrec. Else: App.)\nmkpres           [FILE.py] [LANG]\nmkchart          [FILE.py] [LANG]\nprint            [FILE] [OPTIONS]\ntranslate        [SB_FILE.py] [LANG] [ACTION]\nconvert          [WEBDRIVER_UNITTEST_FILE.py]\nextract-objects  [SB_FILE.py]\ninject-objects   [SB_FILE.py] [OPTIONS]\nobjectify        [SB_FILE.py] [OPTIONS]\nrevert-objects   [SB_FILE.py] [OPTIONS]\nencrypt / obfuscate\n      decrypt / unobfuscate\n      download server  (Get Selenium Grid JAR file)\ngrid-hub         [start|stop] [OPTIONS]\ngrid-node        [start|stop] --hub=[HOST/IP]\n* (EXAMPLE: \"sbase get chromedriver latest\") *\n\n    Type \"sbase help [COMMAND]\" for specific command info.\n    For info on all commands, type: \"seleniumbase --help\".\n    Use \"pytest\" for running tests.\n</code></pre>  Downloading web drivers: <p>\u2705 SeleniumBase automatically downloads web drivers as needed, such as <code>chromedriver</code>, <code>edgedriver</code>, and <code>geckodriver</code>.</p> <p>\u2705 To manually download a webdriver, see Console Scripts OR Webdriver Installation.</p> <p></p>  Basic Example &amp; Usage: <p>\ud83d\udd35 If you've cloned SeleniumBase, you can run tests from the examples/ folder.</p> <p>Here's my_first_test.py:</p> <pre><code>cd examples/\npytest my_first_test.py\n</code></pre> <p>(Uses <code>--chrome</code> by default.)</p> <p></p> <p>Here's the code for my_first_test.py:</p> <pre><code>from seleniumbase import BaseCase\n\nclass MyTestClass(BaseCase):\n    def test_swag_labs(self):\n        self.open(\"https://www.saucedemo.com\")\n        self.type(\"#user-name\", \"standard_user\")\n        self.type(\"#password\", \"secret_sauce\\n\")\n        self.assert_element(\"div.inventory_list\")\n        self.assert_text(\"PRODUCTS\", \"span.title\")\n        self.click('button[name*=\"backpack\"]')\n        self.click(\"#shopping_cart_container a\")\n        self.assert_text(\"YOUR CART\", \"span.title\")\n        self.assert_text(\"Backpack\", \"div.cart_item\")\n        self.click(\"button#checkout\")\n        self.type(\"#first-name\", \"SeleniumBase\")\n        self.type(\"#last-name\", \"Automation\")\n        self.type(\"#postal-code\", \"77123\")\n        self.click(\"input#continue\")\n        self.assert_text(\"CHECKOUT: OVERVIEW\")\n        self.assert_text(\"Backpack\", \"div.cart_item\")\n        self.click(\"button#finish\")\n        self.assert_exact_text(\"THANK YOU FOR YOUR ORDER\", \"h2\")\n        self.assert_element('img[alt=\"Pony Express\"]')\n        self.js_click(\"a#logout_sidebar_link\")\n        self.assert_element(\"div#login_button_container\")\n</code></pre> <ul> <li>By default, CSS Selectors are used for finding page elements.</li> <li>If you're new to CSS Selectors, games like CSS Diner can help you learn.</li> <li>For more reading, here's an advanced guide on CSS attribute selectors.</li> </ul> <p></p>  Here are some common SeleniumBase methods that you might find in tests: <pre><code>self.open(url)  # Navigate the browser window to the URL.\nself.type(selector, text)  # Update the field with the text.\nself.click(selector)  # Click the element with the selector.\nself.click_link(link_text)  # Click the link containing text.\nself.go_back()  # Navigate back to the previous URL.\nself.select_option_by_text(dropdown_selector, option)\nself.hover_and_click(hover_selector, click_selector)\nself.drag_and_drop(drag_selector, drop_selector)\nself.get_text(selector)  # Get the text from the element.\nself.get_current_url()  # Get the URL of the current page.\nself.get_page_source()  # Get the HTML of the current page.\nself.get_attribute(selector, attribute)  # Get element attribute.\nself.get_title()  # Get the title of the current page.\nself.switch_to_frame(frame)  # Switch into the iframe container.\nself.switch_to_default_content()  # Leave the iframe container.\nself.open_new_window()  # Open a new window in the same browser.\nself.switch_to_window(window)  # Switch to the browser window.\nself.switch_to_default_window()  # Switch to the original window.\nself.get_new_driver(OPTIONS)  # Open a new driver with OPTIONS.\nself.switch_to_driver(driver)  # Switch to the browser driver.\nself.switch_to_default_driver()  # Switch to the original driver.\nself.wait_for_element(selector)  # Wait until element is visible.\nself.is_element_visible(selector)  # Return element visibility.\nself.is_text_visible(text, selector)  # Return text visibility.\nself.sleep(seconds)  # Do nothing for the given amount of time.\nself.save_screenshot(name)  # Save a screenshot in .png format.\nself.assert_element(selector)  # Verify the element is visible.\nself.assert_text(text, selector)  # Verify text in the element.\nself.assert_title(title)  # Verify the title of the web page.\nself.assert_downloaded_file(file)  # Verify file was downloaded.\nself.assert_no_404_errors()  # Verify there are no broken links.\nself.assert_no_js_errors()  # Verify there are no JS errors.\n</code></pre> <p>\ud83d\udd35 For the complete list of SeleniumBase methods, see: Method Summary</p> <p></p>  Fun Facts / Learn More: <p>\u2705 SeleniumBase automatically handles common WebDriver actions such as launching web browsers before tests, saving screenshots during failures, and closing web browsers after tests.</p> <p>\u2705 SeleniumBase lets you customize test runs from the command-line.</p> <p>\u2705 SeleniumBase uses simple syntax for commands. Example:</p> <pre><code>self.type(\"input\", \"dogs\\n\")\n</code></pre> <p>SeleniumBase tests can be run with <code>pytest</code> or <code>nosetests</code>. (There's also a behave BDD format.)</p> <pre><code>pytest my_first_test.py --chrome\n\nnosetests test_suite.py --firefox\n</code></pre> <p>\u2705 <code>pytest</code> includes automatic test discovery. If you don't specify a specific file or folder to run, <code>pytest</code> will automatically search through all subdirectories for tests to run based on the following criteria:</p> <ul> <li>Python files that start with <code>test_</code> or end with <code>_test.py</code>.</li> <li>Python methods that start with <code>test_</code>.</li> </ul> <p>With a SeleniumBase pytest.ini file present, you can modify default discovery settings. The Python class name can be anything because <code>seleniumbase.BaseCase</code> inherits <code>unittest.TestCase</code>, which triggers autodiscovery.</p> <p>\u2705 You can do a pre-flight check to see which tests would get discovered by <code>pytest</code> before the real flight:</p> <pre><code>pytest --collect-only -q\n</code></pre> <p>\u2705 You can be more specific when calling <code>pytest</code> on a file:</p> <pre><code>pytest [FILE_NAME.py]::[CLASS_NAME]::[METHOD_NAME]\n\nnosetests [FILE_NAME.py]:[CLASS_NAME].[METHOD_NAME]\n</code></pre> <p>\u2705 No More Flaky Tests! SeleniumBase methods automatically wait for page elements to finish loading before interacting with them (up to a timeout limit). This means you no longer need random <code>time.sleep()</code> statements in your scripts.</p> <p></p> <p>\u2705 SeleniumBase supports all major browsers and operating systems:</p> <p>Browsers: Chrome, Edge, Firefox, and Safari.</p> <p>Systems: Linux/Ubuntu, macOS, and Windows.</p> <p>\u2705 SeleniumBase works on all popular CI/CD platforms:</p> <p> </p> <p>\u2705 SeleniumBase includes an automated/manual hybrid solution called MasterQA, which speeds up manual testing by having automation perform all the browser actions while the manual tester handles validation.</p> <p>\u2705 For a full list of SeleniumBase features, Click Here.</p> <p></p>  Detailed Instructions: <p> \ud83d\udd35 Demo Mode helps you see what a test is doing. If a test is moving too fast for your eyes, run it in Demo Mode, which pauses the browser briefly between actions, highlights page elements being acted on, and displays assertions:</p> <pre><code>pytest my_first_test.py --demo\n</code></pre> <p>\ud83d\udd35 You can use the following calls in your scripts to help you debug issues:</p> <pre><code>import time; time.sleep(5)  # Makes the test wait and do nothing for 5 seconds.\nimport pdb; pdb.set_trace()  # Enter debugging mode. n = next, c = continue, s = step.\nimport pytest; pytest.set_trace()  # Enter debugging mode. n = next, c = continue, s = step.\n</code></pre> <p>\ud83d\udd35 To pause an active test that throws an exception or error, (and keep the browser window open while Debug Mode begins in the console), add <code>--pdb</code> as a <code>pytest</code> option:</p> <pre><code>pytest my_first_test.py --pdb\n</code></pre> <p>(<code>pdb</code> console commands: <code>n</code>, <code>c</code>, <code>s</code> =&gt; <code>next</code>, <code>continue</code>, <code>step</code>).</p> <p> \ud83d\udd35 Here are some useful command-line options that come with <code>pytest</code>:</p> <pre><code>-v  # Verbose mode. Prints the full name of each test and shows more details.\n-q  # Quiet mode. Print fewer details in the console output when running tests.\n-x  # Stop running the tests after the first failure is reached.\n--html=report.html  # Creates a detailed pytest-html report after tests finish.\n--collect-only | --co  # Show what tests would get run. (Without running them)\n-n=NUM  # Multithread the tests using that many threads. (Speed up test runs!)\n-s  # See print statements. (Should be on by default with pytest.ini present.)\n--junit-xml=report.xml  # Creates a junit-xml report after tests finish.\n--pdb  # If a test fails, enter Post Mortem Debug Mode. (Don't use with CI!)\n--trace  # Enter Debug Mode at the beginning of each test. (Don't use with CI!)\n-m=MARKER  # Run tests with the specified pytest marker.\n</code></pre> <p> \ud83d\udd35 SeleniumBase provides additional <code>pytest</code> command-line options for tests:</p> <pre><code>--browser=BROWSER  # (The web browser to use. Default: \"chrome\".)\n--chrome  # (Shortcut for \"--browser=chrome\". On by default.)\n--edge  # (Shortcut for \"--browser=edge\".)\n--firefox  # (Shortcut for \"--browser=firefox\".)\n--safari  # (Shortcut for \"--browser=safari\".)\n--settings-file=FILE  # (Override default SeleniumBase settings.)\n--env=ENV  # (Set the test env. Access with \"self.env\" in tests.)\n--account=STR  # (Set account. Access with \"self.account\" in tests.)\n--data=STRING  # (Extra test data. Access with \"self.data\" in tests.)\n--var1=STRING  # (Extra test data. Access with \"self.var1\" in tests.)\n--var2=STRING  # (Extra test data. Access with \"self.var2\" in tests.)\n--var3=STRING  # (Extra test data. Access with \"self.var3\" in tests.)\n--variables=DICT  # (Extra test data. Access with \"self.variables\".)\n--user-data-dir=DIR  # (Set the Chrome user data directory to use.)\n--protocol=PROTOCOL  # (The Selenium Grid protocol: http|https.)\n--server=SERVER  # (The Selenium Grid server/IP used for tests.)\n--port=PORT  # (The Selenium Grid port used by the test server.)\n--cap-file=FILE  # (The web browser's desired capabilities to use.)\n--cap-string=STRING  # (The web browser's desired capabilities to use.)\n--proxy=SERVER:PORT  # (Connect to a proxy server:port as tests are running)\n--proxy=USERNAME:PASSWORD@SERVER:PORT  # (Use an authenticated proxy server)\n--proxy-bypass-list=STRING # (\";\"-separated hosts to bypass, Eg \"*.foo.com\")\n--proxy-pac-url=URL  # (Connect to a proxy server using a PAC_URL.pac file.)\n--proxy-pac-url=USERNAME:PASSWORD@URL  # (Authenticated proxy with PAC URL.)\n--proxy-driver  # (If a driver download is needed, will use: --proxy=PROXY.)\n--multi-proxy  # (Allow multiple authenticated proxies when multi-threaded.)\n--agent=STRING  # (Modify the web browser's User-Agent string.)\n--mobile  # (Use the mobile device emulator while running tests.)\n--metrics=STRING  # (Set mobile metrics: \"CSSWidth,CSSHeight,PixelRatio\".)\n--chromium-arg=\"ARG=N,ARG2\"  # (Set Chromium args, \",\"-separated, no spaces.)\n--firefox-arg=\"ARG=N,ARG2\"  # (Set Firefox args, comma-separated, no spaces.)\n--firefox-pref=SET  # (Set a Firefox preference:value set, comma-separated.)\n--extension-zip=ZIP  # (Load a Chrome Extension .zip|.crx, comma-separated.)\n--extension-dir=DIR  # (Load a Chrome Extension directory, comma-separated.)\n--binary-location=PATH  # (Set path of the Chromium browser binary to use.)\n--sjw  # (Skip JS Waits for readyState to be \"complete\" or Angular to load.)\n--pls=PLS  # (Set pageLoadStrategy on Chrome: \"normal\", \"eager\", or \"none\".)\n--headless  # (Run tests in headless mode. The default arg on Linux OS.)\n--headless2  # (Use the new headless mode, which supports extensions.)\n--headed  # (Run tests in headed/GUI mode on Linux OS, where not default.)\n--xvfb  # (Run tests using the Xvfb virtual display server on Linux OS.)\n--locale=LOCALE_CODE  # (Set the Language Locale Code for the web browser.)\n--interval=SECONDS  # (The autoplay interval for presentations &amp; tour steps)\n--start-page=URL  # (The starting URL for the web browser when tests begin.)\n--archive-logs  # (Archive existing log files instead of deleting them.)\n--archive-downloads  # (Archive old downloads instead of deleting them.)\n--time-limit=SECONDS  # (Safely fail any test that exceeds the time limit.)\n--slow  # (Slow down the automation. Faster than using Demo Mode.)\n--demo  # (Slow down and visually see test actions as they occur.)\n--demo-sleep=SECONDS  # (Set the wait time after Slow &amp; Demo Mode actions.)\n--highlights=NUM  # (Number of highlight animations for Demo Mode actions.)\n--message-duration=SECONDS  # (The time length for Messenger alerts.)\n--check-js  # (Check for JavaScript errors after page loads.)\n--ad-block  # (Block some types of display ads from loading.)\n--block-images  # (Block images from loading during tests.)\n--do-not-track  # (Indicate to websites that you don't want to be tracked.)\n--verify-delay=SECONDS  # (The delay before MasterQA verification checks.)\n--recorder  # (Enables the Recorder for turning browser actions into code.)\n--rec-behave  # (Same as Recorder Mode, but also generates behave-gherkin.)\n--rec-sleep  # (If the Recorder is enabled, also records self.sleep calls.)\n--rec-print  # (If the Recorder is enabled, prints output after tests end.)\n--disable-js  # (Disable JavaScript on websites. Pages might break!)\n--disable-csp  # (Disable the Content Security Policy of websites.)\n--disable-ws  # (Disable Web Security on Chromium-based browsers.)\n--enable-ws  # (Enable Web Security on Chromium-based browsers.)\n--enable-sync  # (Enable \"Chrome Sync\" on websites.)\n--uc | --undetected  # (Use undetected-chromedriver to evade bot-detection.)\n--uc-cdp-events  # (Capture CDP events when running in \"--undetected\" mode.)\n--remote-debug  # (Sync to Chrome Remote Debugger chrome://inspect/#devices)\n--final-debug  # (Enter Debug Mode after each test ends. Don't use with CI!)\n--dashboard  # (Enable the SeleniumBase Dashboard. Saved at: dashboard.html)\n--dash-title=STRING  # (Set the title shown for the generated dashboard.)\n--enable-3d-apis  # (Enables WebGL and 3D APIs.)\n--swiftshader  # (Use Chrome's \"--use-gl=swiftshader\" feature.)\n--incognito  # (Enable Chrome's Incognito mode.)\n--guest  # (Enable Chrome's Guest mode.)\n--devtools  # (Open Chrome's DevTools when the browser opens.)\n--reuse-session | --rs  # (Reuse browser session for all tests.)\n--reuse-class-session | --rcs  # (Reuse session for tests in class.)\n--crumbs  # (Delete all cookies between tests reusing a session.)\n--disable-beforeunload  # (Disable the \"beforeunload\" event on Chrome.)\n--window-size=WIDTH,HEIGHT  # (Set the browser's starting window size.)\n--maximize  # (Start tests with the browser window maximized.)\n--screenshot  # (Save a screenshot at the end of each test.)\n--no-screenshot  # (No screenshots saved unless tests directly ask it.)\n--visual-baseline  # (Set the visual baseline for Visual/Layout tests.)\n--wire  # (Use selenium-wire's webdriver for replacing selenium webdriver.)\n--external-pdf  # (Set Chromium \"plugins.always_open_pdf_externally\":True.)\n--timeout-multiplier=MULTIPLIER  # (Multiplies the default timeout values.)\n--list-fail-page  # (After each failing test, list the URL of the failure.)\n</code></pre> <p>(See the full list of command-line option definitions here. For detailed examples of command-line options, see customizing_test_runs.md)</p> <p>\ud83d\udd35 During test failures, logs and screenshots from the most recent test run will get saved to the <code>latest_logs/</code> folder. Those logs will get moved to <code>archived_logs/</code> if you add --archive_logs to command-line options, or have ARCHIVE_EXISTING_LOGS set to True in settings.py, otherwise log files with be cleaned up at the start of the next test run. The <code>test_suite.py</code> collection contains tests that fail on purpose so that you can see how logging works.</p> <pre><code>cd examples/\n\npytest test_suite.py --browser=chrome\n\npytest test_suite.py --browser=firefox\n</code></pre> <p>An easy way to override seleniumbase/config/settings.py is by using a custom settings file. Here's the command-line option to add to tests: (See examples/custom_settings.py) <code>--settings_file=custom_settings.py</code> (Settings include default timeout values, a two-factor auth key, DB credentials, S3 credentials, and other important settings used by tests.)</p> <p>\ud83d\udd35 To pass additional data from the command-line to tests, add <code>--data=\"ANY STRING\"</code>. Inside your tests, you can use <code>self.data</code> to access that.</p>  Test Directory Configuration: <p>\ud83d\udd35 When running tests with pytest, you'll want a copy of pytest.ini in your root folders. When running tests with nosetests, you'll want a copy of setup.cfg in your root folders. These files specify default configuration details for tests. Folders should also include a blank <code>__init__.py</code> file, which allows your tests to import files from that folder.</p> <p>\ud83d\udd35 <code>sbase mkdir DIR</code> creates a folder with config files and sample tests:</p> <pre><code>sbase mkdir ui_tests\n</code></pre> <p>That new folder will have these files:</p> <pre><code>ui_tests/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 my_first_test.py\n\u251c\u2500\u2500 parameterized_test.py\n\u251c\u2500\u2500 pytest.ini\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 setup.cfg\n\u251c\u2500\u2500 test_demo_site.py\n\u2514\u2500\u2500 boilerplates/\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 base_test_case.py\n    \u251c\u2500\u2500 boilerplate_test.py\n    \u251c\u2500\u2500 classic_obj_test.py\n    \u251c\u2500\u2500 page_objects.py\n    \u251c\u2500\u2500 sb_fixture_test.py\n    \u2514\u2500\u2500 samples/\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 google_objects.py\n        \u251c\u2500\u2500 google_test.py\n        \u251c\u2500\u2500 sb_swag_test.py\n        \u2514\u2500\u2500 swag_labs_test.py\n</code></pre> <p>ProTip\u2122: You can also create a boilerplate folder without any sample tests in it by adding <code>-b</code> or <code>--basic</code> to the <code>sbase mkdir</code> command:</p> <pre><code>sbase mkdir ui_tests --basic\n</code></pre> <p>That new folder will have these files:</p> <pre><code>ui_tests/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 pytest.ini\n\u251c\u2500\u2500 requirements.txt\n\u2514\u2500\u2500 setup.cfg\n</code></pre> <p>Of those files, the <code>pytest.ini</code> config file is the most important, followed by a blank <code>__init__.py</code> file. There's also a <code>setup.cfg</code> file (only needed for nosetests). Finally, the <code>requirements.txt</code> file can be used to help you install seleniumbase into your environments (if it's not already installed).</p>  Log files from failed tests: <p>Let's try an example of a test that fails:</p> <pre><code>\"\"\" test_fail.py \"\"\"\nfrom seleniumbase import BaseCase\n\nclass MyTestClass(BaseCase):\n\n    def test_find_army_of_robots_on_xkcd_desert_island(self):\n        self.open(\"https://xkcd.com/731/\")\n        self.assert_element(\"div#ARMY_OF_ROBOTS\", timeout=1)  # This should fail\n</code></pre> <p>You can run it from the <code>examples/</code> folder like this:</p> <pre><code>pytest test_fail.py\n</code></pre> <p>\ud83d\udd35 You'll notice that a logs folder, \"latest_logs\", was created to hold information about the failing test, and screenshots. During test runs, past results get moved to the archived_logs folder if you have ARCHIVE_EXISTING_LOGS set to True in settings.py, or if your run tests with <code>--archive-logs</code>. If you choose not to archive existing logs, they will be deleted and replaced by the logs of the latest test run.</p>  The SeleniumBase Dashboard: <p>\ud83d\udd35 The <code>--dashboard</code> option for pytest generates a SeleniumBase Dashboard located at <code>dashboard.html</code>, which updates automatically as tests run and produce results. Example:</p> <pre><code>pytest --dashboard --rs --headless\n</code></pre> <p></p> <p>\ud83d\udd35 Additionally, you can host your own SeleniumBase Dashboard Server on a port of your choice. Here's an example of that using Python 3's <code>http.server</code>:</p> <pre><code>python -m http.server 1948\n</code></pre> <p>\ud83d\udd35 Now you can navigate to <code>http://localhost:1948/dashboard.html</code> in order to view the dashboard as a web app. This requires two different terminal windows: one for running the server, and another for running the tests, which should be run from the same directory. (Use <code>CTRL+C</code> to stop the http server.)</p> <p>\ud83d\udd35 Here's a full example of what the SeleniumBase Dashboard may look like:</p> <pre><code>pytest test_suite.py --dashboard --rs --headless\n</code></pre> <p></p> <p></p>  Generating Test Reports: Pytest Reports: <p>\ud83d\udd35 Using <code>--html=report.html</code> gives you a fancy report of the name specified after your test suite completes.</p> <pre><code>pytest test_suite.py --html=report.html\n</code></pre> <p></p> <p>\ud83d\udd35 When combining pytest html reports with SeleniumBase Dashboard usage, the pie chart from the Dashboard will get added to the html report. Additionally, if you set the html report URL to be the same as the Dashboard URL when also using the dashboard, (example: <code>--dashboard --html=dashboard.html</code>), then the Dashboard will become an advanced html report when all the tests complete.</p> <p>\ud83d\udd35 Here's an example of an upgraded html report:</p> <pre><code>pytest test_suite.py --dashboard --html=report.html\n</code></pre> <p></p> <p>If viewing pytest html reports in Jenkins, you may need to configure Jenkins settings for the html to render correctly. This is due to Jenkins CSP changes.</p> <p>You can also use <code>--junit-xml=report.xml</code> to get an xml report instead. Jenkins can use this file to display better reporting for your tests.</p> <pre><code>pytest test_suite.py --junit-xml=report.xml\n</code></pre> Nosetest Reports: <p>The <code>--report</code> option gives you a fancy report after your test suite completes.</p> <pre><code>nosetests test_suite.py --report\n</code></pre> <p></p> <p>(NOTE: You can add <code>--show-report</code> to immediately display Nosetest reports after the test suite completes. Only use <code>--show-report</code> when running tests locally because it pauses the test run.)</p> Behave Dashboard &amp; Reports: <p>(The behave_bdd/ folder can be found in the examples/ folder.)</p> <pre><code>behave behave_bdd/features/ -D dashboard -D headless\n</code></pre> <p></p> <p>You can also use <code>--junit</code> to get <code>.xml</code> reports for each Behave feature. Jenkins can use these files to display better reporting for your tests.</p> <pre><code>behave behave_bdd/features/ --junit -D rs -D headless\n</code></pre> Allure Reports: <p>See: https://docs.qameta.io/allure/</p> <p>SeleniumBase no longer includes <code>allure-pytest</code> as part of installed dependencies. If you want to use it, install it first:</p> <pre><code>pip install allure-pytest\n</code></pre> <p>Now your tests can create Allure results files, which can be processed by Allure Reports.</p> <pre><code>pytest test_suite.py --alluredir=allure_results\n</code></pre>  Using a Proxy Server: <p>If you wish to use a proxy server for your browser tests (Chromium or Firefox), you can add <code>--proxy=IP_ADDRESS:PORT</code> as an argument on the command line.</p> <pre><code>pytest proxy_test.py --proxy=IP_ADDRESS:PORT\n</code></pre> <p>If the proxy server that you wish to use requires authentication, you can do the following (Chromium only):</p> <pre><code>pytest proxy_test.py --proxy=USERNAME:PASSWORD@IP_ADDRESS:PORT\n</code></pre> <p>SeleniumBase also supports SOCKS4 and SOCKS5 proxies:</p> <pre><code>pytest proxy_test.py --proxy=\"socks4://IP_ADDRESS:PORT\"\n\npytest proxy_test.py --proxy=\"socks5://IP_ADDRESS:PORT\"\n</code></pre> <p>To make things easier, you can add your frequently-used proxies to PROXY_LIST in proxy_list.py, and then use <code>--proxy=KEY_FROM_PROXY_LIST</code> to use the IP_ADDRESS:PORT of that key.</p> <pre><code>pytest proxy_test.py --proxy=proxy1\n</code></pre>  Changing the User-Agent: <p>\ud83d\udd35 If you wish to change the User-Agent for your browser tests (Chromium and Firefox only), you can add <code>--agent=\"USER AGENT STRING\"</code> as an argument on the command-line.</p> <pre><code>pytest user_agent_test.py --agent=\"Mozilla/5.0 (Nintendo 3DS; U; ; en) Version/1.7412.EU\"\n</code></pre>  Handling Pop-Up / Pop Up Alerts: <p>\ud83d\udd35 <code>self.accept_alert()</code> automatically waits for and accepts alert pop-ups. <code>self.dismiss_alert()</code> automatically waits for and dismisses alert pop-ups. On occasion, some methods like <code>self.click(SELECTOR)</code> might dismiss a pop-up on its own because they call JavaScript to make sure that the <code>readyState</code> of the page is <code>complete</code> before advancing. If you're trying to accept a pop-up that got dismissed this way, use this workaround: Call <code>self.find_element(SELECTOR).click()</code> instead, (which will let the pop-up remain on the screen), and then use <code>self.accept_alert()</code> to accept the pop-up (more on that here). If pop-ups are intermittent, wrap code in a try/except block.</p>  Building Guided Tours for Websites: <p>\ud83d\udd35 Learn about SeleniumBase Interactive Walkthroughs (in the <code>examples/tour_examples/</code> folder). It's great for prototyping a website onboarding experience.</p> <p></p>  Production Environments &amp; Integrations:  \u25b6\ufe0f Here are some things you can do to set up a production environment for your testing. (click to expand) <ul> <li>You can set up a Jenkins build server for running tests at regular intervals. For a real-world Jenkins example of headless browser automation in action, check out the SeleniumBase Jenkins example on Azure or the SeleniumBase Jenkins example on Google Cloud.</li> <li>You can use the Selenium Grid to scale your testing by distributing tests on several machines with parallel execution. To do this, check out the SeleniumBase selenium_grid folder, which should have everything you need, including the Selenium Grid ReadMe, which will help you get started.</li> <li>If you're using the SeleniumBase MySQL feature to save results from tests running on a server machine, you can install MySQL Workbench to help you read &amp; write from your DB more easily.</li> <li>If you're using AWS, you can set up an Amazon S3 account for saving log files and screenshots from your tests. To activate this feature, modify settings.py with connection details in the S3 section, and add <code>--with-s3-logging</code> on the command-line when running your tests.</li> </ul>  Here's an example of running tests with some additional features enabled:  <pre><code>pytest [YOUR_TEST_FILE.py] --with-db-reporting --with-s3-logging\n</code></pre> <p></p>  Detailed Method Specifications and Examples: <p>\ud83d\udd35 Navigating to a web page: (and related commands)</p> <pre><code>self.open(\"https://xkcd.com/378/\")  # This method opens the specified page.\n\nself.go_back()  # This method navigates the browser to the previous page.\n\nself.go_forward()  # This method navigates the browser forward in history.\n\nself.refresh_page()  # This method reloads the current page.\n\nself.get_current_url()  # This method returns the current page URL.\n\nself.get_page_source()  # This method returns the current page source.\n</code></pre> <p>ProTip\u2122: You can use the <code>self.get_page_source()</code> method with Python's <code>find()</code> command to parse through HTML to find something specific. (For more advanced parsing, see the BeautifulSoup example.)</p> <pre><code>source = self.get_page_source()\nhead_open_tag = source.find('&lt;head&gt;')\nhead_close_tag = source.find('&lt;/head&gt;', head_open_tag)\neverything_inside_head = source[head_open_tag+len('&lt;head&gt;'):head_close_tag]\n</code></pre> <p>\ud83d\udd35 Clicking:</p> <p>To click an element on the page:</p> <pre><code>self.click(\"div#my_id\")\n</code></pre> <p>ProTip\u2122: In most web browsers, you can right-click on a page and select <code>Inspect Element</code> to see the CSS selector details that you'll need to create your own scripts.</p> <p>\ud83d\udd35 Typing Text:</p> <p><code>self.type(selector, text)</code>  # updates the text from the specified element with the specified value. An exception is raised if the element is missing or if the text field is not editable. Example:</p> <pre><code>self.type(\"input#id_value\", \"2012\")\n</code></pre> <p>You can also use <code>self.add_text()</code> or the WebDriver <code>.send_keys()</code> command, but those won't clear the text box first if there's already text inside.</p> <p>\ud83d\udd35 Getting the text from an element on a page:</p> <pre><code>text = self.get_text(\"header h2\")\n</code></pre> <p>\ud83d\udd35 Getting the attribute value from an element on a page:</p> <pre><code>attribute = self.get_attribute(\"#comic img\", \"title\")\n</code></pre> <p>\ud83d\udd35 Asserting existence of an element on a page within some number of seconds:</p> <pre><code>self.wait_for_element_present(\"div.my_class\", timeout=10)\n</code></pre> <p>(NOTE: You can also use: <code>self.assert_element_present(ELEMENT)</code>)</p> <p>\ud83d\udd35 Asserting visibility of an element on a page within some number of seconds:</p> <pre><code>self.wait_for_element_visible(\"a.my_class\", timeout=5)\n</code></pre> <p>(NOTE: The short versions of that are <code>self.find_element(ELEMENT)</code> and <code>self.assert_element(ELEMENT)</code>. The <code>find_element()</code> version returns the element.)</p> <p>Since the line above returns the element, you can combine that with <code>.click()</code> as shown below:</p> <pre><code>self.find_element(\"a.my_class\", timeout=5).click()\n\n# But you're better off using the following statement, which does the same thing\nself.click(\"a.my_class\")  # DO IT THIS WAY!\n</code></pre> <p>ProTip\u2122: You can use dots to signify class names (Ex: <code>div.class_name</code>) as a simplified version of <code>div[class=\"class_name\"]</code> within a CSS selector. </p> <p>You can also use <code>*=</code> to search for any partial value in a CSS selector as shown below:</p> <pre><code>self.click('a[name*=\"partial_name\"]')\n</code></pre> <p>\ud83d\udd35 Asserting visibility of text inside an element on a page within some number of seconds:</p> <pre><code>self.assert_text(\"Make it so!\", \"div#trek div.picard div.quotes\")\nself.assert_text(\"Tea. Earl Grey. Hot.\", \"div#trek div.picard div.quotes\", timeout=3)\n</code></pre> <p>(NOTE: <code>self.find_text(TEXT, ELEMENT)</code> and <code>self.wait_for_text(TEXT, ELEMENT)</code> also do this. For backwards compatibility, older method names were kept, but the default timeout may be different.)</p> <p>\ud83d\udd35 Asserting Anything:</p> <pre><code>self.assert_true(var1 == var2)\n\nself.assert_false(var1 == var2)\n\nself.assert_equal(var1, var2)\n</code></pre> <p>\ud83d\udd35 Useful Conditional Statements: (with creative examples)</p> <p>\u2753 <code>is_element_visible(selector):</code>  (visible on the page)</p> <pre><code>if self.is_element_visible('div#warning'):\n    print(\"Red Alert: Something bad might be happening!\")\n</code></pre> <p>\u2753 <code>is_element_present(selector):</code>  (present in the HTML)</p> <pre><code>if self.is_element_present('div#top_secret img.tracking_cookie'):\n    self.contact_cookie_monster()  # Not a real SeleniumBase method\nelse:\n    current_url = self.get_current_url()\n    self.contact_the_nsa(url=current_url, message=\"Dark Zone Found\")  # Not a real SeleniumBase method\n</code></pre> <pre><code>def is_there_a_cloaked_klingon_ship_on_this_page():\n    if self.is_element_present(\"div.ships div.klingon\"):\n        return not self.is_element_visible(\"div.ships div.klingon\")\n    return False\n</code></pre> <p>\u2753 <code>is_text_visible(text, selector):</code>  (text visible on element)</p> <pre><code>if self.is_text_visible(\"You Shall Not Pass!\", \"h1\"):\n    self.open(\"https://www.youtube.com/watch?v=3xYXUeSmb-Y\")\n</code></pre>  \u25b6\ufe0f Click for a longer example of <code>is_text_visible():</code> <pre><code>def get_mirror_universe_captain_picard_superbowl_ad(superbowl_year):\n    selector = \"div.superbowl_%s div.commercials div.transcript div.picard\" % superbowl_year\n    if self.is_text_visible(\"Yes, it was I who summoned you all here.\", selector):\n        return \"Picard Paramount+ Superbowl Ad 2020\"\n    elif self.is_text_visible(\"Commander, signal the following: Our Network is Secure!\"):\n        return \"Picard Mirror Universe iboss Superbowl Ad 2018\"\n    elif self.is_text_visible(\"For the Love of Marketing and Earl Grey Tea!\", selector):\n        return \"Picard Mirror Universe HubSpot Superbowl Ad 2015\"\n    elif self.is_text_visible(\"Delivery Drones... Engage\", selector):\n        return \"Picard Mirror Universe Amazon Superbowl Ad 2015\"\n    elif self.is_text_visible(\"Bing it on Screen!\", selector):\n        return \"Picard Mirror Universe Microsoft Superbowl Ad 2015\"\n    elif self.is_text_visible(\"OK Glass, Make it So!\", selector):\n        return \"Picard Mirror Universe Google Superbowl Ad 2015\"\n    elif self.is_text_visible(\"Number One, I've Never Seen Anything Like It.\", selector):\n        return \"Picard Mirror Universe Tesla Superbowl Ad 2015\"\n    elif self.is_text_visible(\"Let us make sure history never forgets the name ... Facebook\", selector):\n        return \"Picard Mirror Universe Facebook Superbowl Ad 2015\"\n    elif self.is_text_visible(\"\"\"With the first link, the chain is forged.\n                              The first speech censored, the first thought forbidden,\n                              the first freedom denied, chains us all irrevocably.\"\"\", selector):\n        return \"Picard Mirror Universe Wikimedia Superbowl Ad 2015\"\n    else:\n        raise Exception(\"Reports of my assimilation are greatly exaggerated.\")\n</code></pre> <p>\u2753 <code>is_link_text_visible(link_text):</code></p> <pre><code>if self.is_link_text_visible(\"Stop! Hammer time!\"):\n    self.click_link(\"Stop! Hammer time!\")\n</code></pre> <p>\ud83d\udd35 Switching Tabs:</p> <p>If your test opens up a new tab/window, you can switch to it. (SeleniumBase automatically switches to new tabs that don't open to <code>about:blank</code> URLs.)</p> <pre><code>self.switch_to_window(1)  # This switches to the new tab (0 is the first one)\n</code></pre> <p>\ud83d\udd35 ProTip\u2122: iframes follow the same principle as new windows - you need to specify the iframe if you want to take action on something in there</p> <pre><code>self.switch_to_frame('ContentManagerTextBody_ifr')\n# Now you can act inside the iframe\n# .... Do something cool (here)\nself.switch_to_default_content()  # Exit the iframe when you're done\n</code></pre> <p>\ud83d\udd35 Executing Custom jQuery Scripts:</p> <p>jQuery is a powerful JavaScript library that allows you to perform advanced actions in a web browser. If the web page you're on already has jQuery loaded, you can start executing jQuery scripts immediately. You'd know this because the web page would contain something like the following in the HTML:</p> <pre><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.3/jquery.min.js\"&gt;&lt;/script&gt;\n</code></pre> <p>\ud83d\udd35 It's OK if you want to use jQuery on a page that doesn't have it loaded yet. To do so, run the following command first:</p> <pre><code>self.activate_jquery()\n</code></pre>  \u25b6\ufe0f Here are some examples of using jQuery in your scripts. (click to expand) <pre><code>self.execute_script(\"jQuery, window.scrollTo(0, 600)\")  # Scrolling the page\n\nself.execute_script(\"jQuery('#annoying-widget').hide()\")  # Hiding elements on a page\n\nself.execute_script(\"jQuery('#hidden-widget').show(0)\")  # Showing hidden elements on a page\n\nself.execute_script(\"jQuery('#annoying-button a').remove()\")  # Removing elements on a page\n\nself.execute_script(\"jQuery('%s').mouseover()\" % (mouse_over_item))  # Mouse-over elements on a page\n\nself.execute_script(\"jQuery('input#the_id').val('my_text')\")  # Fast text input on a page\n\nself.execute_script(\"jQuery('div#dropdown a.link').click()\")  # Click elements on a page\n\nself.execute_script(\"return jQuery('div#amazing')[0].text\")  # Returns the css \"text\" of the element given\n\nself.execute_script(\"return jQuery('textarea')[2].value\")  # Returns the css \"value\" of the 3rd textarea element on the page\n</code></pre>  (Most of the above commands can be done directly with built-in SeleniumBase methods.)   <p>\ud83d\udd35 Some websites have a restrictive Content Security Policy to prevent users from loading jQuery and other external libraries onto their websites. If you need to use jQuery or another JS library on such a website, add <code>--disable-csp</code> on the command-line.</p>  \u25b6\ufe0f In this example, JavaScript creates a referral button on a page, which is then clicked. (click to expand) <pre><code>start_page = \"https://xkcd.com/465/\"\ndestination_page = \"https://github.com/seleniumbase/SeleniumBase\"\nself.open(start_page)\nreferral_link = '''&lt;a class='analytics test' href='%s'&gt;Free-Referral Button!&lt;/a&gt;''' % destination_page\nself.execute_script('''document.body.innerHTML = \\\"%s\\\"''' % referral_link)\nself.click(\"a.analytics\")  # Clicks the generated button\n</code></pre>  (Due to popular demand, this traffic generation example has been included in SeleniumBase with the <code>self.generate_referral(start_page, end_page)</code> and the <code>self.generate_traffic(start_page, end_page, loops)</code> methods.)   <p>\ud83d\udd35 Using deferred asserts:</p> <p>Let's say you want to verify multiple different elements on a web page in a single test, but you don't want the test to fail until you verified several elements at once so that you don't have to rerun the test to find more missing elements on the same page. That's where deferred asserts come in. Here's the example:</p> <pre><code>from seleniumbase import BaseCase\n\nclass MyTestClass(BaseCase):\n\n    def test_deferred_asserts(self):\n        self.open('https://xkcd.com/993/')\n        self.wait_for_element('#comic')\n        self.deferred_assert_element('img[alt=\"Brand Identity\"]')\n        self.deferred_assert_element('img[alt=\"Rocket Ship\"]')  # Will Fail\n        self.deferred_assert_element('#comicmap')\n        self.deferred_assert_text('Fake Item', '#middleContainer')  # Will Fail\n        self.deferred_assert_text('Random', '#middleContainer')\n        self.deferred_assert_element('a[name=\"Super Fake !!!\"]')  # Will Fail\n        self.process_deferred_asserts()\n</code></pre> <p><code>deferred_assert_element()</code> and <code>deferred_assert_text()</code> will save any exceptions that would be raised. To flush out all the failed deferred asserts into a single exception, make sure to call <code>self.process_deferred_asserts()</code> at the end of your test method. If your test hits multiple pages, you can call <code>self.process_deferred_asserts()</code> before navigating to a new page so that the screenshot from your log files matches the URL where the deferred asserts were made.</p> <p>\ud83d\udd35 Accessing Raw WebDriver:</p> <p>If you need access to any commands that come with standard WebDriver, you can call them directly like this:</p> <pre><code>self.driver.delete_all_cookies()\ncapabilities = self.driver.capabilities\nself.driver.find_elements(\"partial link text\", \"GitHub\")\n</code></pre> <p>(In general, you'll want to use the SeleniumBase versions of methods when available.)</p> <p>\ud83d\udd35 Retrying failing tests automatically:</p> <p>You can use <code>--reruns=NUM</code> to retry failing tests that many times. Use <code>--reruns-delay=SECONDS</code> to wait that many seconds between retries. Example:</p> <pre><code>pytest --reruns=1 --reruns-delay=1\n</code></pre> <p>You can use the <code>@retry_on_exception()</code> decorator to retry failing methods. (First import: <code>from seleniumbase import decorators</code>). To learn more about SeleniumBase decorators, click here.</p>  Wrap-Up <p>Congratulations on getting started with SeleniumBase!</p> <p> If you see something, say something! </p> <p> If you like SeleniumBase, star us! \u2b50 </p> <p>https://github.com/mdmintz</p> <p></p> <p> </p> <p></p> <p></p>"}, {"location": "examples/ReadMe/", "title": "\ud83d\udcda Running Example Tests", "text": ""}, {"location": "examples/ReadMe/#example-tests", "title": "Example Tests", "text": "<ul> <li>SeleniumBase tests are run with pytest.</li> <li>Chrome is the default browser if not specified.</li> <li>Tests are structured using 20 unique syntax formats.</li> <li>Logs from test failures are saved to <code>./latest_logs/</code>.</li> <li>Tests can be run with multiple command-line options.</li> <li>Examples can be found in: SeleniumBase/examples/.</li> </ul> <p>(NOTE: Some example tests fail on purpose to demonstrate logging features.)</p>  Example tests with run commands to help you get started: <p>Run an example test: (Default option: <code>--browser=chrome</code>)</p> <pre><code>pytest test_demo_site.py\n</code></pre> <p></p> <p>Run an example test in Firefox:</p> <pre><code>pytest my_first_test.py --browser=firefox\n</code></pre> <p>Run an example test in Demo Mode: (highlight assertions)</p> <pre><code>pytest test_swag_labs.py --demo\n</code></pre> <p></p> <p>Run test_coffee_cart.py to test the Coffee Cart app:</p> <pre><code>pytest test_coffee_cart.py --demo\n</code></pre> <p></p> <p>Run a Wordle-solver example:</p> <pre><code>pytest wordle_test.py\n</code></pre> <p></p> <p>Run an example test in Headless Mode: (invisible browser)</p> <pre><code>pytest my_first_test.py --headless\n</code></pre> <p>Run an example test using Chrome's mobile device emulator: (default settings)</p> <pre><code>pytest test_swag_labs.py --mobile\n</code></pre> <p></p> <p>Run another example test in Demo Mode: (highlight assertions)</p> <pre><code>pytest test_xkcd.py --demo\n</code></pre> <p></p> <p>Run a test suite with verbose output: (see more details)</p> <pre><code>pytest test_suite.py -v\n</code></pre> <p>Run a test suite multi-threaded using [n] threads:</p> <pre><code>pytest test_suite.py -n=4\n</code></pre> <p>Run a parameterized test: (Generates multiple tests from one)</p> <pre><code>pytest parameterized_test.py -v\n</code></pre> <p>Run a test suite and generate a SeleniumBase Dashboard:</p> <pre><code>pytest test_suite.py --dashboard\n</code></pre> <p>Run a test suite and generate a pytest report:</p> <pre><code>pytest test_suite.py --html=report.html\n</code></pre> <p>Run a failing test: (See the <code>latest_logs/</code> folder for logs and screenshots)</p> <pre><code>pytest test_fail.py\n</code></pre> <p>Run a failing test with Debug-mode enabled: (<code>pdb</code> activates on failures)</p> <pre><code>pytest test_fail.py --pdb -s\n</code></pre> <p>Run a test suite that demonstrates the use of pytest markers:</p> <pre><code>pytest -m marker_test_suite -v\n</code></pre> <p>Run a test suite that reuses the browser session between tests:</p> <pre><code>pytest test_suite.py --reuse-session\n</code></pre> <p>Run an example test demonstrating the <code>rate_limited</code> Python decorator:</p> <pre><code>pytest rate_limiting_test.py\n</code></pre> <p>Run an example test that demonstrates how to upload a file to a website:</p> <pre><code>pytest upload_file_test.py\n</code></pre> <p>Try the new SeleniumBase Commander! A GUI for pytest:</p> <pre><code>sbase gui\n</code></pre> <p></p> <p>SeleniumBase tests can also be run with <code>nosetests</code>:</p> <p>Run an example test with nosetests:</p> <pre><code>nosetests my_first_test.py\n</code></pre> <p>Run an example test suite and generate a nosetest report:</p> <pre><code>nosetests test_suite.py --report --show-report\n</code></pre> <p>Run an example test using a nosetest configuration file:</p> <pre><code>nosetests my_first_test.py --config=example_config.cfg\n</code></pre> <p>For more advanced run commands, such as using a proxy server, see ../help_docs/customizing_test_runs.md</p> <p>If you just need to perform some quick website verification on various devices, you can use the SeleniumBase Device Farm. Just plug in a website URL, and it will display how the website looks on four different devices:</p> <p></p> <p>To make things easier, here's a simple GUI program that allows you to run a few example tests by pressing a button:</p> <pre><code>python gui_test_runner.py\n</code></pre> <p></p> <p>(The newer SeleniumBase Commander improves on that.)</p> <p>\ud83c\udf96\ufe0f To launch the SeleniumBase Commander GUI for pytest:</p> <pre><code>sbase gui\n</code></pre> <p></p> <p></p> <p> </p>"}, {"location": "examples/behave_bdd/ReadMe/", "title": "\ud83d\udc1d Behave-BDD ReadMe", "text": ""}, {"location": "examples/behave_bdd/ReadMe/#behave-test-runner-for-seleniumbase", "title": "\ud83d\udc1d Behave test runner for SeleniumBase \ud83d\udc1d", "text": "<p>\ud83d\udc1d (Utilizes the Behave BDD Python library. For more info, see the Behave tutorial and read about Behave's Gherkin model.)</p> <p>\ud83d\udc1d Behave examples with SeleniumBase: SeleniumBase/examples/behave_bdd</p> <pre><code>&gt; cd examples/behave_bdd/\n&gt; behave features/realworld.feature -T -D dashboard -k\n\nDashboard: /Users/michael/github/SeleniumBase/examples/behave_bdd/dashboard.html\n********************************************************************************\nFeature: SeleniumBase scenarios for the RealWorld App # features/realworld.feature:1\n\nScenario: Verify RealWorld App (log in / sign out)  # features/realworld.feature:3\nGiven Open \"seleniumbase.io/realworld/login\"      # ../../sbase/steps.py:10\nAnd Clear Session Storage                         # ../../sbase/steps.py:391\nWhen Type \"demo_user\" into \"#username\"            # ../../sbase/steps.py:28\nAnd Type \"secret_pass\" into \"#password\"           # ../../sbase/steps.py:28\nAnd Do MFA \"GAXG2MTEOR3DMMDG\" into \"#totpcode\"    # ../../sbase/steps.py:194\nThen Assert exact text \"Welcome!\" in \"h1\"         # ../../sbase/steps.py:85\nAnd Highlight \"img#image1\"                        # ../../sbase/steps.py:95\nAnd Click 'a:contains(\"This Page\")'               # ../../sbase/steps.py:19\nAnd Save screenshot to logs                       # ../../sbase/steps.py:120\nWhen Click link \"Sign out\"                        # ../../sbase/steps.py:104\nThen Assert element 'a:contains(\"Sign in\")'       # ../../sbase/steps.py:60\nAnd Assert text \"You have been signed out!\"       # ../../sbase/steps.py:77\n\u2705 Scenario Passed!\n\n- Dashboard: /Users/michael/github/SeleniumBase/examples/behave_bdd/dashboard.html\n--- LogPath: /Users/michael/github/SeleniumBase/examples/behave_bdd/latest_logs/\n==================================================================================\n1 feature passed, 0 failed, 0 skipped\n1 scenario passed, 0 failed, 0 skipped\n12 steps passed, 0 failed, 0 skipped, 0 undefined\nTook 0m4.682s\n</code></pre> <p>\ud83d\udc1d Another example, which uses higher-level Behave steps to simplify the <code>.feature</code> file:</p> <pre><code>&gt; cd examples/behave_bdd/\n&gt; behave features/calculator.feature:61 -T -D dashboard -k\n\nDashboard: /Users/michael/github/SeleniumBase/examples/behave_bdd/dashboard.html\n********************************************************************************\nFeature: SeleniumBase scenarios for the Calculator App # features/calculator.feature:1\n\nBackground:   # features/calculator.feature:3\n\nScenario: 7.0 \u00d7 (3 + 3) = 42        # features/calculator.feature:49\nGiven Open the Calculator App     # features/steps/calculator.py:4\nWhen Press C                      # features/steps/calculator.py:9\nAnd Press 7                       # features/steps/calculator.py:79\nAnd Press .                       # features/steps/calculator.py:104\nAnd Press 0                       # features/steps/calculator.py:94\nAnd Press \u00d7                       # features/steps/calculator.py:29\nAnd Press (                       # features/steps/calculator.py:14\nAnd Press 3                       # features/steps/calculator.py:59\nAnd Press +                       # features/steps/calculator.py:39\nAnd Press 3                       # features/steps/calculator.py:59\nAnd Press )                       # features/steps/calculator.py:19\nThen Verify output is \"7.0\u00d7(3+3)\" # features/steps/calculator.py:135\nWhen Press =                      # features/steps/calculator.py:44\nThen Verify output is \"42\"        # features/steps/calculator.py:135\n\u2705 Scenario Passed!\n\n- Dashboard: /Users/michael/github/SeleniumBase/examples/behave_bdd/dashboard.html\n--- LogPath: /Users/michael/github/SeleniumBase/examples/behave_bdd/latest_logs/\n==================================================================================\n1 feature passed, 0 failed, 0 skipped\n1 scenario passed, 0 failed, 8 skipped\n14 steps passed, 0 failed, 60 skipped, 0 undefined\nTook 0m1.672s\n</code></pre> <p>\ud83d\udc1d\u26aa With the Dashboard enabled, you'll get one of these:</p> <p></p>"}, {"location": "examples/behave_bdd/ReadMe/#behave-gherkin-files", "title": "\ud83d\udc1d Behave-Gherkin files", "text": "<p>\ud83d\udc1d The <code>*.feature</code> files can use any step seen from:</p> <pre><code>behave --steps-catalog\n</code></pre> <p>\ud83d\udc1d SeleniumBase includes several pre-made Behave steps, which you can use by creating a Python file with the following line in your <code>features/steps/</code> directory:</p> <pre><code>from seleniumbase.behave import steps  # noqa\n</code></pre> <p>\ud83d\udc1d Inside your <code>features/environment.py</code> file, you should have the following:</p> <pre><code>from seleniumbase import BaseCase\nfrom seleniumbase.behave import behave_sb\nbehave_sb.set_base_class(BaseCase)  # Accepts a BaseCase subclass\nfrom seleniumbase.behave.behave_sb import before_all  # noqa\nfrom seleniumbase.behave.behave_sb import before_feature  # noqa\nfrom seleniumbase.behave.behave_sb import before_scenario  # noqa\nfrom seleniumbase.behave.behave_sb import before_step  # noqa\nfrom seleniumbase.behave.behave_sb import after_step  # noqa\nfrom seleniumbase.behave.behave_sb import after_scenario  # noqa\nfrom seleniumbase.behave.behave_sb import after_feature  # noqa\nfrom seleniumbase.behave.behave_sb import after_all  # noqa\n</code></pre> <p>\ud83d\udc1d If you've already created a subclass of <code>BaseCase</code> with custom methods, you can swap <code>BaseCase</code> in with your own subclass, which will allow you to easily use your own custom methods in your Behave step definitions.</p> <p>\ud83d\udc1d Here's an example Python file in the <code>features/steps/</code> folder:</p> <pre><code>from behave import step\n\n\n@step(\"Open the Swag Labs Login Page\")\ndef go_to_swag_labs(context):\n    sb = context.sb\n    sb.open(\"https://www.saucedemo.com\")\n    sb.clear_local_storage()\n\n\n@step(\"Login to Swag Labs with {user}\")\ndef login_to_swag_labs(context, user):\n    sb = context.sb\n    sb.type(\"#user-name\", user)\n    sb.type(\"#password\", \"secret_sauce\\n\")\n\n\n@step(\"Verify that the current user is logged in\")\ndef verify_logged_in(context):\n    sb = context.sb\n    sb.assert_element(\"#header_container\")\n    sb.assert_element(\"#react-burger-menu-btn\")\n    sb.assert_element(\"#shopping_cart_container\")\n\n\n@step('Add \"{item}\" to cart')\ndef add_item_to_cart(context, item):\n    sb = context.sb\n    sb.click('div.inventory_item:contains(\"%s\") button[name*=\"add\"]' % item)\n</code></pre> <p>\ud83d\udc1d A <code>*.feature</code> file could look like this:</p> <pre><code>Feature: SeleniumBase scenarios for the Swag Labs App\n\nBackground:\n    Given Open the Swag Labs Login Page\n\nScenario: User can order a backpack from the store\n    When Login to Swag Labs with standard_user\nThen Verify that the current user is logged in\nAnd Save price of \"Backpack\" to &lt;item_price&gt;\nWhen Add \"Backpack\" to Cart\nThen Verify shopping cart badge shows 1 item(s)\nWhen Click on shopping cart icon\nAnd Click Checkout\nAnd Enter checkout info: First, Last, 12345\nAnd Click Continue\nThen Verify 1 \"Backpack\"(s) in cart\nAnd Verify cost of \"Backpack\" is &lt;item_price&gt;\nAnd Verify item total is $29.99\nAnd Verify tax amount is $2.40\nAnd Verify total cost is $32.39\nWhen Click Finish\nThen Verify order complete\nWhen Logout from Swag Labs\nThen Verify on Login page\n</code></pre> <p>\ud83d\udc1d Here's another example of a <code>*.feature</code> file:</p> <pre><code>Feature: SeleniumBase scenarios for the RealWorld App\n\nScenario: Verify RealWorld App (log in / sign out)\n    Given Open \"seleniumbase.io/realworld/login\"\nAnd Clear Session Storage\nWhen Type \"demo_user\" into \"#username\"\nAnd Type \"secret_pass\" into \"#password\"\nAnd Do MFA \"GAXG2MTEOR3DMMDG\" into \"#totpcode\"\nThen Assert text \"Welcome!\" in \"h1\"\nAnd Highlight element \"img#image1\"\nAnd Click 'a:contains(\"This Page\")'\nAnd Save screenshot to logs\nWhen Click link \"Sign out\"\nThen Assert element 'a:contains(\"Sign in\")'\nAnd Assert text \"You have been signed out!\"\n</code></pre> <p>\ud83d\udc1d If there's a test failure, that's easy to spot:</p> <pre><code>Feature: SeleniumBase scenarios for the Fail Page # features/fail_page.feature:1\n\nScenario: Fail test on purpose to see what happens  # features/fail_page.feature:3\nWhen Open the Fail Page                           # features/steps/fail_page.py:4\nThen Fail test on purpose                         # features/steps/fail_page.py:9\nAssertion Failed: This test fails on purpose!\n      Captured stdout:\n      &gt;&gt;&gt; STEP FAILED:  (#2) Fail test on purpose\nClass / Feature:  SeleniumBase scenarios for the Fail Page\n      Test / Scenario:  Fail test on purpose to see what happens\n\n   \u274c Scenario Failed!\n</code></pre> <p>\ud83d\udc1d\ud83c\udf96\ufe0f For convenience, the SeleniumBase Behave GUI lets you run <code>behave</code> scripts from a Desktop app.</p> <p>\ud83d\udc1d\ud83c\udf96\ufe0f To launch it, call <code>sbase behave-gui</code> or <code>sbase gui-behave</code>:</p> <pre><code>sbase behave-gui\n* Starting the SeleniumBase Behave Commander GUI App...\n</code></pre> <p></p> <p>\ud83d\udc1d\ud83c\udf96\ufe0f You can customize the tests that show up there:</p> <pre><code>sbase behave-gui  # all tests\nsbase behave-gui -i=calculator  # tests with \"calculator\" in the name\nsbase behave-gui features/  # tests located in the \"features/\" folder\nsbase behave-gui features/calculator.feature  # tests in that feature\n</code></pre> To learn more about SeleniumBase, check out the Docs Site: <p> </p> All the code is on GitHub: <p> </p>"}, {"location": "examples/chart_maker/ReadMe/", "title": "\ud83d\udcf6 Chart Maker", "text": ""}, {"location": "examples/chart_maker/ReadMe/#chartmaker", "title": "\ud83d\udcca ChartMaker \ud83d\udcf6 ChartMaker API", "text": "<p>SeleniumBase ChartMaker lets you use Python to generate HTML charts.</p> <p></p> <p>(Click to see a presentation with multiple charts)</p> <p>Here's how to run a simple pie chart presentation from GitHub =&gt; seleniumbase/SeleniumBase/examples/chart_maker:</p> <pre><code>cd examples/chart_maker\npytest my_chart.py\n</code></pre> <p>Here's the code for that pie chart presentation (GitHub =&gt; seleniumbase/SeleniumBase/examples/chart_maker/my_chart.py):</p> <pre><code>from seleniumbase import BaseCase\n\nclass MyChartMakerClass(BaseCase):\n    def test_chart_maker(self):\n        self.create_presentation()\n        self.create_pie_chart(title=\"Automated Tests\")\n        self.add_data_point(\"Passed\", 7, color=\"#95d96f\")\n        self.add_data_point(\"Untested\", 2, color=\"#eaeaea\")\n        self.add_data_point(\"Failed\", 1, color=\"#f1888f\")\n        self.add_slide(\"&lt;p&gt;Pie Chart&lt;/p&gt;\" + self.extract_chart())\n        self.begin_presentation(filename=\"my_chart.html\")\n</code></pre> <p>Here's how to run an example presentation with multiple charts:</p> <pre><code>cd examples/chart_maker\npytest chart_presentation.py\n</code></pre> <p>Here are screenshots from the examples:</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p>  Here's a line chart example: <pre><code>from seleniumbase import BaseCase\n\nclass MyChartMakerClass(BaseCase):\n    def test_chart_maker(self):\n        self.create_presentation()\n        self.create_line_chart(\n            title=\"Time Outside\", subtitle=\"Last Week\", unit=\"Minutes\")\n        self.add_data_point(\"Sun\", 5)\n        self.add_data_point(\"Mon\", 10)\n        self.add_data_point(\"Tue\", 20)\n        self.add_data_point(\"Wed\", 40)\n        self.add_data_point(\"Thu\", 80)\n        self.add_data_point(\"Fri\", 65)\n        self.add_data_point(\"Sat\", 50)\n        self.add_slide(\"&lt;p&gt;Line Chart&lt;/p&gt;\" + self.extract_chart())\n        self.begin_presentation(filename=\"line_chart.html\", interval=8)\n</code></pre> <p>This example is from test_line_chart.py, which you can run from the <code>examples/chart_maker</code> folder with the following command:</p> <pre><code>pytest test_line_chart.py\n</code></pre> <p>Because that presentation above has an <code>interval</code> set to <code>8</code>, it will automatically advance to the next slide after 8 seconds. (Or exit if there are no more slides.)</p>  For a more advanced example (multiple charts in a presentation): <pre><code>from seleniumbase import BaseCase\n\nclass MyChartMakerClass(BaseCase):\n\n    def test_chart_maker_presentation(self):\n        self.create_presentation(theme=\"sky\")\n\n        self.create_pie_chart(title=\"Automated Tests\")\n        self.add_data_point(\"Passed\", 7, color=\"#95d96f\")\n        self.add_data_point(\"Untested\", 2, color=\"#eaeaea\")\n        self.add_data_point(\"Failed\", 1, color=\"#f1888f\")\n        self.add_slide(\"&lt;p&gt;Pie Chart&lt;/p&gt;\" + self.extract_chart())\n\n        self.create_bar_chart(title=\"Language\")\n        self.add_data_point(\"Python\", 33, color=\"Orange\")\n        self.add_data_point(\"JavaScript\", 27, color=\"Teal\")\n        self.add_data_point(\"HTML + CSS\", 21, color=\"Purple\")\n        self.add_slide(\"&lt;p&gt;Bar Chart&lt;/p&gt;\" + self.extract_chart())\n\n        self.create_column_chart(title=\"Colors\")\n        self.add_data_point(\"Red\", 10, color=\"Red\")\n        self.add_data_point(\"Green\", 25, color=\"Green\")\n        self.add_data_point(\"Blue\", 15, color=\"Blue\")\n        self.add_slide(\"&lt;p&gt;Column Chart&lt;/p&gt;\" + self.extract_chart())\n\n        self.create_line_chart(title=\"Last Week's Data\")\n        self.add_data_point(\"Sun\", 5)\n        self.add_data_point(\"Mon\", 10)\n        self.add_data_point(\"Tue\", 20)\n        self.add_data_point(\"Wed\", 40)\n        self.add_data_point(\"Thu\", 80)\n        self.add_data_point(\"Fri\", 65)\n        self.add_data_point(\"Sat\", 50)\n        self.add_slide(\"&lt;p&gt;Line Chart&lt;/p&gt;\" + self.extract_chart())\n\n        self.begin_presentation(filename=\"chart_presentation.html\")\n</code></pre> <p>Here's how to run that example:</p> <pre><code>cd examples/chart_maker\npytest chart_presentation.py\n</code></pre> <p>(Press the Right Arrow to advance to the next slide in that chart presentation)</p> <p>(Click to see a live example of that presentation)</p> <p>Multi-Series charts can also be created. Try the available examples to learn more.</p> <pre><code>self.create_pie_chart(\n    chart_name=None, title=None, subtitle=None,\n    data_name=None, unit=None, libs=True):\n\"\"\" Creates a JavaScript pie chart using \"HighCharts\".\n    @Params\n    chart_name - If creating multiple charts,\n                 use this to select which one.\n    title - The title displayed for the chart.\n    subtitle - The subtitle displayed for the chart.\n    data_name - The series name. Useful for multi-series charts.\n                If no data_name, will default to using \"Series 1\".\n    unit - The description label given to the chart's y-axis values.\n    libs - The option to include Chart libraries (JS and CSS files).\n           Should be set to True (default) for the first time creating\n           a chart on a web page. If creating multiple charts on the\n           same web page, you won't need to re-import the libraries\n           when creating additional charts.\n    labels - If True, displays labels on the chart for data points.\n    legend - If True, displays the data point legend on the chart.\n\"\"\"\n</code></pre> <pre><code>self.create_bar_chart(\n    chart_name=None, title=None, subtitle=None,\n    data_name=None, unit=None, libs=True):\n\"\"\" Creates a JavaScript bar chart using \"HighCharts\".\n    @Params\n    chart_name - If creating multiple charts,\n                 use this to select which one.\n    title - The title displayed for the chart.\n    subtitle - The subtitle displayed for the chart.\n    data_name - The series name. Useful for multi-series charts.\n                If no data_name, will default to using \"Series 1\".\n    unit - The description label given to the chart's y-axis values.\n    libs - The option to include Chart libraries (JS and CSS files).\n           Should be set to True (default) for the first time creating\n           a chart on a web page. If creating multiple charts on the\n           same web page, you won't need to re-import the libraries\n           when creating additional charts.\n    labels - If True, displays labels on the chart for data points.\n    legend - If True, displays the data point legend on the chart.\n\"\"\"\n</code></pre> <pre><code>self.create_column_chart(\n    chart_name=None, title=None, subtitle=None,\n    data_name=None, unit=None, libs=True):\n\"\"\" Creates a JavaScript column chart using \"HighCharts\".\n    @Params\n    chart_name - If creating multiple charts,\n                 use this to select which one.\n    title - The title displayed for the chart.\n    subtitle - The subtitle displayed for the chart.\n    data_name - The series name. Useful for multi-series charts.\n                If no data_name, will default to using \"Series 1\".\n    unit - The description label given to the chart's y-axis values.\n    libs - The option to include Chart libraries (JS and CSS files).\n           Should be set to True (default) for the first time creating\n           a chart on a web page. If creating multiple charts on the\n           same web page, you won't need to re-import the libraries\n           when creating additional charts.\n    labels - If True, displays labels on the chart for data points.\n    legend - If True, displays the data point legend on the chart.\n\"\"\"\n</code></pre> <pre><code>self.create_line_chart(\n    chart_name=None, title=None, subtitle=None,\n    data_name=None, unit=None, zero=False, libs=True):\n\"\"\" Creates a JavaScript line chart using \"HighCharts\".\n    @Params\n    chart_name - If creating multiple charts,\n                 use this to select which one.\n    title - The title displayed for the chart.\n    subtitle - The subtitle displayed for the chart.\n    data_name - The series name. Useful for multi-series charts.\n                If no data_name, will default to using \"Series 1\".\n    unit - The description label given to the chart's y-axis values.\n    zero - If True, the y-axis always starts at 0. (Default: False).\n    libs - The option to include Chart libraries (JS and CSS files).\n           Should be set to True (default) for the first time creating\n           a chart on a web page. If creating multiple charts on the\n           same web page, you won't need to re-import the libraries\n           when creating additional charts.\n    labels - If True, displays labels on the chart for data points.\n    legend - If True, displays the data point legend on the chart.\n\"\"\"\n</code></pre> <pre><code>self.create_area_chart(\n    chart_name=None, title=None, subtitle=None,\n    data_name=None, unit=None, zero=False, libs=True):\n\"\"\" Creates a JavaScript area chart using \"HighCharts\".\n    @Params\n    chart_name - If creating multiple charts,\n                 use this to select which one.\n    title - The title displayed for the chart.\n    subtitle - The subtitle displayed for the chart.\n    data_name - The series name. Useful for multi-series charts.\n                If no data_name, will default to using \"Series 1\".\n    unit - The description label given to the chart's y-axis values.\n    zero - If True, the y-axis always starts at 0. (Default: False).\n    libs - The option to include Chart libraries (JS and CSS files).\n           Should be set to True (default) for the first time creating\n           a chart on a web page. If creating multiple charts on the\n           same web page, you won't need to re-import the libraries\n           when creating additional charts.\n    labels - If True, displays labels on the chart for data points.\n    legend - If True, displays the data point legend on the chart.\n\"\"\"\n</code></pre> <p>If creating multiple charts at the same time, you can pass the <code>chart_name</code> parameter to distinguish between different charts.</p>  Adding a data point to a chart: <pre><code>self.add_data_point(label, value, color=None, chart_name=None):\n\"\"\" Add a data point to a SeleniumBase-generated chart.\n    @Params\n    label - The label name for the data point.\n    value - The numeric value of the data point.\n    color - The HTML color of the data point.\n            Can be an RGB color. Eg: \"#55ACDC\".\n            Can also be a named color. Eg: \"Teal\".\n    chart_name - If creating multiple charts,\n                 use this to select which one.\n\"\"\"\n</code></pre>  Adding a new data series to an existing chart: <pre><code>self.add_series_to_chart(self, data_name=None, chart_name=None):\n\"\"\" Add a new data series to an existing chart.\n    This allows charts to have multiple data sets.\n    @Params\n    data_name - Set the series name. Useful for multi-series charts.\n    chart_name - If creating multiple charts,\n                 use this to select which one.\n\"\"\"\n</code></pre>  Saving a chart to a file: <pre><code>self.save_chart(chart_name=None, filename=None):\n\"\"\" Saves a SeleniumBase-generated chart to a file for later use.\n    @Params\n    chart_name - If creating multiple charts at the same time,\n                 use this to select the one you wish to use.\n    filename - The name of the HTML file that you wish to\n               save the chart to. (filename must end in \".html\")\n\"\"\"\n</code></pre> <p>The full HTML of the chart is saved to the <code>saved_charts/</code> folder.</p>  Extracting the HTML of a chart: <pre><code>self.extract_chart(chart_name=None):\n\"\"\" Extracts the HTML from a SeleniumBase-generated chart.\n    @Params\n    chart_name - If creating multiple charts at the same time,\n                 use this to select the one you wish to use.\n\"\"\"\n</code></pre>  Displaying a chart in the browser window: <pre><code>self.display_chart(chart_name=None, filename=None):\n\"\"\" Displays a SeleniumBase-generated chart in the browser window.\n    @Params\n    chart_name - If creating multiple charts at the same time,\n                 use this to select the one you wish to use.\n    filename - The name of the HTML file that you wish to\n               save the chart to. (filename must end in \".html\")\n    interval - The delay time for auto-advancing charts. (in seconds)\n               If set to 0 (default), auto-advancing is disabled.\n\"\"\"\n</code></pre> <p>All methods have the optional <code>chart_name</code> argument, which is only needed when storing multiple charts at the same time.</p>"}, {"location": "examples/dialog_boxes/ReadMe/", "title": "\ud83d\udec2 Dialog Boxes", "text": "Dialog Boxes \ud83d\udec2 <p>SeleniumBase Dialog Boxes let your users provide input in the middle of automation scripts.</p> <ul> <li>This feature utilizes the jquery-confirm library.</li> <li>A Python API is used to call the JavaScript API.</li> </ul> <p></p> \u2195\ufe0f (Example: dialog_box_tour.py) \u2195\ufe0f <p></p> Here's how to run that example: <pre><code>cd examples/dialog_boxes\npytest test_dialog_boxes.py\n</code></pre> Here's a code snippet from that: <pre><code>self.open(\"https://xkcd.com/1920/\")\nskip_button = [\"SKIP\", \"red\"]  # Can be a [text, color] list or tuple.\nbuttons = [\"Fencing\", \"Football\", \"Metaball\", \"Go/Chess\", skip_button]\nmessage = \"Choose a sport:\"\nchoice = self.get_jqc_button_input(message, buttons)\nif choice == \"Fencing\":\n    self.open(\"https://xkcd.com/1424/\")\n</code></pre> <ul> <li>You can create forms that include buttons and input fields.</li> </ul> Here's a simple form with only buttons as input: <pre><code>choice = self.get_jqc_button_input(\"Ready?\", [\"YES\", \"NO\"])\nprint(choice)  # This prints \"YES\" or \"NO\"\n\n# You may want to customize the color of buttons\nbuttons = [(\"YES\", \"green\"), (\"NO\", \"red\")]\nchoice = self.get_jqc_button_input(\"Ready?\", buttons)\n</code></pre> Here's a simple form with an input field: <pre><code>text = self.get_jqc_text_input(\"Enter text:\", [\"Search\"])\nprint(text)  # This prints the text entered\n</code></pre> This form has an input field and buttons: <pre><code>message = \"Type your name and choose a language:\"\nbuttons = [\"Python\", \"JavaScript\"]\ntext, choice = self.get_jqc_form_inputs(message, buttons)\nprint(\"Your name is: %s\" % text)\nprint(\"You picked %s!\" % choice)\n</code></pre> You can customize options if you want: <pre><code># Themes: bootstrap, modern, material, supervan, light, dark, seamless\noptions = [(\"theme\", \"modern\"), (\"width\", \"50%\")]\nself.get_jqc_text_input(\"You Won!\", [\"OK\"], options)\n</code></pre> Default options can be set with <code>set_jqc_theme()</code>: <pre><code>self.set_jqc_theme(\"light\", color=\"green\", width=\"38%\")\n\n# To reset jqc theme settings to factory defaults\nself.reset_jqc_theme()\n</code></pre> All methods for Dialog Boxes: <pre><code>self.get_jqc_button_input(message, buttons, options=None)\n\nself.get_jqc_text_input(message, button=None, options=None)\n\nself.get_jqc_form_inputs(message, buttons, options=None)\n\nself.set_jqc_theme(theme, color=None, width=None)\n\nself.reset_jqc_theme()\n\nself.activate_jquery_confirm()  # Automatic for jqc methods\n</code></pre> Detailed method summaries for Dialog Boxes: <pre><code>self.get_jqc_button_input(message, buttons, options=None)\n\"\"\"\nPop up a jquery-confirm box and return the text of the button clicked.\nIf running in headless mode, the last button text is returned.\n@Params\nmessage: The message to display in the jquery-confirm dialog.\nbuttons: A list of tuples for text and color.\n    Example: [(\"Yes!\", \"green\"), (\"No!\", \"red\")]\n    Available colors: blue, green, red, orange, purple, default, dark.\n    A simple text string also works: \"My Button\". (Uses default color.)\noptions: A list of tuples for options to set.\n    Example: [(\"theme\", \"bootstrap\"), (\"width\", \"450px\")]\n    Available theme options: bootstrap, modern, material, supervan,\n                             light, dark, and seamless.\n    Available colors: (For the BORDER color, NOT the button color.)\n        \"blue\", \"default\", \"green\", \"red\", \"purple\", \"orange\", \"dark\".\n    Example option for changing the border color: (\"color\", \"default\")\n    Width can be set using percent or pixels. Eg: \"36.0%\", \"450px\".\n\"\"\"\n\nself.get_jqc_text_input(message, button=None, options=None)\n\"\"\"\nPop up a jquery-confirm box and return the text submitted by the input.\nIf running in headless mode, the text returned is \"\" by default.\n@Params\nmessage: The message to display in the jquery-confirm dialog.\nbutton: A 2-item list or tuple for text and color. Or just the text.\n    Example: [\"Submit\", \"blue\"] -&gt; (default button if not specified)\n    Available colors: blue, green, red, orange, purple, default, dark.\n    A simple text string also works: \"My Button\". (Uses default color.)\noptions: A list of tuples for options to set.\n    Example: [(\"theme\", \"bootstrap\"), (\"width\", \"450px\")]\n    Available theme options: bootstrap, modern, material, supervan,\n                             light, dark, and seamless.\n    Available colors: (For the BORDER color, NOT the button color.)\n        \"blue\", \"default\", \"green\", \"red\", \"purple\", \"orange\", \"dark\".\n    Example option for changing the border color: (\"color\", \"default\")\n    Width can be set using percent or pixels. Eg: \"36.0%\", \"450px\".\n\"\"\"\n\nself.get_jqc_form_inputs(message, buttons, options=None)\n\"\"\"\nPop up a jquery-confirm box and return the input/button texts as tuple.\nIf running in headless mode, returns the (\"\", buttons[-1][0]) tuple.\n@Params\nmessage: The message to display in the jquery-confirm dialog.\nbuttons: A list of tuples for text and color.\n    Example: [(\"Yes!\", \"green\"), (\"No!\", \"red\")]\n    Available colors: blue, green, red, orange, purple, default, dark.\n    A simple text string also works: \"My Button\". (Uses default color.)\noptions: A list of tuples for options to set.\n    Example: [(\"theme\", \"bootstrap\"), (\"width\", \"450px\")]\n    Available theme options: bootstrap, modern, material, supervan,\n                             light, dark, and seamless.\n    Available colors: (For the BORDER color, NOT the button color.)\n        \"blue\", \"default\", \"green\", \"red\", \"purple\", \"orange\", \"dark\".\n    Example option for changing the border color: (\"color\", \"default\")\n    Width can be set using percent or pixels. Eg: \"36.0%\", \"450px\".\n\"\"\"\n\nself.set_jqc_theme(theme, color=None, width=None)\n\"\"\" Sets the default jquery-confirm theme and width (optional).\nAvailable themes: \"bootstrap\", \"modern\", \"material\", \"supervan\",\n                  \"light\", \"dark\", and \"seamless\".\nAvailable colors: (This sets the BORDER color, NOT the button color.)\n    \"blue\", \"default\", \"green\", \"red\", \"purple\", \"orange\", \"dark\".\nWidth can be set using percent or pixels. Eg: \"36.0%\", \"450px\".\n\"\"\"\n\nself.reset_jqc_theme()\n\"\"\" Resets the jqc theme settings to factory defaults. \"\"\"\n\nself.activate_jquery_confirm()  # Automatic for jqc methods\n\"\"\" See https://craftpip.github.io/jquery-confirm/ for usage. \"\"\"\n</code></pre> \u2705 \ud83d\udec2 Automated/Manual Hybrid Mode (MasterQA) <p>MasterQA uses SeleniumBase Dialog Boxes to speed up manual testing by having automation perform all the browser actions while the manual tester handles validation. See the MasterQA GitHub page for examples.</p>"}, {"location": "examples/example_logs/ReadMe/", "title": "\ud83d\udcca Dashboard / Reports", "text": ""}, {"location": "examples/example_logs/ReadMe/#logs-the-dashboard-and-reports", "title": "Logs, The Dashboard, and Reports", "text": "<p>\ud83d\udd35 During test failures, logs and screenshots from the most recent test run will get saved to the <code>latest_logs/</code> folder. If <code>--archive-logs</code> is specified (or if ARCHIVE_EXISTING_LOGS is set to True in settings.py), test logs will also get archived to the <code>archived_logs/</code> folder. Otherwise, the log files will be cleaned out when the next test run begins (by default).</p> <pre><code>pytest test_fail.py\n</code></pre> <p>(Log files in SeleniumBase/examples/example_logs were generated when test_fail.py ran and failed.)</p> <p>Examples of expected log files generated during failures:</p> <ul> <li>basic_test_info.txt</li> <li>page_source.html</li> <li>screenshot.png</li> </ul> <p>In addition to log files, you can also generate dashboards and test reports.</p>  The SeleniumBase Dashboard: <p>\ud83d\udd35 The <code>--dashboard</code> option for pytest generates a SeleniumBase Dashboard located at <code>dashboard.html</code>, which updates automatically as tests run and produce results. Example:</p> <pre><code>pytest --dashboard --rs --headless\n</code></pre> <p></p> <p>\ud83d\udd35 Additionally, you can host your own SeleniumBase Dashboard Server on a port of your choice. Here's an example of that using Python 3's <code>http.server</code>:</p> <pre><code>python -m http.server 1948\n</code></pre> <p>\ud83d\udd35 Now you can navigate to <code>http://localhost:1948/dashboard.html</code> in order to view the dashboard as a web app. This requires two different terminal windows: one for running the server, and another for running the tests, which should be run from the same directory. (Use <code>CTRL+C</code> to stop the http server.)</p> <p>\ud83d\udd35 Here's a full example of what the SeleniumBase Dashboard may look like:</p> <pre><code>pytest test_suite.py --dashboard --rs --headless\n</code></pre> <p></p>  Pytest Reports: <p>\ud83d\udd35 Using <code>--html=report.html</code> gives you a fancy report of the name specified after your test suite completes.</p> <pre><code>pytest test_suite.py --html=report.html\n</code></pre> <p></p> <p>\ud83d\udd35 When combining pytest html reports with SeleniumBase Dashboard usage, the pie chart from the Dashboard will get added to the html report. Additionally, if you set the html report URL to be the same as the Dashboard URL when also using the dashboard, (example: <code>--dashboard --html=dashboard.html</code>), then the Dashboard will become an advanced html report when all the tests complete.</p> <p>\ud83d\udd35 Here's an example of an upgraded html report:</p> <pre><code>pytest test_suite.py --dashboard --html=report.html\n</code></pre> <p></p> <p>If viewing <code>pytest-html</code> reports in Jenkins, you may need to configure Jenkins settings for the HTML to render correctly. This is due to Jenkins CSP changes. That setting can be changed from <code>Manage Jenkins</code> &gt; <code>Script Console</code> by running:</p> <pre><code>System.setProperty(\"hudson.model.DirectoryBrowserSupport.CSP\", \"\")\n</code></pre> <p>You can also use <code>--junit-xml=report.xml</code> to get an xml report instead. Jenkins can use this file to display better reporting for your tests.</p> <pre><code>pytest test_suite.py --junit-xml=report.xml\n</code></pre>  Nosetest Reports: <p>The <code>nosetests</code> <code>--report</code> option gives you a fancy report after your tests complete.</p> <pre><code>nosetests test_suite.py --report\n</code></pre> <p></p> <p>(NOTE: You can add <code>--show-report</code> to immediately display Nosetest reports after the test suite completes. Only use <code>--show-report</code> when running tests locally because it pauses the test run.)</p>  \ud83d\udc1d\u26aa Behave Dashboard &amp; Reports: <p>(The behave_bdd/ folder can be found in the examples/ folder.)</p> <pre><code>behave behave_bdd/features/ -D dashboard -D headless\n</code></pre> <p></p> <p>You can also use <code>--junit</code> to get <code>.xml</code> reports for each Behave feature. Jenkins can use these files to display better reporting for your tests.</p> <pre><code>behave behave_bdd/features/ --junit -D rs -D headless\n</code></pre>"}, {"location": "examples/master_qa/ReadMe/", "title": "\ud83d\udec2 MasterQA Mode", "text": "MasterQA combines automation with manual verification steps. <p>Here's code from basic_masterqa_test_0.py:</p> <pre><code>from seleniumbase import MasterQA\n\nclass MasterQATests(MasterQA):\n    def test_masterqa(self):\n        self.open(\"https://xkcd.com/1700/\")\n        self.verify(\"Do you see a webcomic?\")\n        self.open(\"https://seleniumbase.io/demo_page\")\n        self.highlight('table')\n        self.verify(\"Do you see elements in a table?\")\n        self.open(\"https://seleniumbase.io/devices/\")\n        self.highlight(\"div.mockup-wrapper\")\n        self.verify(\"Do you see 4 computer devices?\")\n</code></pre> <p>After each automation checkpoint, a pop-up window will ask the user questions for each verification command.</p> <p>When the test run completes, as seen from this longer example, you'll reach the results page that appears after answering all the verification questions. (Failed verifications generate links to screenshots and log files.)</p> <p></p> <p>You may have noticed the <code>Incomplete Test Runs</code> row on the results page. If the value for that is not zero, it means that one of the automated steps failed. This could happen if you tell your script to perform an action on an element that doesn't exist. Now that we're mixing automation with manual QA, it's good to tell apart the failures from each. The results_table CSV file contains a spreadsheet with the details of each failure (if any) for both manual and automated steps.</p> <p>How to run the example tests from scratch:</p> <pre><code>git clone https://github.com/seleniumbase/SeleniumBase.git\ncd SeleniumBase\npip install .\ncd examples/master_qa\npytest basic_masterqa_test_0.py\npytest masterqa_test_1.py\n</code></pre> <p>At the end of your test run, you'll receive a report with results, screenshots, and log files. Close the Results Page window when you're done.</p> <p>Check out masterqa_test_1.py to learn how to write your own MasterQA tests:</p> <p>You'll notice that tests are written the same way as regular SeleniumBase tests, with the key difference being a different import: <code>from seleniumbase import MasterQA</code> rather than <code>from seleniumbase import BaseCase</code>. Now your Python test class will import <code>MasterQA</code> instead of <code>BaseCase</code>.</p> <p>To add a manual verification step, use <code>self.verify()</code> in the code after each part of your test that needs a manual verification step. If you want to include a custom question, add text inside that call (in quotes). Example:</p> <pre><code>self.verify()\n\nself.verify(\"Can you find the moon?\")\n</code></pre> <p>MasterQA is powered by SeleniumBase, the most advanced open-source automation framework on the Planet.</p>"}, {"location": "examples/presenter/ReadMe/", "title": "\ud83c\udf9e\ufe0f Presentation Maker", "text": ""}, {"location": "examples/presenter/ReadMe/#presenter", "title": "\ud83d\udcd1 Presenter \ud83c\udf9e\ufe0f", "text": "<p>SeleniumBase Presenter (slide-maker) lets you use Python to generate HTML presentations.</p> <p>Here's a sample presentation:</p> <p></p> <p>(Click on the image/GIF for the actual presentation)</p> <p>(Here's the code for that presentation)</p> <p>Slides can include HTML, code, images, and iframes.</p> <p>Here's how to run the example presentation:</p> <pre><code>cd examples/presenter\npytest my_presentation.py\n</code></pre> <p>Here's a presentation with a chart:</p> <p></p> <p>(Click on the image/GIF for the actual presentation)</p> <p>(Here's the code for that presentation)</p> <p>Here's how to run that example:</p> <pre><code>cd examples/presenter\npytest core_presentation.py\n</code></pre>  Creating a new presentation: <pre><code>self.create_presentation(name=None, theme=\"serif\", transition=\"default\")\n\"\"\" Creates a Reveal-JS presentation that you can add slides to.\n    @Params\n    name - If creating multiple presentations at the same time,\n           use this to specify the name of the current presentation.\n    theme - Set a theme with a unique style for the presentation.\n            Valid themes: \"serif\" (default), \"sky\", \"white\", \"black\",\n                          \"simple\", \"league\", \"moon\", \"night\",\n                          \"beige\", \"blood\", and \"solarized\".\n    transition - Set a transition between slides.\n                 Valid transitions: \"none\" (default), \"slide\", \"fade\",\n                                    \"zoom\", \"convex\", and \"concave\".\n\"\"\"\n</code></pre> <p>If creating multiple presentations at the same time, you can pass the <code>name</code> parameter to distinguish between different presentations. Notes are disabled by default. You can enable notes by specifying: <code>show_notes=True</code></p>  Adding a slide to a presentation: <pre><code>self.add_slide(content=None, image=None, code=None, iframe=None,\n               content2=None, notes=None, transition=None, name=None)\n\"\"\" Allows the user to add slides to a presentation.\n    @Params\n    content - The HTML content to display on the presentation slide.\n    image - Attach an image (from a URL link) to the slide.\n    code - Attach code of any programming language to the slide.\n           Language-detection will be used to add syntax formatting.\n    iframe - Attach an iFrame (from a URL link) to the slide.\n    content2 - HTML content to display after adding an image or code.\n    notes - Additional notes to include with the slide.\n            ONLY SEEN if show_notes is set for the presentation.\n    transition - Set a transition between slides. (overrides previous)\n                 Valid transitions: \"none\" (default), \"slide\", \"fade\",\n                                    \"zoom\", \"convex\", and \"concave\".\n    name - If creating multiple presentations at the same time,\n           use this to select the presentation to add slides to.\n\"\"\"\n</code></pre>  Running a presentation: <pre><code>self.begin_presentation(\n    filename=\"my_presentation.html\", show_notes=False, interval=0)\n\"\"\" Begin a Reveal-JS Presentation in the web browser.\n    @Params\n    name - If creating multiple presentations at the same time,\n           use this to select the one you wish to add slides to.\n    filename - The name of the HTML file that you wish to\n               save the presentation to. (filename must end in \".html\")\n    show_notes - When set to True, the Notes feature becomes enabled,\n                 which allows presenters to see notes next to slides.\n    interval - The delay time between autoplaying slides. (in seconds)\n               If set to 0 (default), autoplay is disabled.\n\"\"\"\n</code></pre> <p>Before the presentation is run, the full HTML is saved to the <code>saved_presentations/</code> folder.</p> <p>All methods have the optional <code>name</code> argument, which is only needed if you're creating multiple presentations at once.</p>  Here's an example of using SeleniumBase Presenter: <pre><code>from seleniumbase import BaseCase\n\n\nclass MyPresenterClass(BaseCase):\n\n    def test_presenter(self):\n        self.create_presentation(theme=\"serif\")\n        self.add_slide(\n            '&lt;h1&gt;Welcome&lt;/h1&gt;&lt;br /&gt;\\n'\n            '&lt;h3&gt;Press the &lt;b&gt;Right Arrow&lt;/b&gt;&lt;/h3&gt;')\n        self.add_slide(\n            '&lt;h3&gt;SeleniumBase Presenter&lt;/h3&gt;&lt;br /&gt;\\n'\n            '&lt;img width=\"240\" src=\"https://seleniumbase.io/img/logo3a.png\" /&gt;'\n            '&lt;span style=\"margin:144px;\" /&gt;'\n            '&lt;img src=\"https://seleniumbase.io/other/python_3d_logo.png\" /&gt;'\n            '&lt;br /&gt;&lt;br /&gt;\\n&lt;h4&gt;Create presentations with &lt;b&gt;Python&lt;/b&gt;&lt;/h4&gt;')\n        self.add_slide(\n            '&lt;h3&gt;Make slides using &lt;b&gt;HTML&lt;/b&gt;:&lt;/h3&gt;&lt;br /&gt;\\n'\n            '&lt;table style=\"padding:10px;border:4px solid black;font-size:50;\"&gt;'\n            '\\n&lt;tr style=\"background-color:CDFFFF;\"&gt;\\n'\n            '&lt;th&gt;Row ABC&lt;/th&gt;&lt;th&gt;Row XYZ&lt;/th&gt;&lt;/tr&gt;\\n'\n            '&lt;tr style=\"background-color:DCFDDC;\"&gt;'\n            '&lt;td&gt;Value ONE&lt;/td&gt;&lt;td&gt;Value TWO&lt;/td&gt;&lt;/tr&gt;\\n'\n            '&lt;tr style=\"background-color:DFDFFB;\"&gt;\\n'\n            '&lt;td&gt;Value THREE&lt;/td&gt;&lt;td&gt;Value FOUR&lt;/td&gt;&lt;/tr&gt;\\n'\n            '&lt;/table&gt;&lt;br /&gt;\\n&lt;h4&gt;(HTML &lt;b&gt;table&lt;/b&gt; example)&lt;/h4&gt;')\n        self.add_slide(\n            '&lt;h3&gt;Keyboard Shortcuts:&lt;/h3&gt;\\n'\n            '&lt;table style=\"padding:10px;border:4px solid black;font-size:30;'\n            'background-color:FFFFDD;\"&gt;\\n'\n            '&lt;tr&gt;&lt;th&gt;Key&lt;/th&gt;&lt;th&gt;Action&lt;/th&gt;&lt;/tr&gt;\\n'\n            '&lt;tr&gt;&lt;td&gt;&lt;b&gt;=&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Next Slide (N also works)&lt;/td&gt;&lt;/tr&gt;\\n'\n            '&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;=&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Previous Slide (P also works)&lt;/td&gt;&lt;/tr&gt;'\n            '\\n&lt;tr&gt;&lt;td&gt;F&lt;/td&gt;&lt;td&gt;Full Screen Mode&lt;/td&gt;&lt;/tr&gt;\\n'\n            '&lt;tr&gt;&lt;td&gt;O&lt;/td&gt;&lt;td&gt;Overview Mode Toggle&lt;/td&gt;&lt;/tr&gt;\\n'\n            '&lt;tr&gt;&lt;td&gt;esc&lt;/td&gt;&lt;td&gt;Exit Full Screen / Overview Mode&lt;/td&gt;&lt;/tr&gt;\\n'\n            '&lt;tr&gt;&lt;td&gt;&lt;b&gt;.&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Pause/Resume Toggle&lt;/td&gt;&lt;/tr&gt;\\n'\n            '&lt;tr&gt;&lt;td&gt;space&lt;/td&gt;&lt;td&gt;Next Slide (alternative)&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'\n            )\n        self.add_slide(\n            '&lt;h3&gt;Add &lt;b&gt;images&lt;/b&gt; to slides:&lt;/h3&gt;',\n            image=\"https://seleniumbase.github.io/other/seagulls.jpg\")\n        self.add_slide(\n            '&lt;h3&gt;Add &lt;b&gt;code&lt;/b&gt; to slides:&lt;/h3&gt;',\n            code=(\n                'from seleniumbase import BaseCase\\n\\n'\n                'class MyTestClass(BaseCase):\\n\\n'\n                '    def test_basics(self):\\n'\n                '        self.open(\"https://store.xkcd.com/search\")\\n'\n                '        self.type(\\'input[name=\"q\"]\\', \"xkcd book\\\\n\")\\n'\n                '        self.assert_text(\"xkcd: volume 0\", \"h3\")\\n'\n                '        self.open(\"https://xkcd.com/353/\")\\n'\n                '        self.assert_title(\"xkcd: Python\")\\n'\n                '        self.assert_element(\\'img[alt=\"Python\"]\\')\\n'\n                '        self.click(\\'a[rel=\"license\"]\\')\\n'\n                '        self.assert_text(\"free to copy and reuse\")\\n'\n                '        self.go_back()\\n'\n                '        self.click_link(\"About\")\\n'\n                '        self.assert_exact_text(\"xkcd.com\", \"h2\")'))\n        self.add_slide(\n            \"&lt;h3&gt;Highlight &lt;b&gt;code&lt;/b&gt; in slides:&lt;/h3&gt;\",\n            code=(\n                'from seleniumbase import BaseCase\\n\\n'\n                '&lt;mark&gt;class MyTestClass(BaseCase):&lt;/mark&gt;\\n\\n'\n                '    def test_basics(self):\\n'\n                '        self.open(\"https://store.xkcd.com/search\")\\n'\n                '        self.type(\\'input[name=\"q\"]\\', \"xkcd book\\\\n\")\\n'\n                '        self.assert_text(\"xkcd: volume 0\", \"h3\")'))\n        self.add_slide(\n            '&lt;h3&gt;Add &lt;b&gt;iFrames&lt;/b&gt; to slides:&lt;/h3&gt;',\n            iframe=\"https://seleniumbase.io/demo_page\")\n        self.add_slide(\n            '&lt;h3&gt;Getting started is &lt;b&gt;easy&lt;/b&gt;:&lt;/h3&gt;',\n            code=(\n                'from seleniumbase import BaseCase\\n\\n'\n                'class MyPresenterClass(BaseCase):\\n\\n'\n                '    def test_presenter(self):\\n'\n                '        self.create_presentation(theme=\"serif\")\\n'\n                '        self.add_slide(\"Welcome to Presenter!\")\\n'\n                '        self.add_slide(\\n'\n                '            \"Add code to slides:\",\\n'\n                '            code=(\\n'\n                '                \"from seleniumbase import BaseCase\\\\n\\\\n\"\\n'\n                '                \"class MyPresenterClass(BaseCase):\\\\n\\\\n\"\\n'\n                '                \"    def test_presenter(self):\\\\n\"\\n'\n                '                \"        self.create_presentation()\\\\n\"))\\n'\n                '        self.begin_presentation(\\n'\n                '            filename=\"demo.html\", show_notes=True)'))\n        self.add_slide(\n            '&lt;h3&gt;Include &lt;b&gt;notes&lt;/b&gt; with slides:&lt;/h3&gt;&lt;br /&gt;',\n            code=('self.add_slide(\"[Your HTML goes here]\",\\n'\n                  '               code=\"[Your software code goes here]\",\\n'\n                  '               content2=\"[Additional HTML goes here]\",\\n'\n                  '               notes=\"[Attached speaker notes go here]\"\\n'\n                  '                     \"[Note A! -- Note B! -- Note C! ]\")'),\n            notes='&lt;h2&gt;&lt;ul&gt;&lt;li&gt;Note A!&lt;li&gt;Note B!&lt;li&gt;Note C!&lt;li&gt;Note D!&lt;/h2&gt;',\n            content2=\"&lt;h4&gt;(Notes can include HTML tags)&lt;/h4&gt;\")\n        self.add_slide(\n            '&lt;h3&gt;Multiple &lt;b&gt;themes&lt;/b&gt; available:&lt;/h3&gt;',\n            code=(\n                'self.create_presentation(theme=\"serif\")\\n\\n'\n                'self.create_presentation(theme=\"sky\")\\n\\n'\n                'self.create_presentation(theme=\"simple\")\\n\\n'\n                'self.create_presentation(theme=\"white\")\\n\\n'\n                'self.create_presentation(theme=\"moon\")\\n\\n'\n                'self.create_presentation(theme=\"black\")\\n\\n'\n                'self.create_presentation(theme=\"night\")\\n\\n'\n                'self.create_presentation(theme=\"beige\")\\n\\n'\n                'self.create_presentation(theme=\"league\")'))\n        self.add_slide(\n            '&lt;h2&gt;&lt;b&gt;The End&lt;/b&gt;&lt;/h2&gt;',\n            image=\"https://seleniumbase.github.io/img/sb_logo_10.png\")\n        self.begin_presentation(\n            filename=\"presenter.html\", show_notes=True, interval=0)\n</code></pre> <p>That example is from my_presentation.py, which you can run from the <code>examples/presenter</code> folder with the following command:</p> <pre><code>pytest my_presentation.py\n</code></pre>  Saving a presentation: <p>If you want to save the presentation you created as an HTML file, use:</p> <pre><code>self.save_presentation(filename=\"my_presentation.html\", show_notes=True)\n</code></pre> <p>Presentations automatically get saved when calling:</p> <pre><code>self.begin_presentation(show_notes=True)\n</code></pre>"}, {"location": "examples/tour_examples/ReadMe/", "title": "\ud83d\ude8e Tour Maker", "text": ""}, {"location": "examples/tour_examples/ReadMe/#interactive-product-tours", "title": "Interactive Product Tours \ud83d\ude8e", "text": "<p>Increase SaaS Product Adoption by 10x or more.</p> <ul> <li>SeleniumBase Tours utilize 5 JavaScript libraries for creating interactive walkthroughs on any website:</li> </ul> <p>IntroJS, Bootstrap Tour, DriverJS, Shepherd, and Hopscotch.</p> <p>A tour demo: (with autoplay)</p> <p></p> <p>SeleniumBase maps_introjs_tour.py</p> <pre><code>cd examples/tour_examples\npytest maps_introjs_tour.py --interval=1\n</code></pre> <p>Here's a longer version:</p> <p></p> <p>SeleniumBase google_tour.py</p> <pre><code>cd examples/tour_examples\npytest google_tour.py\n</code></pre> <p>(From GitHub =&gt; SeleniumBase/examples/tour_examples)</p>"}, {"location": "examples/tour_examples/ReadMe/#creating-a-new-tour", "title": "Creating a new tour", "text": ""}, {"location": "examples/tour_examples/ReadMe/#to-create-a-tour-utilizing-the-shepherd-library-use-one-of-the-following", "title": "To create a tour utilizing the Shepherd Library, use one of the following", "text": "<p><code>self.create_shepherd_tour()</code></p> <p>OR</p> <p><code>self.create_tour(theme=\"shepherd\")</code></p> <p>You can pass a custom theme to change the look &amp; feel of Shepherd tours. Valid themes for Shepherd Tours are <code>dark</code>, <code>light</code> / <code>arrows</code>, <code>default</code>, <code>square</code>, and <code>square-dark</code>.</p>"}, {"location": "examples/tour_examples/ReadMe/#to-create-a-tour-utilizing-the-bootstrap-tour-library-use-one-of-the-following", "title": "To create a tour utilizing the Bootstrap Tour Library, use one of the following", "text": "<p><code>self.create_bootstrap_tour()</code></p> <p>OR</p> <p><code>self.create_tour(theme=\"bootstrap\")</code></p>"}, {"location": "examples/tour_examples/ReadMe/#to-create-a-tour-utilizing-the-introjs-library-use-one-of-the-following", "title": "To create a tour utilizing the IntroJS Library, use one of the following", "text": "<p><code>self.create_introjs_tour()</code></p> <p>OR</p> <p><code>self.create_tour(theme=\"introjs\")</code></p>"}, {"location": "examples/tour_examples/ReadMe/#to-create-a-tour-utilizing-the-driverjs-library-use-one-of-the-following", "title": "To create a tour utilizing the DriverJS Library, use one of the following", "text": "<p><code>self.create_driverjs_tour()</code></p> <p>OR</p> <p><code>self.create_tour(theme=\"driverjs\")</code></p>"}, {"location": "examples/tour_examples/ReadMe/#to-create-a-tour-utilizing-the-hopscotch-library-use-one-of-the-following", "title": "To create a tour utilizing the Hopscotch Library, use one of the following", "text": "<p><code>self.create_hopscotch_tour()</code></p> <p>OR</p> <p><code>self.create_tour(theme=\"hopscotch\")</code></p>"}, {"location": "examples/tour_examples/ReadMe/#adding-a-step-to-a-tour", "title": "Adding a step to a tour", "text": ""}, {"location": "examples/tour_examples/ReadMe/#to-add-a-tour-step-use-the-following", "title": "To add a tour step, use the following", "text": "<p><code>self.add_tour_step(message, css_selector, title, alignment, theme)</code></p> <p>With the <code>self.add_tour_step()</code> method, you must first pass a message to display. You can then specify a web element to attach to (by using CSS selectors). If no element is specified, the tour step will tether to the top of the screen by default. You can also add an optional title above the message to display with the tour step, as well as change the theme for that step (Shepherd tours only), and even specify the alignment (which is the side of the element that you want the tour message to tether to).</p>"}, {"location": "examples/tour_examples/ReadMe/#playing-a-tour", "title": "Playing a tour", "text": "<p>You can play a tour by calling:</p> <p><code>self.play_tour(interval)</code></p> <p>If you specify an <code>interval</code> (optional), the tour will automatically walk through each step after that many seconds have passed.</p> <p>All methods have the optional <code>name</code> argument, which is only needed if you're creating multiple tours at once. Then, when you're adding a step or playing a tour, SeleniumBase knows which tour you're referring too. You can avoid using the <code>name</code> arg for multiple tours if you play a tour before creating a new one.</p>"}, {"location": "examples/tour_examples/ReadMe/#heres-how-the-code-looks", "title": "Here's how the code looks", "text": "<pre><code>from seleniumbase import BaseCase\n\nclass MyTourClass(BaseCase):\n\n    def test_google_tour(self):\n        self.open('https://google.com/ncr')\n        self.wait_for_element('input[title=\"Search\"]')\n\n        self.create_tour(theme=\"dark\")\n        self.add_tour_step(\"Welcome to Google!\", title=\"SeleniumBase Tours\")\n        self.add_tour_step(\"Type in your query here.\", 'input[title=\"Search\"]')\n        self.play_tour()\n\n        self.highlight_type('input[title=\"Search\"]', \"Google\")\n        self.wait_for_element('[role=\"listbox\"]')  # Wait for autocomplete\n\n        self.create_tour(theme=\"light\")\n        self.add_tour_step(\"Then click to search.\", '[value=\"Google Search\"]')\n        self.add_tour_step(\"Or press [ENTER] after entry.\", '[title=\"Search\"]')\n        self.play_tour()\n</code></pre>"}, {"location": "examples/tour_examples/ReadMe/#that-code-is-from-google_tourpy-which-you-can-run-from-the-tour_examples-folder-with-the-following-command", "title": "That code is from google_tour.py, which you can run from the <code>tour_examples/</code> folder with the following command", "text": "<pre><code>pytest google_tour.py\n</code></pre>"}, {"location": "examples/tour_examples/ReadMe/#exporting-a-tour", "title": "Exporting a Tour", "text": "<p>If you want to save the tour you created as a JavaScript file, use:</p> <p><code>self.export_tour()</code></p> <p>OR</p> <p><code>self.export_tour(name=None, filename=\"my_tour.js\")</code></p> <p>(<code>name</code> is optional unless you gave custom names to your tours when you created them. <code>filename</code> is the name of the file to save the JavaScript to.) Once you've exported your tour, you can use it outside of SeleniumBase. You can even copy the tour's JavaScript code to the Console of your web browser to play the tour from there (you need to be on the correct web page for it to work).</p> <p></p>"}, {"location": "examples/visual_testing/ReadMe/", "title": "\ud83d\uddbc\ufe0f Visual Testing", "text": ""}, {"location": "examples/visual_testing/ReadMe/#automated-visual-regression-testing", "title": "Automated Visual Regression Testing", "text": "<p>Automated Visual Regression Testing can help you detect when the layout of a web page has changed. Instead of comparing pixels from screenshots, layout differences can be detected by comparing HTML tags and attributes with a baseline. If a change is detected, it could mean that something broke, the web page was redesigned, or dynamic content changed.</p> <p>To handle automated visual testing, SeleniumBase uses the <code>self.check_window()</code> method, which can set visual baselines for comparison and then compare the latest versions of web pages to the existing baseline.</p> <p>The first time a test calls <code>self.check_window()</code> with a unique <code>name</code> parameter, the visual baseline is set, which means a folder is created with the following files:</p> <li>page_url.txt  -&gt;  The URL of the current window</li> <li>baseline.png  -&gt;  The baseline screenshot (PNG)</li> <li>tags_level1.txt  -&gt;  HTML tags from the window</li> <li>tags_level2.txt  -&gt;  HTML tags + attribute names</li> <li>tags_level3.txt  -&gt;  HTML tags + attribute names+values</li> <p>After the first time <code>self.check_window()</code> is called, later calls will compare the HTML tags and attributes of the latest window to the ones from the first call (or to the ones from the call when the baseline was last reset). Additionally, a <code>latest.png</code> screenshot is saved in the same folder, which can help you determine if/when the existing baseline needs to be reset.</p> <p>Here's an example call:</p> <pre><code>self.check_window(name=\"first_test)\", level=3)\n</code></pre> <p>On the first run (or if the baseline is being set/reset) the \"level\" doesn't matter because that's only used for comparing the current layout to the existing baseline.</p> <p>Here's how the level system works:</p> <li>level=0 -&gt;     DRY RUN ONLY - Will perform a comparison to the baseline, and print out any differences that are found, but won't fail the test even if differences exist.</li> <li>level=1 -&gt;     HTML tags are compared to tags_level1.txt</li> <li>level=2 -&gt;     HTML tags and attribute names are compared to tags_level2.txt</li> <li>level=3 -&gt;     HTML tags and attribute names+values are compared to tags_level3.txt</li> <p>As shown, Level-3 is the most strict, Level-1 is the least strict. If the comparisons from the latest window to the existing baseline don't match, the current test will fail, except for Level-0 checks, which print Level-3 results without failing the test.</p> <p>You can reset the visual baseline on the command line by adding the following parameter at runtime:</p> <pre><code>--visual_baseline\n</code></pre> <p>As long as <code>--visual_baseline</code> is used on the command line while running tests, the <code>self.check_window()</code> method cannot fail because it will rebuild the visual baseline rather than comparing the html tags of the latest run to the existing baseline. If there are any expected layout changes to a website that you're testing, you'll need to reset the baseline to prevent unnecessary failures.</p> <p><code>self.check_window()</code> will fail with \"Page Domain Mismatch Failure\" if the domain of the current URL doesn't match the domain of the baseline URL.</p> <p>If you want to use <code>self.check_window()</code> to compare a web page to a later version of itself in the same test, add the <code>baseline=True</code> parameter to your first <code>self.check_window()</code> call to use that as the baseline. (This only makes sense if you're calling <code>self.check_window()</code> more than once with the same \"name\" parameter in the same test.)</p> <p>Automated Visual Testing with <code>self.check_window()</code> is not very effective for websites that have dynamic content because that changes the layout and structure of web pages. For those pages, you're much better off using regular SeleniumBase functional testing, unless you can remove the dynamic content before performing the comparison, (such as by using <code>self.ad_block()</code> to remove dynamic ad content on a web page).</p> <p>Example usage of <code>self.check_window()</code> with different levels:</p> <pre><code>    self.check_window(name=\"testing\", level=0)\n    self.check_window(name=\"xkcd_home\", level=1)\n    self.check_window(name=\"github_page\", level=2)\n    self.check_window(name=\"wikipedia_page\", level=3)\n\n    self.check_window(name=\"helloworld\", baseline=True)\n    ### Do something that may change the web page\n    self.check_window(name=\"helloworld\", level=3)\n</code></pre> <p>Here's an example where clicking a button makes a hidden element visible:</p> <pre><code>from seleniumbase import BaseCase\n\nclass VisualLayoutTest(BaseCase):\n\n    def test_applitools_layout_change_failure(self):\n        self.open('https://applitools.com/helloworld?diff1')\n        print('\\nCreating baseline in \"visual_baseline\" folder.')\n        self.check_window(name=\"helloworld\", baseline=True)\n        # Click a button that changes the text of an element\n        self.click('a[href=\"?diff1\"]')\n        # Click a button that makes a hidden element visible\n        self.click(\"button\")\n        self.check_window(name=\"helloworld\", level=3)\n</code></pre> <p>Here's the output of that: (Text changes do not impact visual comparisons)</p> <pre><code>AssertionError:\nFirst differing element 39:\n['div', [['class', ['section', 'hidden-section', 'image-section']]]]\n['div', [['class', ['section', 'image-section']]]]\n\n-  ['div', [['class', ['section', 'hidden-section', 'image-section']]]],\n?                                ------------------\n+  ['div', [['class', ['section', 'image-section']]]],\n*\n*** Exception: &lt;Level 3&gt; Visual Diff Failure:\n* HTML tag attribute values don't match the baseline!\n</code></pre> <p>Here's an example where a button is removed from a web page:</p> <pre><code>from seleniumbase import BaseCase\n\nclass VisualLayoutTest(BaseCase):\n\n    def test_python_home_layout_change_failure(self):\n        self.open('https://python.org/')\n        print('\\nCreating baseline in \"visual_baseline\" folder.')\n        self.check_window(name=\"python_home\", baseline=True)\n        # Remove the \"Donate\" button\n        self.remove_element('a.donate-button')\n        self.check_window(name=\"python_home\", level=3)\n</code></pre> <p>Here's the output of that:</p> <pre><code>AssertionError:\nFirst differing element 33:\n['a', [['class', ['donate-button']], ['href', '/psf/donations/']]]\n['div', [['class', ['options-bar']]]]\n\n-  ['a', [['class', ['donate-button']], ['href', '/psf/donations/']]],\n-     'display: list-item; opacity: 0.995722;']]],\n?                         -------------------\n+     'display: list-item;']]],\n*\n*** Exception: &lt;Level 3&gt; Visual Diff Failure:\n* HTML tag attribute values don't match the baseline!\n</code></pre> <p>Here's the <code>side_by_side.html</code> file for that, (from the <code>./latest_logs/</code> folder), which shows a visual comparison of the two screenshots as a result of the missing \"Donate\" button:</p> <p></p> <p>Here's another example, where a web site logo is resized:</p> <pre><code>from seleniumbase import BaseCase\n\nclass VisualLayoutTest(BaseCase):\n\n    def test_xkcd_layout_change_failure(self):\n        self.open('https://xkcd.com/554/')\n        print('\\nCreating baseline in \"visual_baseline\" folder.')\n        self.check_window(name=\"xkcd_554\", baseline=True)\n        # Change height: (83 -&gt; 130) , Change width: (185 -&gt; 120)\n        self.set_attribute('[alt=\"xkcd.com logo\"]', \"height\", \"130\")\n        self.set_attribute('[alt=\"xkcd.com logo\"]', \"width\", \"120\")\n        self.check_window(name=\"xkcd_554\", level=3)\n</code></pre> <p>Here's the output of that:</p> <pre><code>AssertionError:\nFirst differing element 22:\n['img[30 chars]['height', '83'], ['src', '/s/0b7742.png'], ['width', '185']]]\n['img[30 chars]['height', '130'], ['src', '/s/0b7742.png'], ['width', '120']]]\n\n-    ['height', '83'],\n?                ^\n+    ['height', '130'],\n?                ^ +\n-    ['width', '185']]],\n?                ^^\n+    ['width', '120']]],\n?                ^^\n*\n*** Exception: &lt;Level 3&gt; Visual Diff Failure:\n* HTML tag attribute values don't match the baseline!\n</code></pre> <p>To run the example (from examples/visual_testing/) with a pytest HTML Report, use:</p> <pre><code>pytest test_layout_fail.py --html=report.html\n</code></pre> <p>Here's what the pytest HTML Report looks like: </p> <p>In conclusion, open source automated visual testing tools are being built directly into test frameworks, and this trend is growing. Just like many years ago when free Wi-Fi at coffee shops replaced Internet cafes that charged money for Internet access, open source tools for visual testing will replace their paid counterparts in time. You'll remember this next time you're sipping your Starbucks\u00ae Pumpkin Spice Latte with your free Internet access, instead of paying for Internet at cybercafes.</p>"}, {"location": "help_docs/ReadMe/", "title": "\ud83d\udcd1 Table of Contents", "text": ""}, {"location": "help_docs/ReadMe/#help-docs", "title": "Help Docs", "text": "<p> \ud83d\ude80 Start | \ud83d\udcca Dashboard \ud83c\udff0 Features | \ud83c\udf9b\ufe0f Options \ud83d\udcda Examples | \ud83d\udcf1 Emulator \ud83c\udf20 Console Scripts | \ud83c\udf10 Grid \ud83d\udcd8 Methods / APIs | \ud83d\ude8e Tours \ud83d\udd21 Syntax Formats | \ud83e\udd16 CI/CD \u267b\ufe0f Boilerplates | \ud83d\uddfe Locale Codes \ud83d\udd79\ufe0f JS Manager | \ud83d\uddbc\ufe0f Visual Testing \ud83c\udf0f Translator | \ud83d\udec2 Dialog Boxes \ud83d\udd34 Recorder | \ud83d\ude9d Migrate \ud83c\udf9e\ufe0f Slides | \ud83d\udcf6 Charts </p> Table of Contents (seleniumbase.io) Features List Command Line Tutorial Usage Examples Demo Page for Tests How SeleniumBase Works Installing Python, Pip, &amp; Git Python Virtual Env Tutorial SeleniumBase Installation Webdriver Installation Verify Webdriver Works Console Scripts Tutorial The Dashboard Recorder Mode pytest Commander Syntax Formats Behave BDD Behave Commander Mobile Device Testing Method Summary (API Ref) Case Plans Language Translations Language Locale Codes JS Package Manager Tour Examples Presentation Maker Chart Maker MySQL Installation Overview Using the Selenium Grid Browser Desired Capabilities Safari Driver Detailed Info Seeing Hidden Files on macOS Case Studies Demo Pages / Web Examples Demo Page (Test Page) MFA Login (Test Page) TinyMCE (Test Page) Error Page (Test Page) Drag-&amp;-Drop (Test Page) Device Farm (Virtual) HTML Playground Page SeleniumBase in iframe Page with broken links Shadow DOM/Root W3Schools iframes W3Schools file upload W3Schools doubleclick W3Schools drag &amp; drop W3Schools checkboxes W3Schools radio buttons Presentations Presenter Demo Core Presentation Chart Maker Demo Python Virtual Envs GitHub Pages (seleniumbase.dev) Features List Command Line Tutorial Usage Examples How SeleniumBase Works Installing Python, Pip, &amp; Git Python Virtual Env Tutorial SeleniumBase Installation Webdriver Installation Verify Webdriver Works Console Scripts Tutorial The Dashboard Recorder Mode pytest Commander Syntax Formats Behave BDD Behave Commander Mobile Device Testing Method Summary (API Ref) Case Plans Language Translations Language Locale Codes JS Package Manager Tour Examples Presentation Maker Chart Maker MySQL Installation Overview Using the Selenium Grid Browser Desired Capabilities Safari Driver Detailed Info Seeing Hidden Files on macOS Case Studies <p> </p> <p></p>"}, {"location": "help_docs/behave_gui/", "title": "\ud83d\udc1d Behave-BDD GUI App", "text": ""}, {"location": "help_docs/behave_gui/#seleniumbase-behave-gui-commander", "title": "SeleniumBase Behave GUI / Commander \ud83d\udc1d\ud83c\udf96\ufe0f", "text": "<p>\ud83d\udc1d\ud83c\udf96\ufe0f The SeleniumBase Behave GUI lets you run <code>behave</code> scripts from a Desktop GUI.</p> <p>\ud83d\udc1d\ud83c\udf96\ufe0f To launch it, call <code>sbase behave-gui</code> or <code>sbase gui-behave</code>:</p> <pre><code>&gt; sbase behave-gui\n* Starting the SeleniumBase Behave Commander GUI App...\n</code></pre> <p></p> <p>\ud83d\udc1d\ud83c\udf96\ufe0f SeleniumBase Behave GUI loads the same tests that are found by:</p> <pre><code>behave -d\n</code></pre> <p>\ud83d\udc1d\ud83c\udf96\ufe0f You can customize which tests are loaded by passing additional args:</p> <pre><code>sbase behave-gui [OPTIONAL PATH or TEST FILE]\n</code></pre> <p>\ud83d\udc1d\ud83c\udf96\ufe0f Here are examples of customizing test collection:</p> <pre><code>sbase behave-gui  # all tests\nsbase behave-gui -i=calculator  # tests with \"calculator\" in the name\nsbase behave-gui features/  # tests located in the \"features/\" folder\nsbase behave-gui features/calculator.feature  # tests in that feature\n</code></pre> <p>\ud83d\udc1d\ud83c\udf96\ufe0f Once launched, you can further customize which tests to run and what settings to use. There are various controls for changing settings, modes, and other \"behave\" command line options that are specific to SeleniumBase. You can also set additional options that don't have a visible toggle. When you're ready to run the selected tests with the specified options, click on the <code>Run Selected Tests</code> button.</p> <p>\ud83d\udc1d\u26aa With the Dashboard enabled, you'll get one of these:</p> <p></p> To learn more about SeleniumBase, check out the Docs Site: <p> </p> All the code is on GitHub: <p> </p>"}, {"location": "help_docs/case_plans/", "title": "\ud83d\uddc2\ufe0f Case Plans", "text": ""}, {"location": "help_docs/case_plans/#seleniumbase-case-plans", "title": "SeleniumBase Case Plans \ud83d\uddc2\ufe0fSummary of existing Case Plans", "text": "<p>\ud83d\uddc2\ufe0f SeleniumBase Case Plans is Test Case Management Software that uses Markdown tables for displaying test plans directly in GitHub (and other source code management systems that support Markdown format).</p> <p>\ud83d\uddc2\ufe0f The <code>case_summary.md</code> file is generated from individual Case Plans that exist in the <code>case_plans/</code> folders of your repository. (See the example below to learn how the Case Summary file may look.)</p> <p>Example of a <code>case_summary.md</code> file:</p> \ud83d\udd35 8 Case Plans with customized tables \u2b55 2 Case Plans using boilerplate code \ud83d\udea7 1 Case Plan that is missing a table \ud83d\udd0e (Click rows to expand) \ud83d\udd0d  \ud83d\udd35 <code>basic_test.py::MyTestClass::test_basics</code>  | # | Step Description | Expected Result | | - | ---------------- | --------------- | | 1 | Log in to https://www.saucedemo.com with ``standard_user``. | Login was successful. | | 2 | Click on the ``Backpack`` ``ADD TO CART`` button. | The button text changed to ``REMOVE``. | | 3 | Click on the cart icon. | The ``Backpack`` is seen in the cart. | | 4 | Remove the ``Backpack`` from the cart. | The ``Backpack`` is no longer in the cart. | | 5 | Log out from the website. | Logout was successful. |    \ud83d\udd35 <code>list_assert_test.py::MyTestClass::test_assert_list_of_elements</code>  | # | Step Description | Expected Result | | - | ---------------- | --------------- | | 1 | Open https://seleniumbase.io/demo_page. | | | 2 | Use ``self.assert_elements_present(\"head\", \"style\", \"script\")`` to verify that multiple elements are present in the HTML. | The assertion is successful. | | 3 | Use ``self.assert_elements(\"h1\", \"h2\", \"h3\")`` to verify that multiple elements are visible. | The assertion is successful. | | 4 | Use ``self.assert_elements([\"#myDropdown\", \"#myButton\", \"#svgRect\"])`` to verify that multiple elements are visible. | The assertion is successful. |    \u2b55 <code>locale_code_test.py::LocaleCodeTests::test_locale_code</code>  | # | Step Description | Expected Result | | - | ---------------- | --------------- | | 1 | Perform Action 1 | Verify Action 1 | | 2 | Perform Action 2 | Verify Action 2 |    \ud83d\udd35 <code>my_first_test.py::MyTestClass::test_swag_labs</code>  | # | Step Description | Expected Result | | - | ---------------- | --------------- | | 1 | Log in to https://www.saucedemo.com with ``standard_user``. | Login was successful. | | 2 | Click on the ``Backpack`` ``ADD TO CART`` button. | The button text changed to ``REMOVE``. | | 3 | Click on the cart icon. | The ``Backpack`` is seen in the cart. | | 4 | Click on the ``CHECKOUT`` button.  Enter user details and click ``CONTINUE``. | The ``Backpack`` is seen in the cart on the ``CHECKOUT: OVERVIEW`` page. | | 5 | Click on the ``FINISH`` button. | There is a ``Thank You`` message and a ``Pony Express`` delivery logo. | | 6 | Log out from the website. | Logout was successful. |    \u2b55 <code>proxy_test.py::ProxyTests::test_proxy</code>  | # | Step Description | Expected Result | | - | ---------------- | --------------- | | 1 | Perform Action 1 | Verify Action 1 | | 2 | Perform Action 2 | Verify Action 2 |    \ud83d\udd35 <code>shadow_root_test.py::ShadowRootTest::test_shadow_root</code>  | # | Step Description | Expected Result | | - | ---------------- | --------------- | | 1 | Open https://seleniumbase.io/other/shadow_dom.  Click each tab and verify the text contained within the Shadow Root sections. | Tab 1 text: ``Content Panel 1``  Tab 2 text: ``Content Panel 2``  Tab 3 text: ``Content Panel 3`` |   <p>\ud83d\udea7 <code>test_agent.py::UserAgentTests::test_user_agent</code></p>  \ud83d\udd35 <code>test_calculator.py::CalculatorTests::test_6_times_7_plus_12_equals_54</code>  | # | Step Description | Expected Result | | - | ---------------- | --------------- | | 1 | Open https://seleniumbase.io/apps/calculator.  Perform the following calculation: ``6 \u00d7 7 + 12`` | The output is ``54`` after pressing ``=`` |    \ud83d\udd35 <code>test_demo_site.py::DemoSiteTests::test_demo_site</code>  | # | Step Description | Expected Result | | - | ---------------- | --------------- | | 1 | Open https://seleniumbase.io/demo_page |  | | 2 | Assert the title of the current web page.  Assert that a given element is visible on the page.  Assert that a text substring appears in an element's text. | The assertions were successful. | | 3 | Type text into various text fields and then verify. | The assertions were successful. | | 4 | Verify that a hover dropdown link changes page text. | The assertion was successful. | | 5 | Verify that a button click changes text on the page. | The assertion was successful. | | 6 | Verify that an SVG element is located on the page. | The assertion was successful. | | 7 | Verify that a slider control updates a progress bar. | The assertion was successful. | | 8 | Verify that a \"select\" option updates a meter bar. | The assertion was successful. | | 9 | Assert an element located inside an iFrame. | The assertion was successful. | | 10 | Assert text located inside an iFrame. | The assertion was successful. | | 11 | Verify that clicking a radio button selects it. | The assertion was successful. | | 12 | Verify that clicking an empty checkbox makes it selected. | The assertion was successful. | | 13 | Verify clicking on multiple elements with one call. | The assertions were successful. | | 14 | Verify that clicking an iFrame checkbox selects it. | The assertions were successful. | | 15 | Verify that Drag and Drop works. | The assertion was successful. | | 16 | Assert link text. | The assertion was successful. | | 17 | Verify clicking on link text. | The action was successful. | | 18 | Assert exact text in an element. | The assertion was successful. | | 19 | Highlight a page element. | The action was successful. | | 20 | Verify that Demo Mode works. | The assertion was successful. |    \ud83d\udd35 <code>test_login.py::SwagLabsLoginTests::test_swag_labs_login</code>  | # | Step Description | Expected Result | | - | ---------------- | --------------- | | 1 | Log in to https://www.saucedemo.com with ``standard_user``. | Login was successful. | | 2 | Log out from the website. | Logout was successful. |    \ud83d\udd35 <code>test_mfa_login.py::TestMFALogin::test_mfa_login</code>  | # | Step Description | Expected Result | | - | ---------------- | --------------- | | 1 | Open https://seleniumbase.io/realworld/login  Enter credentials and Sign In. | Sign In was successful. | | 2 | Click the ``This Page`` button.  Save a screenshot to the logs. | | | 3 | Click to Sign Out | Sign Out was successful. |   <p>\ud83d\uddc2\ufe0f Before you can generate a <code>case_summary.md</code> file that includes your existing Case Plans, first you'll need to select which existing tests you want to create boilerplate Case Plans from. For that, you can use the SeleniumBase Case Plans GUI:</p> <pre><code>sbase caseplans\n</code></pre> <p></p> <p>\ud83d\uddc2\ufe0f Once you are running the Case Plans GUI, select the existing tests that need Case Plans, and then click: <code>Generate boilerplate Case Plans for selected tests missing them</code>. For each selected test that didn't already have a Case Plan file, one will be generated. Each new Case Plan file starts with default boilerplate code with a Markdown table. Eg:</p> <pre><code>``proxy_test.py::ProxyTests::test_proxy``\n---\n| # | Step Description | Expected Result |\n| - | ---------------- | --------------- |\n| 1 | Perform Action 1 | Verify Action 1 |\n| 2 | Perform Action 2 | Verify Action 2 |\n</code></pre> <p>\ud83d\uddc2\ufe0f When rendered as a Markdown table, the result looks like this:</p>"}, {"location": "help_docs/case_plans/#proxy_testpyproxyteststest_proxy", "title": "<code>proxy_test.py::ProxyTests::test_proxy</code>", "text": "# Step Description Expected Result 1 Perform Action 1 Verify Action 1 2 Perform Action 2 Verify Action 2 <p>\ud83d\uddc2\ufe0f Markdown tables are flexible, but must be constructed correctly to be displayed. For a Markdown table to render, it's important that you place pipes (<code>|</code>), dashes (<code>-</code>), and spaces in the correct locations. If you want a line break in a step, use <code>&lt;br /&gt;</code>. If you want an empty step, put a space between pipes, eg: <code>| |</code>.</p> <p>\ud83d\uddc2\ufe0f Here's an example of a Case Plan for my_first_test.py:</p>"}, {"location": "help_docs/case_plans/#my_first_testpymytestclasstest_swag_labs", "title": "<code>my_first_test.py::MyTestClass::test_swag_labs</code>", "text": "# Step Description Expected Result 1 Log in to https://www.saucedemo.com with <code>standard_user</code>. Login was successful. 2 Click on the <code>Backpack</code> <code>ADD TO CART</code> button. The button text changed to <code>REMOVE</code>. 3 Click on the cart icon. The <code>Backpack</code> is seen in the cart. 4 Click on the <code>CHECKOUT</code> button.  Enter user details and click <code>CONTINUE</code>. The <code>Backpack</code> is seen in the cart on the <code>CHECKOUT: OVERVIEW</code> page. 5 Click on the <code>FINISH</code> button. There is a <code>Thank you</code> message. 6 Log out from the website. Logout was successful. <p>\ud83d\uddc2\ufe0f After you've created some Case Plans, you can use the <code>Generate Summary of existing Case Plans</code> button in the Case Plans GUI to generate the Case Plans Summary file.</p> <p></p> <p>\ud83d\uddc2\ufe0f The generated Case Plans summary file, <code>case_summary.md</code>, gets created in the same location where the Case Plans GUI was launched. This is NOT the same location where individual Case Plan boilerplates are generated, which is in the <code>case_plans/</code> folders. The <code>case_plans/</code> folders are generated where individual tests live, which means that if you have your tests in multiple folders, then you could also have multiple <code>case_plans/</code> folders. A <code>case_summary.md</code> file may look like this when rendered:</p> <p></p> <p>\ud83d\uddc2\ufe0f When calling <code>sbase caseplans</code>, you can provide additional arguments to limit the tests that appear in the list. The same discovery rules apply as when using <code>pytest</code>. Eg:</p> <pre><code>sbase caseplans\nsbase caseplans -k agent\nsbase caseplans -m marker2\nsbase caseplans test_suite.py\nsbase caseplans offline_examples/\n</code></pre> To learn more about SeleniumBase, check out the Docs Site: <p> </p> All the code is on GitHub: <p> </p>"}, {"location": "help_docs/commander/", "title": "\ud83c\udf96\ufe0f GUI / Commander", "text": ""}, {"location": "help_docs/commander/#seleniumbase-commander", "title": "SeleniumBase Commander \ud83c\udf96\ufe0f", "text": "<p>\ud83c\udf96\ufe0f SeleniumBase Commander lets you run <code>pytest</code> scripts from a Desktop GUI.</p> <p>\ud83c\udf96\ufe0f To launch it, call <code>sbase commander</code> or <code>sbase gui</code>:</p> <pre><code>sbase gui\n* Starting the SeleniumBase Commander Desktop App...\n</code></pre> <p></p> <p>\ud83c\udf96\ufe0f SeleniumBase Commander loads the same tests that are found by:</p> <pre><code>pytest --co -q\n</code></pre> <p>\ud83c\udf96\ufe0f You can customize which tests are loaded by passing additional args:</p> <pre><code>sbase commander [OPTIONAL PATH or TEST FILE]\nsbase gui [OPTIONAL PATH or TEST FILE]\n</code></pre> <p>\ud83c\udf96\ufe0f Here are examples of customizing test collection:</p> <pre><code>sbase gui\nsbase gui -k agent\nsbase gui -m marker2\nsbase gui test_suite.py\nsbase gui offline_examples/\n</code></pre> <p>\ud83c\udf96\ufe0f Once launched, you can further customize which tests to run and what settings to use. There are various controls for changing settings, modes, and other pytest command line options that are specific to SeleniumBase. You can also set additional options that don't have a visible toggle. When you're ready to run the selected tests with the specified options, click on the <code>Run Selected Tests</code> button.</p>  Other SeleniumBase Commanders: <ul> <li>\ud83d\udc1d\ud83c\udf96\ufe0f SeleniumBase Behave GUI / Commander</li> </ul> <p></p> To learn more about SeleniumBase, check out the Docs Site: <p> </p> All the code is on GitHub: <p> </p>"}, {"location": "help_docs/customizing_test_runs/", "title": "\ud83c\udf9b\ufe0f Command Line Options", "text": ""}, {"location": "help_docs/customizing_test_runs/#pytest-options-for-seleniumbase", "title": "pytest options for SeleniumBase", "text": "<p>\ud83c\udf9b\ufe0f SeleniumBase's pytest plugin lets you customize test runs from the CLI (Command-Line Interface), which adds options for setting/enabling the browser type, Dashboard Mode, Demo Mode, Headless Mode, Mobile Mode, Multi-threading Mode, Recorder Mode, reuse-session mode, proxy config, user agent config, browser extensions, html-report mode, and more.</p> <p>\ud83c\udf9b\ufe0f Here are some examples of configuring tests, which can be run from the examples/ folder:</p> <pre><code># Run a test in Chrome (default browser)\npytest my_first_test.py\n\n# Run a test in Firefox\npytest test_swag_labs.py --browser=firefox\n\n# Run a test in Demo Mode (highlight assertions)\npytest test_demo_site.py --demo\n\n# Run a test in Headless Mode (invisible browser)\npytest test_demo_site.py --headless\n\n# Run tests multi-threaded using [n] threads\npytest test_suite.py -n=4\n\n# Reuse the browser session for all tests (\"--rs\")\npytest test_suite.py --reuse-session\n\n# Reuse the browser session, but erase cookies between tests\npytest test_suite.py --reuse-session --crumbs\n\n# Create a real-time dashboard for test results\npytest test_suite.py --dashboard\n\n# Create a pytest html report after tests are done\npytest test_suite.py --html=report.html\n\n# Activate Debug Mode on failures (\"c\" to continue)\npytest test_fail.py --pdb -s\n\n# Rerun failing tests more times\npytest test_suite.py --reruns=1\n\n# Activate Debug Mode as the test begins (\"n\": next. \"c\": continue)\npytest test_null.py --trace -s\n\n# Activate Recorder/Debug Mode as the test begins (\"c\" to continue)\npytest test_null.py --recorder --trace -s\n\n# Pass extra data into tests (retrieve by calling self.data)\npytest my_first_test.py --data=\"ABC,DEF\"\n\n# Run tests on a local Selenium Grid\npytest test_suite.py --server=\"127.0.0.1\"\n\n# Run tests on a remote Selenium Grid\npytest test_suite.py --server=IP_ADDRESS --port=4444\n\n# Run tests on a remote Selenium Grid with authentication\npytest test_suite.py --server=USERNAME:KEY@IP_ADDRESS --port=80\n\n# Run tests through a proxy server\npytest proxy_test.py --proxy=IP_ADDRESS:PORT\n\n# Run tests through a proxy server with authentication\npytest proxy_test.py --proxy=USERNAME:PASSWORD@IP_ADDRESS:PORT\n\n# Run tests while setting the web browser's User Agent\npytest user_agent_test.py --agent=\"USER-AGENT-STRING\"\n\n# Run tests using Chrome's mobile device emulator (default settings)\npytest test_swag_labs.py --mobile\n\n# Run mobile tests specifying CSS Width, CSS Height, and Pixel-Ratio\npytest test_swag_labs.py --mobile --metrics=\"360,640,2\"\n\n# Run tests while changing SeleniumBase default settings\npytest my_first_test.py --settings-file=custom_settings.py\n</code></pre> <p>\ud83c\udf9b\ufe0f You can interchange <code>pytest</code> with <code>nosetests</code> for most tests, but using <code>pytest</code> is recommended. (<code>chrome</code> is the default browser if not specified.)</p> <p>\ud83c\udf9b\ufe0f If you're using <code>pytest</code> for running tests outside of the SeleniumBase repo, you'll want a copy of pytest.ini at the base of the new folder structure. If using <code>nosetests</code>, the same applies for setup.cfg.</p> <p>\ud83c\udf9b\ufe0f Here are some useful command-line options that come with <code>pytest</code>:</p> <pre><code>-v  # Verbose mode. Prints the full name of each test and shows more details.\n-q  # Quiet mode. Print fewer details in the console output when running tests.\n-x  # Stop running the tests after the first failure is reached.\n--html=report.html  # Creates a detailed pytest-html report after tests finish.\n--collect-only | --co  # Show what tests would get run. (Without running them)\n-n=NUM  # Multithread the tests using that many threads. (Speed up test runs!)\n-s  # See print statements. (Should be on by default with pytest.ini present.)\n--junit-xml=report.xml  # Creates a junit-xml report after tests finish.\n--pdb  # If a test fails, enter Post Mortem Debug Mode. (Don't use with CI!)\n--trace  # Enter Debug Mode at the beginning of each test. (Don't use with CI!)\n-m=MARKER  # Run tests with the specified pytest marker.\n</code></pre> <p>\ud83c\udf9b\ufe0f SeleniumBase provides additional <code>pytest</code> command-line options for tests:</p> <pre><code>--browser=BROWSER  # (The web browser to use. Default: \"chrome\".)\n--chrome  # (Shortcut for \"--browser=chrome\". On by default.)\n--edge  # (Shortcut for \"--browser=edge\".)\n--firefox  # (Shortcut for \"--browser=firefox\".)\n--safari  # (Shortcut for \"--browser=safari\".)\n--settings-file=FILE  # (Override default SeleniumBase settings.)\n--env=ENV  # (Set the test env. Access with \"self.env\" in tests.)\n--account=STR  # (Set account. Access with \"self.account\" in tests.)\n--data=STRING  # (Extra test data. Access with \"self.data\" in tests.)\n--var1=STRING  # (Extra test data. Access with \"self.var1\" in tests.)\n--var2=STRING  # (Extra test data. Access with \"self.var2\" in tests.)\n--var3=STRING  # (Extra test data. Access with \"self.var3\" in tests.)\n--variables=DICT  # (Extra test data. Access with \"self.variables\".)\n--user-data-dir=DIR  # (Set the Chrome user data directory to use.)\n--protocol=PROTOCOL  # (The Selenium Grid protocol: http|https.)\n--server=SERVER  # (The Selenium Grid server/IP used for tests.)\n--port=PORT  # (The Selenium Grid port used by the test server.)\n--cap-file=FILE  # (The web browser's desired capabilities to use.)\n--cap-string=STRING  # (The web browser's desired capabilities to use.)\n--proxy=SERVER:PORT  # (Connect to a proxy server:port as tests are running)\n--proxy=USERNAME:PASSWORD@SERVER:PORT  # (Use an authenticated proxy server)\n--proxy-bypass-list=STRING # (\";\"-separated hosts to bypass, Eg \"*.foo.com\")\n--proxy-pac-url=URL  # (Connect to a proxy server using a PAC_URL.pac file.)\n--proxy-pac-url=USERNAME:PASSWORD@URL  # (Authenticated proxy with PAC URL.)\n--proxy-driver  # (If a driver download is needed, will use: --proxy=PROXY.)\n--multi-proxy  # (Allow multiple authenticated proxies when multi-threaded.)\n--agent=STRING  # (Modify the web browser's User-Agent string.)\n--mobile  # (Use the mobile device emulator while running tests.)\n--metrics=STRING  # (Set mobile metrics: \"CSSWidth,CSSHeight,PixelRatio\".)\n--chromium-arg=\"ARG=N,ARG2\"  # (Set Chromium args, \",\"-separated, no spaces.)\n--firefox-arg=\"ARG=N,ARG2\"  # (Set Firefox args, comma-separated, no spaces.)\n--firefox-pref=SET  # (Set a Firefox preference:value set, comma-separated.)\n--extension-zip=ZIP  # (Load a Chrome Extension .zip|.crx, comma-separated.)\n--extension-dir=DIR  # (Load a Chrome Extension directory, comma-separated.)\n--binary-location=PATH  # (Set path of the Chromium browser binary to use.)\n--sjw  # (Skip JS Waits for readyState to be \"complete\" or Angular to load.)\n--pls=PLS  # (Set pageLoadStrategy on Chrome: \"normal\", \"eager\", or \"none\".)\n--headless  # (Run tests in headless mode. The default arg on Linux OS.)\n--headless2  # (Use the new headless mode, which supports extensions.)\n--headed  # (Run tests in headed/GUI mode on Linux OS, where not default.)\n--xvfb  # (Run tests using the Xvfb virtual display server on Linux OS.)\n--locale=LOCALE_CODE  # (Set the Language Locale Code for the web browser.)\n--interval=SECONDS  # (The autoplay interval for presentations &amp; tour steps)\n--start-page=URL  # (The starting URL for the web browser when tests begin.)\n--archive-logs  # (Archive existing log files instead of deleting them.)\n--archive-downloads  # (Archive old downloads instead of deleting them.)\n--time-limit=SECONDS  # (Safely fail any test that exceeds the time limit.)\n--slow  # (Slow down the automation. Faster than using Demo Mode.)\n--demo  # (Slow down and visually see test actions as they occur.)\n--demo-sleep=SECONDS  # (Set the wait time after Slow &amp; Demo Mode actions.)\n--highlights=NUM  # (Number of highlight animations for Demo Mode actions.)\n--message-duration=SECONDS  # (The time length for Messenger alerts.)\n--check-js  # (Check for JavaScript errors after page loads.)\n--ad-block  # (Block some types of display ads from loading.)\n--block-images  # (Block images from loading during tests.)\n--do-not-track  # (Indicate to websites that you don't want to be tracked.)\n--verify-delay=SECONDS  # (The delay before MasterQA verification checks.)\n--recorder  # (Enables the Recorder for turning browser actions into code.)\n--rec-behave  # (Same as Recorder Mode, but also generates behave-gherkin.)\n--rec-sleep  # (If the Recorder is enabled, also records self.sleep calls.)\n--rec-print  # (If the Recorder is enabled, prints output after tests end.)\n--disable-js  # (Disable JavaScript on websites. Pages might break!)\n--disable-csp  # (Disable the Content Security Policy of websites.)\n--disable-ws  # (Disable Web Security on Chromium-based browsers.)\n--enable-ws  # (Enable Web Security on Chromium-based browsers.)\n--enable-sync  # (Enable \"Chrome Sync\" on websites.)\n--uc | --undetected  # (Use undetected-chromedriver to evade bot-detection.)\n--uc-cdp-events  # (Capture CDP events when running in \"--undetected\" mode.)\n--remote-debug  # (Sync to Chrome Remote Debugger chrome://inspect/#devices)\n--final-debug  # (Enter Debug Mode after each test ends. Don't use with CI!)\n--dashboard  # (Enable the SeleniumBase Dashboard. Saved at: dashboard.html)\n--dash-title=STRING  # (Set the title shown for the generated dashboard.)\n--enable-3d-apis  # (Enables WebGL and 3D APIs.)\n--swiftshader  # (Use Chrome's \"--use-gl=swiftshader\" feature.)\n--incognito  # (Enable Chrome's Incognito mode.)\n--guest  # (Enable Chrome's Guest mode.)\n--devtools  # (Open Chrome's DevTools when the browser opens.)\n--reuse-session | --rs  # (Reuse browser session for all tests.)\n--reuse-class-session | --rcs  # (Reuse session for tests in class.)\n--crumbs  # (Delete all cookies between tests reusing a session.)\n--disable-beforeunload  # (Disable the \"beforeunload\" event on Chrome.)\n--window-size=WIDTH,HEIGHT  # (Set the browser's starting window size.)\n--maximize  # (Start tests with the browser window maximized.)\n--screenshot  # (Save a screenshot at the end of each test.)\n--no-screenshot  # (No screenshots saved unless tests directly ask it.)\n--visual-baseline  # (Set the visual baseline for Visual/Layout tests.)\n--wire  # (Use selenium-wire's webdriver for replacing selenium webdriver.)\n--external-pdf  # (Set Chromium \"plugins.always_open_pdf_externally\":True.)\n--timeout-multiplier=MULTIPLIER  # (Multiplies the default timeout values.)\n--list-fail-page  # (After each failing test, list the URL of the failure.)\n</code></pre> <p>(For more details, see the full list of command-line options here.)</p> <p>\ud83c\udf9b\ufe0f You can also view a list of popular <code>pytest</code> options for SeleniumBase by typing:</p> <pre><code>seleniumbase options\n</code></pre> <p>Or the short form:</p> <pre><code>sbase options\n</code></pre>  Example tests using Logging: <p>To see logging abilities, you can run a test suite that includes tests that fail on purpose:</p> <pre><code>pytest test_suite.py\n</code></pre> <p>\ud83d\udd35 During test failures, logs and screenshots from the most recent test run will get saved to the <code>latest_logs/</code> folder. If <code>--archive-logs</code> is specified (or if ARCHIVE_EXISTING_LOGS is set to True in settings.py), test logs will also get archived to the <code>archived_logs/</code> folder. Otherwise, the log files will be cleaned out when the next test run begins (by default).</p>  Demo Mode: <p>If any test is moving too fast for your eyes to see what's going on, you can run it in Demo Mode by adding <code>--demo</code> on the command line, which pauses the browser briefly between actions, highlights page elements being acted on, and lets you know what test assertions are happening in real time:</p> <pre><code>pytest my_first_test.py --demo\n</code></pre> <p>You can override the default wait time by either updating settings.py or by using <code>--demo-sleep={NUM}</code> when using Demo Mode. (NOTE: If you use <code>--demo-sleep={NUM}</code> without using <code>--demo</code>, nothing will happen.)</p> <pre><code>pytest my_first_test.py --demo --demo-sleep=1.2\n</code></pre>  Passing additional data to tests: <p>If you want to pass additional data from the command line to your tests, you can use <code>--data=STRING</code>. Now inside your tests, you can use <code>self.data</code> to access that.</p>  Running tests multithreaded: <p>To run pytest tests using multiple processes, add <code>-n=NUM</code> or <code>-n NUM</code> on the command line, where NUM is the number of CPUs you want to use.</p>  Retrying failing tests automatically: <p>You can use <code>--reruns=NUM</code> to retry failing tests that many times. Use <code>--reruns-delay=SECONDS</code> to wait that many seconds between retries. Example:</p> <pre><code>pytest --reruns=1 --reruns-delay=1\n</code></pre>  Debugging tests: <p>You can use the following calls in your scripts to help you debug issues:</p> <pre><code>import time; time.sleep(5)  # Makes the test wait and do nothing for 5 seconds.\nimport pdb; pdb.set_trace()  # Enter debugging mode. n = next, c = continue, s = step.\nimport pytest; pytest.set_trace()  # Enter debugging mode. n = next, c = continue, s = step.\n</code></pre> <p>To pause an active test that throws an exception or error, add <code>--pdb -s</code>:</p> <pre><code>pytest my_first_test.py --pdb -s\n</code></pre> <p>The code above will leave your browser window open in case there's a failure. (pdb commands: 'c', 's', 'n' =&gt; continue, step, next).</p>  Combinations of options: <p>\ud83c\udf9b\ufe0f There are times when you'll want to combine various command-line options for added effect. For instance, the multi-process option, <code>-n=4</code>, can be customized by adding: <code>--dist=loadscope</code> or <code>--dist=loadfile</code> to it. Here's more info on that, as taken from pytest-xdist:</p> <ul> <li> <p><code>-n=4 --dist=loadscope</code>: Tests are grouped by module for test functions and by class for test methods. Groups are distributed to available workers as whole units. This guarantees that all tests in a group run in the same process. This can be useful if you have expensive module-level or class-level fixtures. Grouping by class takes priority over grouping by module.</p> </li> <li> <p><code>-n=4 --dist=loadfile</code>: Tests are grouped by their containing file. Groups are distributed to available workers as whole units. This guarantees that all tests in a file run in the same worker.</p> </li> </ul> <p>\ud83c\udf9b\ufe0f You might also want to combine multiple options at once. For example:</p> <pre><code>pytest --headless --rs -n=4 -v --dashboard --html=report.html\n</code></pre> <p>The above not only runs tests in parallel processes, but it also tells tests in the same process to share the same browser session, runs the tests in headless mode, displays the full name of each test on a separate line, creates a realtime dashboard of the test results, and creates a full report after all tests complete.</p>  The SeleniumBase Dashboard: <p>\ud83d\udd35 The <code>--dashboard</code> option for pytest generates a SeleniumBase Dashboard located at <code>dashboard.html</code>, which updates automatically as tests run and produce results. Example:</p> <pre><code>pytest --dashboard --rs --headless\n</code></pre> <p></p> <p>\ud83d\udd35 Additionally, you can host your own SeleniumBase Dashboard Server on a port of your choice. Here's an example of that using Python 3's <code>http.server</code>:</p> <pre><code>python -m http.server 1948\n</code></pre> <p>\ud83d\udd35 Now you can navigate to <code>http://localhost:1948/dashboard.html</code> in order to view the dashboard as a web app. This requires two different terminal windows: one for running the server, and another for running the tests, which should be run from the same directory. (Use <code>CTRL+C</code> to stop the http server.)</p> <p>\ud83d\udd35 Here's a full example of what the SeleniumBase Dashboard may look like:</p> <pre><code>pytest test_suite.py --dashboard --rs --headless\n</code></pre> <p></p>  Pytest Reports: <p>\ud83d\udd35 Using <code>--html=report.html</code> gives you a fancy report of the name specified after your test suite completes.</p> <pre><code>pytest test_suite.py --html=report.html\n</code></pre> <p></p> <p>\ud83d\udd35 When combining pytest html reports with SeleniumBase Dashboard usage, the pie chart from the Dashboard will get added to the html report. Additionally, if you set the html report URL to be the same as the Dashboard URL when also using the dashboard, (example: <code>--dashboard --html=dashboard.html</code>), then the Dashboard will become an advanced html report when all the tests complete.</p> <p>\ud83d\udd35 Here's an example of an upgraded html report:</p> <pre><code>pytest test_suite.py --dashboard --html=report.html\n</code></pre> <p></p> <p>If viewing pytest html reports in Jenkins, you may need to configure Jenkins settings for the html to render correctly. This is due to Jenkins CSP changes.</p> <p>You can also use <code>--junit-xml=report.xml</code> to get an xml report instead. Jenkins can use this file to display better reporting for your tests.</p> <pre><code>pytest test_suite.py --junit-xml=report.xml\n</code></pre>  Nosetest Reports: <p>The <code>--report</code> option gives you a fancy report after your test suite completes.</p> <pre><code>nosetests test_suite.py --report\n</code></pre> <p></p> <p>(NOTE: You can add <code>--show_report</code> to immediately display Nosetest reports after the test suite completes. Only use <code>--show_report</code> when running tests locally because it pauses the test run.)</p>  Language Locale Codes <p>You can specify a Language Locale Code to customize web pages on supported websites. With SeleniumBase, you can change the web browser's Locale on the command line by doing this:</p> <pre><code>pytest --locale=CODE  # Example: --locale=ru\n</code></pre> <p>Visit \ud83d\uddfe Locales for a full list of codes.</p>  Customizing default settings: <p>\ud83c\udf9b\ufe0f An easy way to override seleniumbase/config/settings.py is by using a custom settings file. Here's the command-line option to add to tests: (See examples/custom_settings.py)</p> <pre><code>pytest --settings-file=custom_settings.py\n</code></pre> <p>(Settings include default timeout values, a two-factor auth key, DB credentials, S3 credentials, and other important settings used by tests.)</p>  Running tests on a remote Selenium Grid: <p>\ud83c\udf10 SeleniumBase lets you run tests on remote Selenium Grids such as BrowserStack's Selenium Grid, LambdaTest's Selenium Grid, Sauce Labs's Selenium Grid, other Grids, and even your own Grid:</p> <p>\ud83c\udf10 For setting browser desired capabilities while running Selenium remotely, see the ReadMe located here: https://github.com/seleniumbase/SeleniumBase/tree/master/examples/capabilities</p> <p>Here's how to connect to a BrowserStack Selenium Grid server for running tests:</p> <pre><code>pytest test_demo_site.py --server=USERNAME:KEY@hub.browserstack.com --port=80\n</code></pre> <p>Here's how to connect to a Sauce Labs Selenium Grid server for running tests:</p> <pre><code>pytest test_demo_site.py --server=USERNAME:KEY@ondemand.us-east-1.saucelabs.com --port=443 --protocol=https\n</code></pre> <p>Here's how to connect to a Perfecto Selenium Grid server for running tests:</p> <pre><code>pytest test_demo_site.py --server=USERNAME:KEY@demo.perfectomobile.com/nexperience/perfectomobile --port=443\n</code></pre> <p>Here's how to connect to a TestingBot Selenium Grid server for running tests:</p> <pre><code>pytest test_demo_site.py --server=USERNAME:KEY@hub.testingbot.com --port=80\n</code></pre> <p>Here's how to connect to a LambdaTest Selenium Grid server for running tests:</p> <pre><code>pytest test_demo_site.py --server=USERNAME:KEY@hub.lambdatest.com --port=80\n</code></pre> <p>Here's how to connect to a CrossBrowserTesting Selenium Grid server for running tests:</p> <pre><code>pytest test_demo_site.py --server=USERNAME:KEY@hub.crossbrowsertesting.com --port=80\n</code></pre> <p>\ud83c\udf10 Or you can create your own Selenium Grid for test distribution. (See this ReadMe for details)</p> <p>\ud83c\udf10 To use a server on the <code>https</code> protocol, add <code>--protocol=https</code>: (Now automatic if the port is 443.)</p> <pre><code>pytest test_demo_site.py --protocol=https --server=IP_ADDRESS --port=PORT\n</code></pre>  Using a Proxy Server: <p>\ud83c\udf10 If you wish to use a proxy server for your browser tests (Chromium or Firefox), you can add <code>--proxy=IP_ADDRESS:PORT</code> as an argument on the command line.</p> <pre><code>pytest proxy_test.py --proxy=IP_ADDRESS:PORT\n</code></pre> <p>\ud83c\udf10 If the proxy server that you wish to use requires authentication, you can do the following (Chromium only):</p> <pre><code>pytest proxy_test.py --proxy=USERNAME:PASSWORD@IP_ADDRESS:PORT\n</code></pre> <p>\ud83c\udf10 SeleniumBase also supports SOCKS4 and SOCKS5 proxies:</p> <pre><code>pytest proxy_test.py --proxy=\"socks4://IP_ADDRESS:PORT\"\n\npytest proxy_test.py --proxy=\"socks5://IP_ADDRESS:PORT\"\n</code></pre> <p>To make things easier, you can add your frequently-used proxies to PROXY_LIST in proxy_list.py, and then use <code>--proxy=KEY_FROM_PROXY_LIST</code> to use the IP_ADDRESS:PORT of that key.</p> <pre><code>pytest proxy_test.py --proxy=proxy1\n</code></pre>  Changing the User-Agent: <p>\ud83d\udd24 If you wish to change the User-Agent for your browser tests (Chrome and Firefox only), you can add <code>--agent=\"USER-AGENT-STRING\"</code> as an argument on the command line.</p> <pre><code>pytest user_agent_test.py --agent=\"Mozilla/5.0 (Nintendo 3DS; U; ; en) Version/1.7412.EU\"\n</code></pre>  Mobile Device Testing: <p>\ud83d\udcf1 Use <code>--mobile</code> to quickly run your tests using Chrome's mobile device emulator with default values for device metrics (CSS Width, CSS Height, Pixel-Ratio) and a default value set for the user agent. To configure the mobile device metrics, use <code>--metrics=\"CSS_Width,CSS_Height,Pixel_Ratio\"</code> to set those values. You'll also be able to set the user agent with <code>--agent=\"USER-AGENT-STRING\"</code> (a default user agent will be used if not specified). To find real values for device metrics, see this GitHub Gist. For a list of available user agent strings, check out this page.</p> <pre><code># Run tests using Chrome's mobile device emulator (default settings)\npytest test_swag_labs.py --mobile\n\n# Run mobile tests specifying CSS Width, CSS Height, and Pixel-Ratio\npytest test_swag_labs.py --mobile --metrics=\"411,731,3\"\n\n# Run mobile tests specifying the user agent\npytest test_swag_labs.py --mobile --agent=\"Mozilla/5.0 (Linux; Android 9; Pixel 3 XL)\"\n</code></pre> <p></p>"}, {"location": "help_docs/demo_mode/", "title": "\ud83c\udfa6 Demo Mode", "text": ""}, {"location": "help_docs/demo_mode/#demo-mode", "title": "Demo Mode \ud83c\udfa6", "text": "<p>\ud83d\udd35 Demo Mode helps you see what a test is doing.</p> <p>\ud83c\udfc7\ud83d\udca8 \ud83d\udc40 If a test runs too fast for your eyes, use Demo Mode to slow it down, highlight actions, and display assertions. Example usage:</p> <pre><code>pytest my_first_test.py --demo\n</code></pre> <p>Here's how to run test_swag_labs.py from examples/ in Demo Mode:</p> <pre><code>pytest test_swag_labs.py --demo\n</code></pre> <p></p> <p>Here's an example that only uses the <code>highlight()</code> method for highlighting browser actions:</p> <p>(test_error_page.py from examples/)</p> <pre><code>pytest test_error_page.py\n</code></pre> <p></p> <p>Here's an example of a mobile test in Demo Mode:</p> <p></p>"}, {"location": "help_docs/desired_capabilities/", "title": "\ud83d\udcc3 Desired Capabilities", "text": ""}, {"location": "help_docs/desired_capabilities/#using-desired-capabilities", "title": "Using Desired Capabilities", "text": "<p>You can specify browser capabilities when running SeleniumBase tests on a remote Selenium Grid server such as BrowserStack, LambdaTest, or Sauce Labs.</p> <p>Sample run commands may look like this when run from the SeleniumBase/examples/ folder: (The browser is now specified in the capabilities file.)</p> <pre><code>pytest test_demo_site.py --browser=remote --server=USERNAME:KEY@hub.browserstack.com --port=80 --cap_file=capabilities/sample_cap_file_BS.py\n</code></pre> <pre><code>pytest test_demo_site.py --browser=remote --server=USERNAME:KEY@https://@hub.lambdatest.com --port=80 --protocol=https --cap_file=capabilities/sample_cap_file_LT.py\n</code></pre> <pre><code>pytest test_demo_site.py --browser=remote --server=USERNAME:KEY@ondemand.us-east-1.saucelabs.com --port=443 --protocol=https --cap_file=capabilities/sample_cap_file_SL.py\n</code></pre> <p>(Parameters: <code>--browser=remote</code>, <code>--server=SERVER</code>, <code>--port=PORT</code>, and <code>--cap_file=CAP_FILE.py</code>)</p> <p>Here's an example desired capabilities file for BrowserStack:</p> <pre><code>desired_cap = {\n    \"os\" : \"Windows\",\n    \"os_version\" : \"11\",\n    \"browser\" : \"Chrome\",\n    \"browser_version\" : \"101.0\",\n    \"browserstack.local\" : \"false\",\n    \"browserstack.debug\" : \"true\",\n    \"browserstack.selenium_version\" : \"4.1.2\",\n}\n</code></pre> <p>Here's an example desired capabilities file for LambdaTest:</p> <pre><code>capabilities = {\n    \"build\" : \"your build name\",\n    \"name\" : \"your test name\",\n    \"platform\" : \"Windows 11\",\n    \"browserName\" : \"Chrome\",\n    \"version\" : \"101.0\",\n    \"timezone\" : \"UTC+05:30\",\n    \"geoLocation\" : \"IN\",\n}\n</code></pre> <p>Here's an example desired capabilities file for Sauce Labs:</p> <pre><code>capabilities = {\n    \"browserName\": \"chrome\",\n    \"browserVersion\": \"latest\",\n    \"platformName\": \"macOS 10.14\",\n    \"sauce:options\": {},\n}\n</code></pre> <p>(Note that the browser is now being specified in the capabilities file, rather than with <code>--browser=BROWSER</code> when using a remote Selenium Grid. If using a local Selenium Grid, specify the browser, eg: <code>--browser=chrome</code> or <code>--browser=firefox</code>.)</p> You can generate specific desired capabilities using: <ul> <li>BrowserStack desired capabilities</li> <li>LambdaTest desired capabilities</li> <li>Sauce Labs desired capabilities</li> </ul> Parsing desired capabilities: <p>SeleniumBase has a desired capabilities parser that can capture all lines from the specified file in the following formats:</p> <pre><code>'KEY': 'VALUE'\n'KEY': True\n'KEY': False\ncaps['KEY'] = \"VALUE\"\ncaps['KEY'] = True\ncaps['KEY'] = False\n</code></pre> <p>(Each pair must be on a separate line. You can interchange single and double quotes.)</p> <p>You can also swap <code>--browser=remote</code> with an actual browser, eg <code>--browser=chrome</code>, which will combine the default SeleniumBase desired capabilities with those that were specified in the capabilities file when using <code>--cap_file=FILE.py</code>. Capabilities will override other parameters, so if you set the browser to one thing and the capabilities browser to another, SeleniumBase will use the capabilities browser as the browser.</p> <p>You'll need default SeleniumBase capabilities for: * Using a proxy server (not the same as a Selenium Grid server) * Downloading files to a desired folder * Disabling some warnings on Chrome * Overriding a website's Content Security Policy on Chrome * Other possible reasons</p> <p>You can also set browser desired capabilities from a command line string: Example:</p> <pre><code>pytest test_swag_labs.py --cap-string='{\"browserName\":\"chrome\",\"name\":\"test1\"}' --server=\"127.0.0.1\" --browser=remote\n</code></pre> <p>(Enclose cap-string in single quotes. Enclose parameter keys in double quotes.)</p> <p>If you pass <code>\"*\"</code> into the <code>\"name\"</code> field of <code>--cap-string</code>, the name will become the test identifier. Example:</p> <pre><code>pytest my_first_test.py --cap-string='{\"browserName\":\"chrome\",\"name\":\"*\"}' --server=\"127.0.0.1\" --browser=chrome\n</code></pre> <p>Example name: <code>\"my_first_test.MyTestClass.test_basics\"</code></p> Using a local Selenium Grid <p>If using a local Selenium Grid with SeleniumBase, start up the Grid Hub and nodes first:</p> <pre><code>sbase grid-hub start\nsbase grid-node start\n</code></pre> <p>(The Selenium Server JAR file will be automatically downloaded for first-time Grid users. You'll also need Java installed to start up the Grid.)</p>"}, {"location": "help_docs/features_list/", "title": "\ud83c\udff0 List of Features", "text": ""}, {"location": "help_docs/features_list/#seleniumbase-features", "title": "SeleniumBase Features: \ud83c\udff0", "text": "<ul> <li>A powerful Python framework for browser automation and E2E UI testing.</li> <li>Includes Recorder Mode for instantly generating browser tests in Python.</li> <li>Supports multiple browsers, tabs, iframes, and proxies in the same test.</li> <li>Includes Test Case Management Software with Markdown technology.</li> <li>Automatic smart-waiting improves reliability and prevents flaky tests.</li> <li>Supports pytest, unittest, nose, and behave for finding/running tests.</li> <li>All the code is open source. Look inside to learn about any feature.</li> <li>Powerful logging tools for dashboards, reports, and screenshots.</li> <li>Can run tests in Headless Mode to hide the browser. (<code>--headless</code>)</li> <li>Can run tests multithreaded from parallel browsers. (<code>-n NUM_THREADS</code>)</li> <li>Can run tests from a shared browser session. (<code>--reuse-session</code>/<code>--rs</code>)</li> <li>Can run tests using Chromium's mobile device emulator. (<code>--mobile</code>)</li> <li>Can run tests through a proxy server. (<code>--proxy=IP_ADDRESS:PORT</code>)</li> <li>Can run tests with proxy settings via PAC URL. (<code>--proxy-pac-url=URL.pac</code>)</li> <li>Can run tests through an authenticated proxy server. (<code>--proxy=USER:PASS@HOST:PORT</code>)</li> <li>Can run tests with proxy+auth via PAC URL. (<code>--proxy-pac-url=USER:PASS@URL.pac</code>)</li> <li>Can run tests with a customized browser user agent. (<code>--agent=USER_AGENT_STRING</code>)</li> <li>Can set a Chromium User Data Directory/Profile to load. (<code>--user-data-dir=DIR</code>)</li> <li>Can avoid detection by sites that try to block Selenium. (<code>--undetected</code>/<code>--uc</code>)</li> <li>Can integrate with selenium-wire for inspecting browser requests. (<code>--wire</code>)</li> <li>Can load Chrome Extension ZIP files. (<code>--extension-zip=ZIP</code>)</li> <li>Can load Chrome Extension folders. (<code>--extension-dir=DIR</code>)</li> <li>Powerful console scripts. (Type <code>seleniumbase</code> or <code>sbase</code> to use.)</li> <li>Has the ability to translate tests into multiple spoken languages.</li> <li>Has a flexible command-line interface for customizing test runs.</li> <li>Has a global config file for configuring settings as needed.</li> <li>Includes a tool for creating interactive web presentations.</li> <li>Includes Chart Maker, a tool for creating interactive charts.</li> <li>Includes a dialog box builder to allow user-input during automation.</li> <li>Includes a website tour builder for creating interactive walkthroughs.</li> <li>Includes a GUI for running pytest scripts: SeleniumBase Commander.</li> <li>Includes integrations for GitHub Actions, Google Cloud, Azure, S3, and Docker.</li> <li>Can handle Google Authenticator logins with Python's one-time password library.</li> <li>Can load and make assertions on PDF files from websites or the local file system.</li> <li>Can inspect HTML to find issues and points of interest with the HTML Inspector.</li> <li>Is backwards-compatible with Python WebDriver methods. (Use: <code>self.driver</code>)</li> <li>Can execute JavaScript code from Python calls. (Use: <code>self.execute_script()</code>)</li> <li>Can pierce through Shadow DOM selectors. (Add <code>::shadow</code> to CSS fragments.)</li> <li>Includes a hybrid-automation solution, MasterQA, to speed up manual testing.</li> <li>Includes useful Python decorators and password obfuscation methods.</li> </ul>"}, {"location": "help_docs/happy_customers/", "title": "\ud83d\udccb Case Studies", "text": ""}, {"location": "help_docs/happy_customers/#businesses-who-have-used-seleniumbase", "title": "Businesses who have used SeleniumBase", "text": "<ul> <li>MIT</li> <li>Sony</li> <li>iboss</li> <li>Akamai</li> <li>HubSpot</li> <li>Streamlit</li> <li>Autodesk</li> <li>Veracode</li> <li>Broadcom</li> <li>Snowflake</li> <li>Medtronic</li> <li>FortressIQ</li> <li>PlayStation</li> <li>Thoma Bravo</li> <li>ASICS Digital</li> <li>Texture Health</li> <li>Expedia Group</li> <li>The Very Group</li> <li>ActiveCampaign</li> <li>Blue Trail Software</li> <li>AutomationAnywhere</li> <li>Harvard Medical School</li> <li>Singapore Institute of Tech</li> <li>Mississippi State University</li> <li>The New York Public Libary</li> <li>Queen's University</li> <li>L1NNA Laboratory</li> <li>Thomson Reuters</li> <li>CA Technologies</li> <li>Optum Financial</li> <li>ActiveCampaign</li> <li>Raid The Room</li> <li>First American</li> <li>Origin Energy</li> <li>InterSystems</li> <li>Develop Soft</li> <li>Ping Identity</li> <li>StreamSets</li> <li>Betterteem</li> <li>NerdVision</li> <li>SenseTime</li> <li>Aeturnum</li> <li>Cellebrite</li> <li>Ben Fatto</li> <li>GeoNode</li> <li>Empower</li> <li>SunCorp</li> <li>Logitech</li> <li>Modulos</li> <li>VMware</li> <li>Rakuten</li> <li>Nagarro</li> <li>Ark PES</li> <li>Evereve</li> <li>Yandex</li> <li>WPILib</li> <li>QBurst</li> <li>Kinetik</li> <li>Exadel</li> <li>netLex</li> <li>Alokin</li> <li>Cubic</li> <li>Baidu</li> <li>VPay</li> <li>Seek</li> <li>HqO</li> <li>PDS</li> <li>Pico</li> <li>Iver</li> <li>And more...</li> </ul>"}, {"location": "help_docs/happy_customers/#case-study", "title": "Case Study", "text": "<p>HubSpot:</p> <p>In addition to using SeleniumBase for testing the UI of their content management system, HubSpot used SeleniumBase to automate the migration of website pages from their old CMS to their new one, which saved them over one million USD and a significant amount of time.</p> <p>Learn how HubSpot uses SeleniumBase for website testing by reading: Automated Testing with Selenium</p> <p>For more reading about automation at HubSpot, see: The Classic \"QA Team\" is Obsolete</p>"}, {"location": "help_docs/hidden_files_info/", "title": "\ud83d\udc65 macOS Hidden Files", "text": ""}, {"location": "help_docs/hidden_files_info/#showing-hidden-files-on-macos", "title": "Showing hidden files on macOS", "text": "<p>Depending on your macOS settings, some files may be hidden from view in your Finder window, such as <code>.gitignore</code>.</p> <ul> <li>On newer versions of macOS, use the following in a Finder window to view hidden files:</li> </ul> <p>Press the \u201cCommand\u201d + \u201cShift\u201d + \u201c.\u201d (period) keys at the same time.</p> <p>(The hidden files will show up as translucent in the folder. If you want to obscure the files again, press the same \u201cCommand\u201d + \u201cShift\u201d + \u201c.\u201d (period) combination.)</p> <ul> <li>On older versions of macOS, use the following command in a Terminal window to view hidden files, and then reopen the Finder window:</li> </ul> <pre><code>defaults write com.apple.finder AppleShowAllFiles -bool true\n</code></pre> <p>More info on that can be found here:<ul> <li>https://www.defaults-write.com/show-hidden-files-in-os-x-finder/</li> <li>https://www.macworld.co.uk/how-to/mac-software/hidden-files-mac-3520878/</li> <li>https://setapp.com/how-to/show-hidden-files-on-mac</li> </ul>"}, {"location": "help_docs/how_it_works/", "title": "\ud83d\udc41\ufe0f How it Works", "text": ""}, {"location": "help_docs/how_it_works/#how-seleniumbase-works", "title": "How SeleniumBase Works \ud83d\udc41\ufe0f", "text": "<p>\ud83d\udc41\ufe0f\ud83d\udd0e At the core, SeleniumBase works by extending pytest as a direct plugin. SeleniumBase automatically spins up web browsers for tests (using Selenium WebDriver), and then gives those tests access to the SeleniumBase libraries through the BaseCase class. Tests are also given access to SeleniumBase command-line arguments and SeleniumBase methods, which provide additional functionality.</p> <p>\ud83d\udc41\ufe0f\ud83d\udd0e <code>pytest</code> uses a feature called test discovery to automatically find and run Python methods that start with <code>test_</code> when those methods are located in Python files that start with <code>test_</code> or end with <code>_test.py</code>.</p> <p>\ud83d\udc41\ufe0f\ud83d\udd0e The most common way of using SeleniumBase is by inheriting <code>BaseCase</code>:</p> <pre><code>from seleniumbase import BaseCase\n</code></pre> <p>Then have your test classes inherit <code>BaseCase</code>:</p> <pre><code>class MyTestClass(BaseCase):\n</code></pre> <p>Here's what a full test might look like:</p> <pre><code>from seleniumbase import BaseCase\nBaseCase.main(__name__, __file__)\n\nclass TestMFALogin(BaseCase):\n    def test_mfa_login(self):\n        self.open(\"https://seleniumbase.io/realworld/login\")\n        self.type(\"#username\", \"demo_user\")\n        self.type(\"#password\", \"secret_pass\")\n        self.enter_mfa_code(\"#totpcode\", \"GAXG2MTEOR3DMMDG\")  # 6-digit\n        self.assert_text(\"Welcome!\", \"h1\")\n        self.highlight(\"img#image1\")  # A fancier assert_element() call\n        self.click('a:contains(\"This Page\")')  # Use :contains() on any tag\n        self.save_screenshot_to_logs()  # (\"./latest_logs\" folder for test)\n        self.click_link(\"Sign out\")  # Link must be \"a\" tag. Not \"button\".\n        self.assert_element('a:contains(\"Sign in\")')\n        self.assert_exact_text(\"You have been signed out!\", \"#top_message\")\n</code></pre> <p>(See the example, test_mfa_login.py, for reference.)</p> <p>\ud83d\udc41\ufe0f\ud83d\udd0e Here are some examples of running tests with <code>pytest</code>:</p> <pre><code>pytest --headless --rs --dashboard --html=report.html -v -n=4\npytest test_mfa_login.py\npytest -m marker2\npytest offline_examples/\npytest -k agent\n</code></pre> <p>(See SyntaxFormats for more ways of using SeleniumBase.)</p>"}, {"location": "help_docs/how_it_works/#no-more-flaky-tests", "title": "\u2705 No More Flaky Tests!", "text": "<p>SeleniumBase methods automatically wait for page elements to finish loading before interacting with them (up to a timeout limit). This means you no longer need random <code>time.sleep()</code> statements in your scripts.</p> <p></p> <p>There are three layers of protection that provide reliability for tests using SeleniumBase:</p> <ul> <li> <p>(1): Selenium's default <code>pageLoadStrategy</code> is <code>normal</code>: This strategy causes Selenium to wait for the full page to load, with HTML content and sub-resources downloaded and parsed.</p> </li> <li> <p>(2): SeleniumBase includes methods such as <code>wait_for_ready_state_complete()</code> and <code>wait_for_angularjs()</code>, which run inside other SeleniumBase methods to ensure that it's safe to proceed with the next command.</p> </li> <li> <p>(3): SeleniumBase methods automatically wait for elements to be visible and interactable before interacting with those elements.</p> </li> </ul> <p>If you want to speed up your tests and you think the third level of protection is enough by itself, you can use command-line options to remove the first, the second, or both of those first two levels of protection:</p> <ul> <li> <p><code>--pls=none</code> --&gt; Set <code>pageLoadStrategy</code> to <code>\"none\"</code>: This strategy causes Selenium to return immediately after the initial HTML content is fully received by the browser.</p> </li> <li> <p><code>--sjw</code> --&gt; Skip JS Waits, which include <code>wait_for_ready_state_complete()</code> and <code>wait_for_angularjs()</code>.</p> </li> </ul> <p></p> <p></p>"}, {"location": "help_docs/html_inspector/", "title": "\ud83d\udd75\ufe0f The HTML Inspector", "text": ""}, {"location": "help_docs/html_inspector/#the-html-inspector", "title": "The HTML Inspector \ud83d\udd75\ufe0f", "text": "<p>\ud83d\udd75\ufe0f HTML Inspector provides useful info about a web page.</p> <p>\ud83d\udd75\ufe0f (Based on: github.com/philipwalton/html-inspector)</p> <p>\ud83d\udd75\ufe0f Example: examples/test_inspect_html.py (Chromium-only)</p> <pre><code>from seleniumbase import BaseCase\nBaseCase.main(__name__, __file__)\n\nclass HtmlInspectorTests(BaseCase):\n    def test_html_inspector(self):\n        self.open(\"https://xkcd.com/1144/\")\n        self.inspect_html()\n</code></pre> <pre><code>pytest test_inspect_html.py\n============== test session starts ==============\n\n* HTML Inspection Results: https://xkcd.com/1144/\n\u26a0\ufe0f  'property' is not a valid attribute of the &lt;meta&gt; element.\n\u26a0\ufe0f  Do not use &lt;div&gt; or &lt;span&gt; elements without any attributes.\n\u26a0\ufe0f  'srcset' is not a valid attribute of the &lt;img&gt; element.\n\u26a0\ufe0f  The 'border' attribute is no longer valid on the &lt;img&gt; element.\n\u26a0\ufe0f  The &lt;center&gt; element is obsolete.\n\u26a0\ufe0f  The id 'comicLinks' appears more than once in the document.\n* (See the Console output for details!)\n</code></pre>"}, {"location": "help_docs/install/", "title": "\ud83c\udfc4 Install SeleniumBase", "text": ""}, {"location": "help_docs/install/#seleniumbase-installation", "title": "SeleniumBase Installation", "text": "If installing <code>seleniumbase</code> directly from PyPI, (the Python Package Index), use: <pre><code>pip install seleniumbase\n</code></pre> To upgrade an existing <code>seleniumbase</code> install from PyPI: <pre><code>pip install -U seleniumbase\n</code></pre> If installing <code>seleniumbase</code> from a Git clone, use: <pre><code>git clone https://github.com/seleniumbase/SeleniumBase.git\ncd SeleniumBase/\npip install .\n</code></pre> For a development mode install in editable mode, use: <pre><code>git clone https://github.com/seleniumbase/SeleniumBase.git\ncd SeleniumBase/\npip install -e .\n</code></pre> To upgrade an existing <code>seleniumbase</code> install from GitHub: <pre><code>git pull  # To pull the latest version\npip install -e .  # Or \"pip install .\"\n</code></pre> If installing <code>seleniumbase</code> from a GitHub branch, use: <pre><code>pip install git+https://github.com/seleniumbase/SeleniumBase.git@master#egg=seleniumbase\n</code></pre> <code>pip install</code> can be customized: <ul> <li>(Add <code>--upgrade</code> OR <code>-U</code> to upgrade SeleniumBase.)</li> <li>(Add <code>--force-reinstall</code> to upgrade indirect libraries.)</li> <li>(Use <code>pip3</code> if multiple versions of Python are present.)</li> </ul> <p>(If you're not using a virtual environment, you may need to add <code>--user</code> to your <code>pip</code> command if you're seeing errors during installation.)</p> <p></p>"}, {"location": "help_docs/install_python_pip_git/", "title": "\ud83d\udc09 Get Python, pip, & git", "text": ""}, {"location": "help_docs/install_python_pip_git/#installation-instructions-for-git-python-and-pip", "title": "Installation instructions for <code>Git</code>, <code>Python</code>, and <code>pip</code>", "text": ""}, {"location": "help_docs/install_python_pip_git/#git", "title": "Git", "text": "<p>You can download Git from here.</p> <p>(A Git GUI tool like SourceTree or GitHub Desktop can help you with Git commands.)</p> <p>(You can also download SeleniumBase from GitHub without using git-related commands.)</p>"}, {"location": "help_docs/install_python_pip_git/#python", "title": "Python", "text": "<p>You can download Python from https://www.python.org/downloads/ if it's not already preinstalled on your machine.</p>"}, {"location": "help_docs/install_python_pip_git/#pip", "title": "pip", "text": "<p><code>pip</code> already comes with Python! (It lets you install packages, such as <code>seleniumbase</code>.)</p> <p>\u26a0\ufe0f If something went wrong with your <code>pip</code> installation, try this:</p> <pre><code>python -m ensurepip --default-pip\n</code></pre> <p>If your existing version of pip is old, upgrade to the latest version:</p> <pre><code>python -m pip install --upgrade pip setuptools\n</code></pre> <p>On CentOS 7 and some versions of Linux, you may need to install pip with <code>yum</code>:</p> <pre><code>yum -y update\nyum -y install python-pip\n</code></pre> <p>If you're having any trouble getting pip, you can GET PIP HERE.</p> <p>When done, make sure the location of pip is on your path, which is <code>$PATH</code> for macOS/Linux. (On Windows, it's the System Variables <code>Path</code> within System Environment Variables.)</p> <p>You can also get pip (or fix pip) by using:</p> <pre><code>curl https://bootstrap.pypa.io/get-pip.py | python\n</code></pre> <ul> <li>(If you get SSL errors while trying to install packages with pip, see this Stackoverflow post, which tells you to run the above command.)</li> </ul> <p>Keep Pip and Setuptools up-to-date:</p> <pre><code>python -m pip install -U pip setuptools\n</code></pre> <ul> <li>(Depending on your user permissions, you may need to add <code>--user</code> to the command if you're not inside a Python virtual environment, or use \"sudo\" on a UNIX-based OS if you're getting errors during installation.)</li> </ul>"}, {"location": "help_docs/js_package_manager/", "title": "\ud83d\udd79\ufe0f Package Manager", "text": ""}, {"location": "help_docs/js_package_manager/#js-package-manager-and-code-generators", "title": "JS Package Manager and Code Generators", "text": "\ud83d\udd79\ufe0f SeleniumBase lets you load JavaScript packages from any CDN link into any website via Python. <p>\ud83c\udfa8 The following SeleniumBase solutions utilize this feature:</p> <p>\ud83c\udfa6 (Demo Mode)</p> <p>\ud83d\ude8e (Website Tours)</p> <p>\ud83c\udf9e\ufe0f (Presentation Maker)</p> <p>\ud83d\udcca (Chart Maker / Dashboard)</p> <p>\ud83d\udec2 (Dialog Boxes / MasterQA)</p> <p>\ud83d\uddfa\ufe0f Here's an example of loading a website-tour library into the browser for a Google Maps tour:</p> <p></p> <p>\ud83d\uddfa\ufe0f This example is from maps_introjs_tour.py. (The <code>--interval=1</code> makes the tour go automatically to the next step after 1 second.)</p> <pre><code>cd examples/tour_examples\npytest maps_introjs_tour.py --interval=1\n</code></pre> <p>\ud83d\udd79\ufe0f SeleniumBase includes powerful JS code generators for converting Python into JavaScript for using the supported JS packages. A few lines of Python in your tests might generate hundreds of lines of JavaScript.</p> <p>\ud83d\uddfa\ufe0f Here is some tour code in Python from maps_introjs_tour.py that expands into a lot of JavaScript.</p> <pre><code>self.open(\"https://www.google.com/maps/@42.3591234,-71.0915634,15z\")\nself.create_tour(theme=\"introjs\")\nself.add_tour_step(\"Welcome to Google Maps!\", title=\"SeleniumBase Tours\")\nself.add_tour_step(\"Enter Location\", \"#searchboxinput\", title=\"Search Box\")\nself.add_tour_step(\"See it\", \"#searchbox-searchbutton\", alignment=\"bottom\")\nself.add_tour_step(\"Thanks for using Tours!\", title=\"End of Guided Tour\")\nself.export_tour(filename=\"maps_introjs_tour.js\")\nself.play_tour()\n</code></pre> <p>\ud83d\udd79\ufe0f For existing features, SeleniumBase already takes care of loading all the necessary JS and CSS files into the web browser. To load other packages, here are a few useful methods that you should know about:</p> <pre><code>self.add_js_link(js_link)\n</code></pre> <p>\ud83d\udd79\ufe0f This example loads the IntroJS JavaScript library:</p> <pre><code>self.add_js_link(\"https://cdnjs.cloudflare.com/ajax/libs/intro.js/2.9.3/intro.min.js\")\n</code></pre> \ud83d\udd79\ufe0f You can load any JS package this way as long as you know the URL. <p>\ud83d\udd79\ufe0f If you're wondering how SeleniumBase does this, here's the full Python code from js_utils.py, which uses WebDriver's <code>execute_script()</code> method for making JS calls after escaping quotes with backslashes as needed:</p> <pre><code>def add_js_link(driver, js_link):\n    script_to_add_js = (\n\"\"\"function injectJS(link) {\n              var body = document.getElementsByTagName(\"body\")[0];\n              var script = document.createElement(\"script\");\n              script.src = link;\n              script.defer;\n              script.type=\"text/javascript\";\n              script.crossorigin = \"anonymous\";\n              script.onload = function() { null };\n              body.appendChild(script);\n           }\n           injectJS(\"%s\");\"\"\")\n    js_link = escape_quotes_if_needed(js_link)\n    driver.execute_script(script_to_add_js % js_link)\n</code></pre> <p>\ud83d\udd79\ufe0f Now that you've loaded JavaScript into the browser, you may also want to load some CSS to go along with it:</p> <pre><code>self.add_css_link(css_link)\n</code></pre> <p>\ud83d\udd79\ufe0f Here's code that loads the IntroJS CSS:</p> <pre><code>self.add_css_link(\"https://cdnjs.cloudflare.com/ajax/libs/intro.js/2.9.3/introjs.css\")\n</code></pre> <p>\ud83d\udd79\ufe0f And here's the Python WebDriver code that makes this possible:</p> <pre><code>def add_css_link(driver, css_link):\n    script_to_add_css = (\n\"\"\"function injectCSS(css) {\n              var head = document.getElementsByTagName(\"head\")[0];\n              var link = document.createElement(\"link\");\n              link.rel = \"stylesheet\";\n              link.type = \"text/css\";\n              link.href = css;\n              link.crossorigin = \"anonymous\";\n              head.appendChild(link);\n           }\n           injectCSS(\"%s\");\"\"\")\n    css_link = escape_quotes_if_needed(css_link)\n    driver.execute_script(script_to_add_css % css_link)\n</code></pre> \ud83d\udd79\ufe0f Website tours are just one of the many uses of the JS Package Manager. <p>\ud83d\udec2 The following example shows the JqueryConfirm package loaded into a website for creating fancy dialog boxes:</p> <p></p> \u2195\ufe0f (Example: dialog_box_tour.py) \u2195\ufe0f <p></p> Here's how to run that example: <pre><code>cd examples/dialog_boxes\npytest test_dialog_boxes.py\n</code></pre> <p>(Example from the Dialog Boxes ReadMe)</p> \ud83d\udd79\ufe0f Since packages are loaded directly from a CDN link, you won't need other package managers like NPM, Bower, or Yarn to get the packages that you need into the websites that you want. <p></p> To learn more about SeleniumBase, check out the Docs Site: <p> </p> All the code is on GitHub: <p> </p>"}, {"location": "help_docs/locale_codes/", "title": "\ud83d\uddfe Locale Codes", "text": ""}, {"location": "help_docs/locale_codes/#language-locale-codes", "title": "Language Locale Codes", "text": "<p>You can specify a Language Locale Code to customize web pages on supported websites. With SeleniumBase, you can change the web browser's Locale on the command line by doing this:</p> <pre><code>pytest --locale=CODE  # Example: --locale=ru\n</code></pre>  List of Language Locale Codes: LanguageCode Afrikaans<code>af</code> Amharic<code>am</code> Arabic<code>ar</code> Arabic (Egypt)<code>ar_eg</code> Arabic (Saudi Arabia)<code>ar_sa</code> Basque<code>eu</code> Belarusian<code>be</code> Bengali<code>bn</code> Bulgarian<code>bg</code> Catalan<code>ca</code> Chinese<code>zh</code> Chinese (China Mainland)<code>zh_cn</code> Chinese (Hong Kong)<code>zh_hk</code> Chinese (Taiwan)<code>zh_tw</code> Croatian<code>hr</code> Czech<code>cs</code> Danish<code>da</code> Dutch<code>nl</code> English<code>en</code> English (United States)<code>en_us</code> English (Australia)<code>en_au</code> English (Canada)<code>en_ca</code> English (United Kingdom)<code>en_gb</code> English (Ireland)<code>en_ie</code> English (India)<code>en_in</code> English (Singapore)<code>en_sg</code> English (South Africa)<code>en_za</code> Estonian<code>et</code> Farsi<code>fa</code> Filipino<code>fil</code> Finnish<code>fi</code> French<code>fr</code> French (Canada)<code>fr_ca</code> French (Switzerland)<code>fr_ch</code> Galician<code>gl</code> German<code>de</code> German (Austria)<code>de_at</code> Greek<code>el</code> Gujarati<code>gu</code> Hebrew<code>he</code> Hindi<code>hi</code> Hungarian<code>hu</code> Icelandic<code>is</code> Indonesian<code>id</code> Italian<code>it</code> Japanese<code>ja</code> Kannada<code>kn</code> Korean<code>ko</code> Lao<code>lo</code> Latvian<code>lv</code> Lingala<code>ln</code> Lithuanian<code>lt</code> Malay<code>ms</code> Malayalam<code>ml</code> Marathi<code>mr</code> Norwegian<code>no</code> Polish<code>pl</code> Portuguese<code>pt</code> Portuguese (Brazil)<code>pt_br</code> Portuguese (Portugal)<code>pt_pt</code> Romanian<code>ro</code> Russian<code>ru</code> Serbian<code>sr</code> Slovak<code>sk</code> Slovenian<code>sl</code> Spanish<code>es</code> Spanish (Latin America)<code>es_419</code> Spanish (Argentina)<code>es_ar</code> Spanish (Chile)<code>es_cl</code> Spanish (Colombia)<code>es_co</code> Spanish (Costa Rica)<code>es_cr</code> Spanish (Dominican Rep.)<code>es_do</code> Spanish (Ecuador)<code>es_ec</code> Spanish (El Salvador)<code>es_sv</code> Spanish (Guatemala)<code>es_gt</code> Spanish (Honduras)<code>es_hn</code> Spanish (Mexico)<code>es_mx</code> Spanish (Nicaragua)<code>es_ni</code> Spanish (Panama)<code>es_pa</code> Spanish (Peru)<code>es_pe</code> Spanish (Puerto Rico)<code>es_pr</code> Spanish (Paraguay)<code>es_py</code> Spanish (United States)<code>es_us</code> Spanish (Uruguay)<code>es_uy</code> Spanish (Venezuela)<code>es_ve</code> Swahili<code>sw</code> Swedish<code>sv</code> Swiss German<code>gsw</code> Tagalog<code>tl</code> Tamil<code>ta</code> Telugu<code>te</code> Thai<code>th</code> Turkish<code>tr</code> Ukrainian<code>uk</code> Urdu<code>ur</code> Vietnamese<code>vi</code> Zulu<code>zu</code>"}, {"location": "help_docs/method_summary/", "title": "\ud83d\udcd8 API Reference", "text": ""}, {"location": "help_docs/method_summary/#seleniumbase-methods-api-reference", "title": "SeleniumBase Methods (API Reference)\ud83d\udd35 Examples", "text": "<p>Here's a list of SeleniumBase method definitions, which are defined in base_case.py</p> <p>For backwards compatibility, older versions of method names have remained to keep older scripts working. (E.g: wait_for_element_visible was shortened to wait_for_element and then to find_element.)</p> <pre><code>self.open(url)\n# Duplicates: self.open_url(url), self.visit(url), visit_url(url),\n#             self.goto(url), self.go_to(url)\n\nself.get(url)\n# If the url parameter is a URL: Perform self.open(url)\n# Otherwise: return self.get_element(URL_AS_A_SELECTOR)\n\nself.click(selector, by=\"css selector\", timeout=None, delay=0, scroll=True)\n\nself.slow_click(selector, by=\"css selector\", timeout=None)\n\nself.double_click(selector, by=\"css selector\", timeout=None)\n\nself.context_click(selector, by=\"css selector\", timeout=None)\n# Duplicates\n# self.right_click(selector, by=\"css selector\", timeout=None)\n\nself.click_chain(selectors_list, by=\"css selector\", timeout=None, spacing=0)\n\nself.type(selector, text, by=\"css selector\", timeout=None)\n# Duplicates\n# self.update_text(selector, text, by=\"css selector\", timeout=None)\n# self.input(selector, text, by=\"css selector\", timeout=None)\n# self.fill(selector, text, by=\"css selector\", timeout=None)\n# self.write(selector, text, by=\"css selector\", timeout=None)\n\nself.send_keys(selector, text, by=\"css selector\", timeout=None)\n# Duplicates\n# self.add_text(selector, text, by=\"css selector\", timeout=None)\n\nself.submit(selector, by=\"css selector\")\n\nself.clear(selector, by=\"css selector\", timeout=None)\n\nself.focus(selector, by=\"css selector\", timeout=None)\n\nself.refresh()\n# Duplicates: self.refresh_page(), self.reload_page(), self.reload()\n\nself.get_current_url()\n\nself.get_origin()\n\nself.get_page_source()\n\nself.get_title()\n# Duplicates: self.get_page_title()\n\nself.get_user_agent()\n\nself.get_locale_code()\n\nself.go_back()\n\nself.go_forward()\n\nself.open_start_page()\n\nself.open_if_not_url(url)\n\nself.is_element_present(selector, by=\"css selector\")\n\nself.is_element_visible(selector, by=\"css selector\")\n\nself.is_element_clickable(selector, by=\"css selector\")\n\nself.is_element_enabled(selector, by=\"css selector\")\n\nself.is_text_visible(text, selector=\"html\", by=\"css selector\")\n\nself.is_exact_text_visible(text, selector=\"html\", by=\"css selector\")\n\nself.is_attribute_present(selector, attribute, value=None, by=\"css selector\")\n\nself.is_link_text_visible(link_text)\n\nself.is_partial_link_text_visible(partial_link_text)\n\nself.is_link_text_present(link_text)\n\nself.is_partial_link_text_present(link_text)\n\nself.get_link_attribute(link_text, attribute, hard_fail=True)\n# Duplicates\n# self.get_link_text_attribute(link_text, attribute, hard_fail=True)\n\nself.get_partial_link_text_attribute(link_text, attribute, hard_fail=True)\n\nself.click_link(link_text, timeout=None)\n# Duplicates\n# self.click_link_text(link_text, timeout=None)\n\nself.click_partial_link(partial_link_text, timeout=None)\n# Duplicates\n# self.click_partial_link_text(partial_link_text, timeout=None)\n\nself.get_text(selector, by=\"css selector\", timeout=None)\n\nself.get_attribute(\n    selector, attribute, by=\"css selector\",\n    timeout=None, hard_fail=True)\n\nself.set_attribute(\n    selector, attribute, value, by=\"css selector\", timeout=None, scroll=False)\n\nself.set_attributes(selector, attribute, value, by=\"css selector\")\n# Duplicates\n# self.set_attribute_all(selector, attribute, value, by=\"css selector\")\n\nself.remove_attribute(selector, attribute, by=\"css selector\", timeout=None)\n\nself.remove_attributes(selector, attribute, by=\"css selector\")\n\nself.get_property(selector, property, by=\"css selector\", timeout=None)\n\nself.get_text_content(selector, by=\"css selector\", timeout=None)\n\nself.get_property_value(selector, property, by=\"css selector\", timeout=None)\n\nself.get_image_url(selector, by=\"css selector\", timeout=None)\n\nself.find_elements(selector, by=\"css selector\", limit=0)\n\nself.find_visible_elements(selector, by=\"css selector\", limit=0)\n\nself.click_visible_elements(selector, by=\"css selector\", limit=0, timeout=None)\n\nself.click_nth_visible_element(selector, number, by=\"css selector\", timeout=None)\n\nself.click_if_visible(selector, by=\"css selector\", timeout=0)\n\nself.click_active_element()\n\nself.click_with_offset(\n    selector, x, y, by=\"css selector\", mark=None, timeout=None, center=None)\n\nself.double_click_with_offset(\n    selector, x, y, by=\"css selector\", mark=None, timeout=None, center=None)\n\nself.is_checked(selector, by=\"css selector\", timeout=None)\n# Duplicates\n# self.is_selected(selector, by=\"css selector\", timeout=None)\n\nself.check_if_unchecked(selector, by=\"css selector\")\n# Duplicates\n# self.select_if_unselected(selector, by=\"css selector\")\n\nself.uncheck_if_checked(selector, by=\"css selector\")\n# Duplicates\n# self.unselect_if_selected(selector, by=\"css selector\")\n\nself.is_element_in_an_iframe(selector, by=\"css selector\")\n\nself.switch_to_frame_of_element(selector, by=\"css selector\")\n\nself.hover(selector, by=\"css selector\", timeout=None)\n# Duplicates\n# self.hover_on_element(selector, by=\"css selector\", timeout=None)\n# self.hover_over_element(selector, by=\"css selector\", timeout=None)\n\nself.hover_and_click(\n    hover_selector, click_selector,\n    hover_by=\"css selector\", click_by=\"css selector\",\n    timeout=None)\n\nself.hover_and_double_click(\n    hover_selector, click_selector,\n    hover_by=\"css selector\", click_by=\"css selector\",\n    timeout=None)\n\nself.drag_and_drop(\n    drag_selector, drop_selector,\n    drag_by=\"css selector\", drop_by=\"css selector\",\n    timeout=None, jquery=False)\n\nself.drag_and_drop_with_offset(\n    selector, x, y, by=\"css selector\", timeout=None)\n\nself.select_option_by_text(\n    dropdown_selector, option,\n    dropdown_by=\"css selector\",\n    timeout=None)\n\nself.select_option_by_index(\n    dropdown_selector, option,\n    dropdown_by=\"css selector\",\n    timeout=None)\n\nself.select_option_by_value(\n    dropdown_selector, option,\n    dropdown_by=\"css selector\",\n    timeout=None)\n\nself.get_select_options(\n    dropdown_selector, attribute=\"text\",\n    by=\"css selector\", timeout=None)\n\nself.load_html_string(html_string, new_page=True)\n\nself.set_content(html_string, new_page=False)\n\nself.load_html_file(html_file, new_page=True)\n\nself.open_html_file(html_file)\n\nself.execute_script(script, *args, **kwargs)\n\nself.execute_cdp_cmd(script, *args, **kwargs)\n\nself.execute_async_script(script, timeout=None)\n\nself.safe_execute_script(script, *args, **kwargs)\n\nself.set_window_rect(x, y, width, height)\n\nself.set_window_size(width, height)\n\nself.maximize_window()\n\nself.switch_to_frame(frame, timeout=None)\n\nself.switch_to_default_content()\n\nself.switch_to_parent_frame()\n\nwith self.frame_switch(frame, timeout=None):\n    # Indented Code Block for Context Manager (Must use \"with\")\n\nself.set_content_to_frame(frame, timeout=None)\n\nself.set_content_to_default(nested=False)\n# Duplicates: self.set_content_to_default_content(nested=False)\n\nself.set_content_to_parent()\n# Duplicates: self.set_content_to_parent_frame()\n\nself.open_new_window(switch_to=True)\n# Duplicates: self.open_new_tab(switch_to=True)\n\nself.switch_to_window(window, timeout=None)\n# Duplicates: self.switch_to_tab(tab, timeout=None)\n\nself.switch_to_default_window()\n# Duplicates: self.switch_to_default_tab()\n\nself.switch_to_newest_window()\n# Duplicates: self.switch_to_newest_tab()\n\nself.get_new_driver(\n    browser=None,\n    headless=None,\n    locale_code=None,\n    protocol=None,\n    servername=None,\n    port=None,\n    proxy=None,\n    proxy_bypass_list=None,\n    proxy_pac_url=None,\n    agent=None,\n    switch_to=True,\n    cap_file=None,\n    cap_string=None,\n    recorder_ext=None,\n    disable_csp=None,\n    enable_ws=None,\n    enable_sync=None,\n    use_auto_ext=None,\n    undetectable=None,\n    no_sandbox=None,\n    disable_gpu=None,\n    incognito=None,\n    guest_mode=None,\n    devtools=None,\n    remote_debug=None,\n    swiftshader=None,\n    ad_block_on=None,\n    block_images=None,\n    do_not_track=None,\n    chromium_arg=None,\n    firefox_arg=None,\n    firefox_pref=None,\n    user_data_dir=None,\n    extension_zip=None,\n    extension_dir=None,\n    page_load_strategy=None,\n    external_pdf=None,\n    is_mobile=None,\n    d_width=None,\n    d_height=None,\n    d_p_r=None,\n)\n\nself.switch_to_driver(driver)\n\nself.switch_to_default_driver()\n\nself.save_screenshot(name, folder=None, selector=None, by=\"css selector\")\n\nself.save_screenshot_to_logs(name=None, selector=None, by=\"css selector\")\n\nself.save_page_source(name, folder=None)\n\nself.save_cookies(name=\"cookies.txt\")\n\nself.load_cookies(name=\"cookies.txt\")\n\nself.delete_all_cookies()\n# Duplicates: self.clear_all_cookies()\n\nself.delete_saved_cookies(name=\"cookies.txt\")\n\nself.wait_for_ready_state_complete(timeout=None)\n\nself.wait_for_angularjs(timeout=None)\n\nself.sleep(seconds)\n# Duplicates: self.wait(seconds)\n\nself.install_addon(xpi_file)\n\nself.activate_jquery()\n\nself.activate_demo_mode()\n\nself.deactivate_demo_mode()\n\nself.activate_design_mode()\n\nself.deactivate_design_mode()\n\nself.activate_recorder()\n\nself.save_recorded_actions()\n\nself.bring_active_window_to_front()\n\nself.bring_to_front(selector, by=\"css selector\")\n\nself.highlight_click(selector, by=\"css selector\", loops=3, scroll=True)\n\nself.highlight_type(selector, text, by=\"css selector\", loops=3, scroll=True)\n# Duplicates\n# self.highlight_update_text(selector, text, by=\"css selector\", loops=3, scroll=True)\n\nself.highlight(selector, by=\"css selector\", loops=4, scroll=True)\n\nself.press_up_arrow(selector=\"html\", times=1, by=\"css selector\")\n\nself.press_down_arrow(selector=\"html\", times=1, by=\"css selector\")\n\nself.press_left_arrow(selector=\"html\", times=1, by=\"css selector\")\n\nself.press_right_arrow(selector=\"html\", times=1, by=\"css selector\")\n\nself.scroll_to(selector, by=\"css selector\", timeout=None)\n# Duplicates: self.scroll_to_element(selector, by=\"css selector\")\n\nself.slow_scroll_to(selector, by=\"css selector\", timeout=None)\n# Duplicates: self.slow_scroll_to_element(selector, by=\"css selector\")\n\nself.scroll_into_view(selector, by=\"css selector\", timeout=None)\n\nself.scroll_to_top()\n\nself.scroll_to_bottom()\n\nself.click_xpath(xpath)\n\nself.js_click(selector, by=\"css selector\", all_matches=False, scroll=True)\n\nself.js_click_if_present(selector, by=\"css selector\", timeout=0)\n\nself.js_click_if_visible(selector, by=\"css selector\", timeout=0)\n\nself.js_click_all(selector, by=\"css selector\")\n\nself.jquery_click(selector, by=\"css selector\")\n\nself.jquery_click_all(selector, by=\"css selector\")\n\nself.hide_element(selector, by=\"css selector\")\n\nself.hide_elements(selector, by=\"css selector\")\n\nself.show_element(selector, by=\"css selector\")\n\nself.show_elements(selector, by=\"css selector\")\n\nself.remove_element(selector, by=\"css selector\")\n\nself.remove_elements(selector, by=\"css selector\")\n\nself.ad_block()\n# Duplicates: self.block_ads()\n\nself.show_file_choosers()\n\nself.disable_beforeunload()\n\nself.get_domain_url(url)\n\nself.get_beautiful_soup(source=None)\n\nself.get_unique_links()\n\nself.get_link_status_code(link, allow_redirects=False, timeout=5, verify=False)\n\nself.assert_link_status_code_is_not_404(link)\n\nself.assert_no_404_errors(multithreaded=True, timeout=None)\n# Duplicates\n# self.assert_no_broken_links(multithreaded=True, timeout=None)\n\nself.print_unique_links_with_status_codes()\n\nself.get_pdf_text(\n    pdf, page=None, maxpages=None, password=None,\n    codec='utf-8', wrap=False, nav=False, override=False, caching=True)\n\nself.assert_pdf_text(\n    pdf, text, page=None, maxpages=None, password=None,\n    codec='utf-8', wrap=True, nav=False, override=False, caching=True)\n\nself.create_folder(folder)\n\nself.choose_file(selector, file_path, by=\"css selector\", timeout=None)\n\nself.save_element_as_image_file(\n    selector, file_name, folder=None, overlay_text=\"\")\n\nself.download_file(file_url, destination_folder=None)\n\nself.save_file_as(file_url, new_file_name, destination_folder=None)\n\nself.save_data_as(data, file_name, destination_folder=None)\n\nself.append_data_to_file(data, file_name, destination_folder=None)\n\nself.get_file_data(file_name, folder=None)\n\nself.get_downloads_folder()\n\nself.get_browser_downloads_folder()\n\nself.get_path_of_downloaded_file(file, browser=False)\n\nself.is_downloaded_file_present(file, browser=False)\n\nself.delete_downloaded_file_if_present(file, browser=False)\n# Duplicates: self.delete_downloaded_file(file, browser=False)\n\nself.assert_downloaded_file(file, timeout=None, browser=False)\n\nself.assert_true(expr, msg=None)\n\nself.assert_false(expr, msg=None)\n\nself.assert_equal(first, second, msg=None)\n\nself.assert_not_equal(first, second, msg=None)\n\nself.assert_in(first, second, msg=None)\n\nself.assert_not_in(first, second, msg=None)\n\nself.assert_raises(*args, **kwargs)\n\nself.wait_for_attribute(\n    selector, attribute, value=None, by=\"css selector\", timeout=None)\n\nself.assert_attribute(\n    selector, attribute, value=None, by=\"css selector\", timeout=None)\n\nself.assert_title(title)\n\nself.assert_title_contains(substring)\n\nself.assert_url(url)\n\nself.assert_url_contains(substring)\n\nself.assert_no_js_errors(exclude=[])\n\nself.inspect_html()\n\nself.is_valid_url(url)\n\nself.is_chromium()\n\nself.get_chrome_version()\n\nself.get_chromium_version()\n\nself.get_chromedriver_version()\n\nself.get_chromium_driver_version()\n\nself.get_mfa_code(totp_key=None)\n# Duplicates\n# self.get_totp_code(totp_key=None)\n# self.get_google_auth_password(totp_key=None)\n# self.get_google_auth_code(totp_key=None)\n\nself.enter_mfa_code(selector, totp_key=None, by=\"css selector\", timeout=None)\n# Duplicates\n# self.enter_totp_code(selector, totp_key=None, by=\"css selector\", timeout=None)\n\nself.convert_css_to_xpath(css)\n\nself.convert_xpath_to_css(xpath)\n\nself.convert_to_css_selector(selector, by)\n\nself.set_value(selector, text, by=\"css selector\", timeout=None, scroll=True)\n\nself.js_update_text(selector, text, by=\"css selector\", timeout=None)\n# Duplicates\n# self.js_type(selector, text, by=\"css selector\", timeout=None)\n# self.set_text(selector, text, by=\"css selector\", timeout=None)\n\nself.set_text_content(\n    selector, text, by=\"css selector\", timeout=None, scroll=False)\n\nself.jquery_update_text(selector, text, by=\"css selector\", timeout=None)\n# Duplicates\n# self.jquery_type(selector, text, by=\"css selector\", timeout=None)\n\nself.get_value(selector, by=\"css selector\", timeout=None)\n\nself.set_time_limit(time_limit)\n\nself.set_default_timeout(timeout)\n\nself.reset_default_timeout()\n\nself.fail(msg=None)\n\nself.skip(reason=\"\")\n\n############\n\nself.start_recording_console_logs()\n\nself.console_log_string(string)\n\nself.console_log_script(script)\n\nself.get_recorded_console_logs()\n\n############\n\nself.set_local_storage_item(key, value)\n\nself.get_local_storage_item(key)\n\nself.remove_local_storage_item(key)\n\nself.clear_local_storage()\n\nself.get_local_storage_keys()\n\nself.get_local_storage_items()\n\nself.set_session_storage_item(key, value)\n\nself.get_session_storage_item(key)\n\nself.remove_session_storage_item(key)\n\nself.clear_session_storage()\n\nself.get_session_storage_keys()\n\nself.get_session_storage_items()\n\n############\n\nself.set_wire_proxy(string)  # Requires \"--wire\"!\n\n############\n\nself.add_css_link(css_link)\n\nself.add_js_link(js_link)\n\nself.add_css_style(css_style)\n\nself.add_js_code_from_link(js_link)\n\nself.add_js_code(js_code)\n\nself.add_meta_tag(http_equiv=None, content=None)\n\n############\n\nself.create_presentation(name=None, theme=\"default\", transition=\"default\")\n\nself.add_slide(\n    content=None, image=None, code=None, iframe=None,\n    content2=None, notes=None, transition=None, name=None)\n\nself.save_presentation(\n    name=None, filename=None, show_notes=False, interval=0)\n\nself.begin_presentation(\n    name=None, filename=None, show_notes=False, interval=0)\n\n############\n\nself.create_pie_chart(\n    chart_name=None, title=None, subtitle=None,\n    data_name=None, unit=None, libs=True,\n    labels=True, legend=True)\n\nself.create_bar_chart(\n    chart_name=None, title=None, subtitle=None,\n    data_name=None, unit=None, libs=True,\n    labels=True, legend=True)\n\nself.create_column_chart(\n    chart_name=None, title=None, subtitle=None,\n    data_name=None, unit=None, libs=True,\n    labels=True, legend=True)\n\nself.create_line_chart(\n    chart_name=None, title=None, subtitle=None,\n    data_name=None, unit=None, zero=False, libs=True,\n    labels=True, legend=True)\n\nself.create_area_chart(\n    chart_name=None, title=None, subtitle=None,\n    data_name=None, unit=None, zero=False, libs=True,\n    labels=True, legend=True)\n\nself.add_series_to_chart(data_name=None, chart_name=None)\n\nself.add_data_point(label, value, color=None, chart_name=None)\n\nself.save_chart(chart_name=None, filename=None, folder=None)\n\nself.display_chart(chart_name=None, filename=None, interval=0)\n\nself.extract_chart(chart_name=None)\n\n############\n\nself.create_tour(name=None, theme=None)\n\nself.create_shepherd_tour(name=None, theme=None)\n\nself.create_bootstrap_tour(name=None)\n\nself.create_hopscotch_tour(name=None)\n\nself.create_introjs_tour(name=None)\n\nself.set_introjs_colors(theme_color=None, hover_color=None)\n\nself.add_tour_step(\n    message, selector=None, name=None,\n    title=None, theme=None, alignment=None)\n\nself.play_tour(name=None, interval=0)\n# Duplicates\n# self.start_tour(name=None, interval=0):\n\nself.export_tour(name=None, filename=\"my_tour.js\", url=None)\n\n############\n\nself.activate_jquery_confirm()\n\nself.set_jqc_theme(theme, color=None, width=None)\n\nself.reset_jqc_theme()\n\nself.get_jqc_button_input(message, buttons, options=None)\n\nself.get_jqc_text_input(message, button=None, options=None)\n\nself.get_jqc_form_inputs(message, buttons, options=None)\n\n############\n\nself.activate_messenger()\n\nself.post_message(message, duration=None, pause=True, style=\"info\")\n\nself.post_message_and_highlight(message, selector, by=\"css selector\")\n\nself.post_success_message(message, duration=None, pause=True)\n\nself.post_error_message(message, duration=None, pause=True)\n\nself.set_messenger_theme(\n    theme=\"default\", location=\"default\", max_messages=\"default\")\n\n############\n\nself.generate_referral(start_page, destination_page, selector=None)\n\nself.generate_traffic(start_page, destination_page, loops=1, selector=None)\n\nself.generate_referral_chain(pages)\n\nself.generate_traffic_chain(pages, loops=1)\n\n############\n\nself.get_element(selector, by=\"css selector\", timeout=None)\n# Duplicates\n# self.wait_for_element_present(selector, by=\"css selector\", timeout=None)\n\nself.wait_for_query_selector(selector, by=\"css selector\", timeout=None)\n\nself.assert_element_present(selector, by=\"css selector\", timeout=None)\n\nself.assert_elements_present(*args, **kwargs)\n\n############\n\nself.find_element(selector, by=\"css selector\", timeout=None)\n# Duplicates\n# self.wait_for_element(selector, by=\"css selector\", timeout=None)\n# self.wait_for_element_visible(selector, by=\"css selector\", timeout=None)\n\nself.assert_element(selector, by=\"css selector\", timeout=None)\n# Duplicates\n# self.assert_element_visible(selector, by=\"css selector\", timeout=None)\n\nself.assert_elements(*args, **kwargs)\n# Duplicates\n# self.assert_elements_visible(*args, **kwargs)\n\n############\n\nself.find_text(text, selector=\"html\", by=\"css selector\", timeout=None)\n# Duplicates\n# self.wait_for_text(text, selector=\"html\", by=\"css selector\", timeout=None)\n# self.wait_for_text_visible(text, selector=\"html\", by=\"css selector\", timeout=None)\n\nself.find_exact_text(text, selector=\"html\", by=\"css selector\", timeout=None)\n# Duplicates\n# self.wait_for_exact_text(text, selector=\"html\", by=\"css selector\", timeout=None)\n# self.wait_for_exact_text_visible(text, selector=\"html\", by=\"css selector\", timeout=None)\n\nself.assert_text(text, selector=\"html\", by=\"css selector\", timeout=None)\n# Duplicates\n# self.assert_text_visible(text, selector=\"html\", by=\"css selector\", timeout=None)\n\nself.assert_exact_text(text, selector=\"html\", by=\"css selector\", timeout=None)\n\n############\n\nself.wait_for_link_text_present(link_text, timeout=None)\n\nself.wait_for_partial_link_text_present(link_text, timeout=None)\n\nself.find_link_text(link_text, timeout=None)\n# Duplicates\n# self.wait_for_link_text(link_text, timeout=None)\n# self.wait_for_link_text_visible(link_text, timeout=None)\n\nself.assert_link_text(link_text, timeout=None)\n\n############\n\nself.find_partial_link_text(partial_link_text, timeout=None)\n# Duplicates\n# self.wait_for_partial_link_text(partial_link_text, timeout=None)\n\nself.assert_partial_link_text(partial_link_text, timeout=None)\n\n############\n\nself.wait_for_element_absent(selector, by=\"css selector\", timeout=None)\n# Duplicates\n# self.wait_for_element_not_present(selector, by=\"css selector\", timeout=None)\n\nself.assert_element_absent(selector, by=\"css selector\", timeout=None)\n# Duplicates\n# self.assert_element_not_present(selector, by=\"css selector\", timeout=None)\n\n############\n\nself.wait_for_element_clickable(selector, by=\"css selector\", timeout=None)\n\n############\n\nself.wait_for_element_not_visible(selector, by=\"css selector\", timeout=None)\n\nself.assert_element_not_visible(selector, by=\"css selector\", timeout=None)\n\n############\n\nself.wait_for_text_not_visible(text, selector=\"html\", by=\"css selector\", timeout=None)\n\nself.wait_for_exact_text_not_visible(text, selector=\"html\", by=\"css selector\", timeout=None)\n\nself.assert_text_not_visible(text, selector=\"html\", by=\"css selector\", timeout=None)\n\nself.assert_exact_text_not_visible(text, selector=\"html\", by=\"css selector\", timeout=None)\n\n############\n\nself.wait_for_attribute_not_present(\n    selector, attribute, value=None, by=\"css selector\", timeout=None)\n\nself.assert_attribute_not_present(\n    selector, attribute, value=None, by=\"css selector\", timeout=None)\n\n############\n\nself.accept_alert(timeout=None)\n# Duplicates\n# self.wait_for_and_accept_alert(timeout=None)\n\nself.dismiss_alert(timeout=None)\n# Duplicates\n# self.wait_for_and_dismiss_alert(timeout=None)\n\nself.switch_to_alert(timeout=None)\n# Duplicates\n# self.wait_for_and_switch_to_alert(timeout=None)\n\n############\n\nself.quit_extra_driver(driver=None)\n\n############\n\nself.check_window(\n    name=\"default\", level=0, baseline=False, check_domain=True, full_diff=False)\n\n############\n\nself.deferred_assert_element(\n    selector, by=\"css selector\", timeout=None, fs=False)\n# Duplicates\n# self.delayed_assert_element(\n#     selector, by=\"css selector\", timeout=None, fs=False)\n\nself.deferred_assert_element_present(\n    selector, by=\"css selector\", timeout=None, fs=False)\n# Duplicates\n# self.delayed_assert_element_present(\n#     selector, by=\"css selector\", timeout=None, fs=False)\n\nself.deferred_assert_text(\n    text, selector=\"html\", by=\"css selector\", timeout=None, fs=False)\n# Duplicates\n# self.delayed_assert_text(\n#     text, selector=\"html\", by=\"css selector\", timeout=None, fs=False)\n\nself.deferred_assert_exact_text(\n    text, selector=\"html\", by=\"css selector\", timeout=None, fs=False)\n# Duplicates\n# self.delayed_assert_exact_text(\n#     text, selector=\"html\", by=\"css selector\", timeout=None, fs=False)\n\nself.deferred_check_window(\n    name=\"default\", level=0, baseline=False,\n    check_domain=True, full_diff=False, fs=False)\n# Duplicates\n# self.delayed_check_window(\n#     name=\"default\", level=0, baseline=False,\n#     check_domain=True, full_diff=False, fs=False)\n\nself.process_deferred_asserts(print_only=False)\n# Duplicates: self.process_delayed_asserts(print_only=False)\n\n############\n\nself.fail(msg=None)  # Inherited from \"unittest\"\n\nself._print(TEXT)  # Calls Python's print() / Allows for translations\n</code></pre> <p>\u2705 Test Folder: SeleniumBase/examples</p> <ul> <li>my_first_test.py</li> <li>parameterized_test.py</li> <li>test_deferred_asserts.py</li> <li>test_demo_site.py</li> <li>test_error_page.py</li> <li>test_login.py</li> <li>test_markers.py</li> <li>test_swag_labs.py</li> <li>test_suite.py</li> <li>test_tinymce.py</li> <li>And many more...</li> </ul> <p></p>"}, {"location": "help_docs/mobile_testing/", "title": "\ud83d\udcf1 Mobile Testing", "text": ""}, {"location": "help_docs/mobile_testing/#mobile-testing", "title": "Mobile Testing", "text": "<p>Use <code>--mobile</code> to run SeleniumBase tests using Chrome's mobile device emulator with default values for Device Metrics and User-Agent.</p> <p>Here's an example mobile test:</p> <p>SeleniumBase/examples/test_skype_site.py</p> <pre><code>pytest test_skype_site.py --mobile\n</code></pre> <p></p> <p>To configure Device Metrics, use:</p> <pre><code>--metrics=\"CSS_Width,CSS_Height,Pixel_Ratio\"\n</code></pre> <p>To configure the User-Agent, use:</p> <pre><code>--agent=\"USER-AGENT-STRING\"\n</code></pre> <p>To find real values for Device Metrics, see:</p> <ul> <li>Device Metrics List</li> </ul> <p>To find real User-Agent strings, see:</p> <ul> <li>User Agent Strings List</li> </ul> <p>Here's another example of a mobile test:</p> <p>SeleniumBase/examples/test_swag_labs.py</p> <pre><code>pytest test_swag_labs.py --mobile\n</code></pre> <p></p> <p>Here's an example of configuring mobile settings for that test:</p> <pre><code># Run tests using Chrome's mobile device emulator (default settings)\npytest test_swag_labs.py --mobile\n\n# Run mobile tests specifying CSS Width, CSS Height, and Pixel-Ratio\npytest test_swag_labs.py --mobile --metrics=\"360,640,2\"\n\n# Run mobile tests specifying the user agent\npytest test_swag_labs.py --mobile --agent=\"Mozilla/5.0 (Linux; Android 9; Pixel 3 XL)\"\n</code></pre> <p> </p>"}, {"location": "help_docs/recorder_mode/", "title": "\ud83d\udd34 Recorder Mode", "text": ""}, {"location": "help_docs/recorder_mode/#recorder-mode", "title": "Recorder Mode \ud83d\udd34/\u23fa\ufe0f", "text": "<p>\ud83d\udd34 SeleniumBase Recorder Mode lets you record &amp; export browser actions into test automation scripts.</p> <p></p> <p>\u23fa\ufe0f To make a new recording with Recorder Mode, use <code>sbase mkrec</code>, <code>sbase codegen</code>, or <code>sbase record</code>):</p> <pre><code>sbase mkrec TEST_NAME.py --url=URL\n</code></pre> <p>If the file already exists, you'll get an error. If no URL is provided, you'll start on a blank page and will need to navigate somewhere for the Recorder to activate. (The Recorder captures events on URLs that start with <code>https</code>, <code>http</code>, or <code>file</code>.) The command above runs an empty test that stops at a breakpoint so that you can perform manual browser actions for the Recorder. When you have finished recording, type \"<code>c</code>\" on the command-line and press <code>[ENTER]</code> to continue from the breakpoint. The test will complete and a file called <code>TEST_NAME_rec.py</code> will be automatically created in the <code>./recordings</code> folder. That file will get copied back to the original folder with the name you gave it. (You can run with Edge instead of Chrome by adding <code>--edge</code> to the command above. For headed Linux machines, add <code>--gui</code> to prevent the default headless mode on Linux.)</p> <p>Example:</p> <pre><code>sbase mkrec new_test.py --url=wikipedia.org\n\n* RECORDING initialized: new_test.py\n\npytest new_test.py --rec -q -s --url=wikipedia.org\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; PDB set_trace &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n\n&gt; PATH_TO_YOUR_CURRENT_DIRECTORY/new_test.py(9)\n.\n   5         def test_recording(self):\n   6             if self.recorder_ext:\n   7                 # When done recording actions,\n8                 # type \"c\", and press [Enter].\n9  -&gt;             import pdb; pdb.set_trace()\nreturn None\n(Pdb+) c\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; PDB continue &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n\n&gt;&gt;&gt; RECORDING SAVED as: recordings/new_test_rec.py\n**************************************************\n\n*** RECORDING COPIED to: new_test.py\n</code></pre> <p>\ud83d\udd34 You can also activate Recorder Mode from the Desktop App:</p> <pre><code>sbase recorder\n* Starting the SeleniumBase Recorder Desktop App...\n</code></pre> <p></p> <p>\u23fa\ufe0f While a recording is in progress, you can press the <code>[ESC]</code> key to pause the Recorder. To resume the recording, you can hit the <code>[~`]</code> key, which is located directly below the <code>[ESC]</code> key on most keyboards.</p> <p>\u23fa\ufe0f From within Recorder Mode there are two additional modes: \"Assert Element Mode\" and \"Assert Text Mode\". To switch into \"Assert Element Mode\", press the <code>[^]-key (SHIFT+6)</code>: The border will become purple, and you'll be able to click on elements to assert from your test. To switch into \"Assert Text Mode\", press the <code>[&amp;]-key (SHIFT+7)</code>: The border will become teal, and you'll be able to click on elements for asserting text from your test.</p> <p>While using either of the two special Assertion Modes, certain actions such as clicking on links won't have any effect. This lets you make assertions on elements without navigating away from the page, etc. To add an assertion for buttons without triggering default \"click\" behavior, mouse-down on the button and then mouse-up somewhere else. (This prevents a detected click while still recording the assert.) To return back to the original Recorder Mode, press any key other than <code>[SHIFT]</code> or <code>[BACKSPACE]</code> (Eg: Press <code>[CONTROL]</code>, etc.). Press <code>[ESC]</code> once to leave the Assertion Modes, but it'll stop the Recorder if you press it again.</p> <p>\u23fa\ufe0f For extra flexibility, the <code>sbase mkrec</code> command can be split into four separate commands:</p> <pre><code>sbase mkfile TEST_NAME.py --rec\n\npytest TEST_NAME.py --rec -q -s\n\nsbase print ./recordings/TEST_NAME_rec.py -n\n\ncp ./recordings/TEST_NAME_rec.py ./TEST_NAME.py\n</code></pre> <p>The first command creates a boilerplate test with a breakpoint; the second command runs the test with the Recorder activated; the third command prints the completed test to the console; and the fourth command replaces the initial boilerplate with the completed test. If you're just experimenting with the Recorder, you can run the second command as many times as you want, and it'll override previous recordings saved to <code>./recordings/TEST_NAME_rec.py</code>. (Note that <code>-s</code> is needed to allow breakpoints, unless you already have a <code>pytest.ini</code> file present with <code>addopts = --capture=no</code> in it. The <code>-q</code> is optional, which shortens <code>pytest</code> console output.)</p> <p>\u23fa\ufe0f You can also use the Recorder to add code to an existing test. To do that, you'll first need to create a breakpoint in your code to insert manual browser actions:</p> <pre><code>import pdb; pdb.set_trace()\n</code></pre> <p>Now you'll be able to run your test with <code>pytest</code>, and it will stop at the breakpoint for you to add in actions: (Press <code>c</code> and <code>ENTER</code> on the command-line to continue from the breakpoint.)</p> <pre><code>pytest TEST_NAME.py --rec -s\n</code></pre> <p>\u23fa\ufe0f You can also set a breakpoint at the start of your test by adding <code>--trace</code> as a <code>pytest</code> command-line option: (This is useful when running Recorder Mode without any <code>pdb</code> breakpoints.)</p> <pre><code>pytest TEST_NAME.py --trace --rec -s\n</code></pre> <p>\u23fa\ufe0f After the test completes, a file called <code>TEST_NAME_rec.py</code> will be automatically created in the <code>./recordings</code> folder, which will include the actions performed by the test, and the manual actions that you added in.</p> <p>\u23fa\ufe0f Here's a command-line notification for a completed recording:</p> <pre><code>&gt;&gt;&gt; RECORDING SAVED as: recordings/TEST_NAME_rec.py\n***************************************************\n</code></pre> <p>\u23fa\ufe0f When running additional tests from the same Python module, Recordings will get added to the file that was created from the first test:</p> <pre><code>&gt;&gt;&gt; RECORDING ADDED to: recordings/TEST_NAME_rec.py\n***************************************************\n</code></pre> <p>\u23fa\ufe0f Recorder Mode works by saving your recorded actions into the browser's sessionStorage. SeleniumBase then reads from the browser's sessionStorage to take the raw data and generate a full test from it. Keep in mind that sessionStorage is only present while the browser tab remains in the same domain/origin. (The sessionStorage of that tab goes away if you leave that domain/origin.) To compensate, links to web pages of different domain/origin will automatically open a new tab for you in Recorder Mode.</p> <p>\u23fa\ufe0f Additionally, the SeleniumBase <code>self.open(URL)</code> method will also open a new tab for you in Recorder Mode if the domain/origin is different from the current URL. If you need to navigate to a different domain/origin from within the same tab, call <code>self.save_recorded_actions()</code> first, which saves the recorded data for later. When a recorded test completes, SeleniumBase scans the sessionStorage data of all open browser tabs for generating the completed script.</p> <p>\u23fa\ufe0f As an alternative to activating Recorder Mode with the <code>--rec</code> command-line arg, you can also call <code>self.activate_recorder()</code> from your tests. Using the Recorder this way is only useful for tests that stay on the same URL. This is because the standard Recorder Mode functions as a Chrome extension and persists wherever the browser goes. (This version only stays on the page where called.)</p> <p>\u23fa\ufe0f (Note that same domain/origin is not the same as same URL. Example: https://xkcd.com/353 and https://xkcd.com/1537 are two different URLs with the same domain/origin. That means both URLs share the same sessionStorage, and that changes persist to different URLs of the same domain/origin. If you want to find out a website's origin during a test, just call: <code>self.get_origin()</code>, which returns the value of <code>window.location.origin</code> from the browser's console.)</p> <p>\u23fa\ufe0f Inside recorded tests, you might find the <code>self.open_if_not_url(URL)</code> method, which opens the URL given if the browser is not currently on that page. SeleniumBase uses this method in recorded scripts when the Recorder detects that a browser action changed the current URL. This method prevents an unnecessary page load and shows what page the test visited after a browser action.</p> To learn more about SeleniumBase, check out the Docs Site: <p> </p> All the code is on GitHub: <p> </p>"}, {"location": "help_docs/shadow_dom/", "title": "\ud83d\udc64 Shadow DOM Support", "text": ""}, {"location": "help_docs/shadow_dom/#shadow-dom-support-shadow-root-interaction", "title": "Shadow DOM support / Shadow-root interaction", "text": "<p>\ud83d\udd35 SeleniumBase lets you pierce through open Shadow DOM selectors (to interact with elements inside) by adding <code>::shadow</code> to CSS fragments that include a shadow-root element. For multi-layered shadow-roots, you must individually pierce through each shadow-root element that you want to get through.</p> <p>\ud83d\udd35 Here are some examples of Shadow DOM selectors:</p> <pre><code>css_1 = \"downloads-manager::shadow #no-downloads\"\n\ncss_2 = \"downloads-manager::shadow #downloadsList downloads-item::shadow #file-link\"\n\ncss_3 = \"downloads-manager::shadow downloads-toolbar::shadow cr-toolbar::shadow cr-toolbar-search-field::shadow cr-icon-button\"\n\ncss_4 = \"downloads-manager::shadow downloads-toolbar::shadow cr-toolbar::shadow cr-toolbar-search-field::shadow #searchInput\"\n\ncss_5 = \"downloads-manager::shadow downloads-toolbar::shadow cr-toolbar::shadow cr-toolbar-search-field::shadow #clearSearch\"\n</code></pre> <p>\ud83d\udd35 The shadow-root (<code>::shadow</code>) elements are transitional, and therefore cannot be the final part of your CSS selectors. Complete your CSS selectors by including an element that's inside a shadow-root.</p> <p>\ud83d\udd35 NOTE: <code>::shadow</code> selectors only exist within SeleniumBase. (They are not part of standard CSS.)</p> <p>\ud83d\udd35 Here are some examples of tests that interact with Shadow DOM elements: * examples/shadow_root_test.py * examples/test_shadow_dom.py * examples/old_wordle_script.py</p>"}, {"location": "help_docs/syntax_formats/", "title": "\ud83d\udd21 Syntax Formats", "text": ""}, {"location": "help_docs/syntax_formats/#the-23-syntax-formats", "title": "The 23 Syntax Formats", "text": "SeleniumBase currently supports 23 unique syntax formats (\"design patterns\") for structuring tests. <p>Table of Contents / Navigation:</p> <ul> <li>01. BaseCase direct class inheritance</li> <li>02. BaseCase subclass inheritance</li> <li>03. The \"sb\" pytest fixture (no class)</li> <li>04. The \"sb\" pytest fixture (in class)</li> <li>05. Page Object Model with BaseCase</li> <li>06. Page Object Model with the \"sb\" fixture</li> <li>07. Using \"request\" to get \"sb\" (no class)</li> <li>08. Using \"request\" to get \"sb\" (in class)</li> <li>09. Overriding the driver via BaseCase</li> <li>10. Overriding the driver via \"sb\" fixture</li> <li>11. BaseCase with Chinese translations</li> <li>12. BaseCase with Dutch translations</li> <li>13. BaseCase with French translations</li> <li>14. BaseCase with Italian translations</li> <li>15. BaseCase with Japanese translations</li> <li>16. BaseCase with Korean translations</li> <li>17. BaseCase with Portuguese translations</li> <li>18. BaseCase with Russian translations</li> <li>19. BaseCase with Spanish translations</li> <li>20. Gherkin syntax with \"behave\" BDD runner</li> <li>21. SeleniumBase SB (Python context manager)</li> <li>22. The driver manager (via context manager)</li> <li>23. The driver manager (via direct import)</li> </ul> <p></p>  1. BaseCase direct class inheritance <p>In this format, (which is used by most of the tests in the SeleniumBase examples folder), <code>BaseCase</code> is imported at the top of a Python file, followed by a Python class inheriting <code>BaseCase</code>. Then, any test method defined in that class automatically gains access to SeleniumBase methods, including the <code>setUp()</code> and <code>tearDown()</code> methods that are automatically called for opening and closing web browsers at the start and end of tests.</p> <p>To run a test of this format, use <code>pytest</code> or <code>nosetests</code>. Adding <code>BaseCase.main(__name__, __file__)</code> enables <code>python</code> to run <code>pytest</code> on your file indirectly. Here's an example:</p> <pre><code>from seleniumbase import BaseCase\nBaseCase.main(__name__, __file__)\n\nclass MyTestClass(BaseCase):\n    def test_demo_site(self):\n        self.open(\"https://seleniumbase.io/demo_page\")\n        self.type(\"#myTextInput\", \"This is Automated\")\n        self.click(\"#myButton\")\n        self.assert_element(\"tbody#tbodyId\")\n        self.assert_text(\"Automation Practice\", \"h3\")\n        self.click_link(\"SeleniumBase Demo Page\")\n        self.assert_exact_text(\"Demo Page\", \"h1\")\n        self.assert_no_js_errors()\n</code></pre> <p>(See examples/test_demo_site.py for the full test.)</p> <p>Using <code>BaseCase</code> inheritance is a great starting point for anyone learning SeleniumBase, and it follows good object-oriented programming principles.</p> <p></p>  2. BaseCase subclass inheritance <p>There are situations where you may want to customize the <code>setUp</code> and <code>tearDown</code> of your tests. Maybe you want to have all your tests login to a specific web site first, or maybe you want to have your tests report results through an API call depending on whether a test passed or failed. This can be done by creating a subclass of <code>BaseCase</code> and then carefully creating custom <code>setUp()</code> and <code>tearDown()</code> methods that don't overwrite the critical functionality of the default SeleniumBase <code>setUp()</code> and <code>tearDown()</code> methods. Afterwards, your test classes will inherit the subclass of <code>BaseCase</code> with the added functionality, rather than directly inheriting <code>BaseCase</code> itself. Here's an example of that:</p> <pre><code>from seleniumbase import BaseCase\n\nclass BaseTestCase(BaseCase):\n    def setUp(self):\n        super().setUp()\n        # &lt;&lt;&lt; Run custom setUp() code for tests AFTER the super().setUp() &gt;&gt;&gt;\n\n    def tearDown(self):\n        self.save_teardown_screenshot()  # On failure or \"--screenshot\"\n        if self.has_exception():\n            # &lt;&lt;&lt; Run custom code if the test failed. &gt;&gt;&gt;\n            pass\n        else:\n            # &lt;&lt;&lt; Run custom code if the test passed. &gt;&gt;&gt;\n            pass\n        # (Wrap unreliable tearDown() code in a try/except block.)\n        # &lt;&lt;&lt; Run custom tearDown() code BEFORE the super().tearDown() &gt;&gt;&gt;\n        super().tearDown()\n\n    def login(self):\n        # &lt;&lt;&lt; Placeholder. Add your code here. &gt;&gt;&gt;\n        # Reduce duplicate code in tests by having reusable methods like this.\n        # If the UI changes, the fix can be applied in one place.\n        pass\n\n    def example_method(self):\n        # &lt;&lt;&lt; Placeholder. Add your code here. &gt;&gt;&gt;\n        pass\n\nclass MyTests(BaseTestCase):\n    def test_example(self):\n        self.login()\n        self.example_method()\n        self.type(\"input\", \"Name\")\n        self.click(\"form button\")\n        ...\n</code></pre> <p>(See examples/boilerplates/base_test_case.py for more info.)</p> <p></p>  3. The \"sb\" pytest fixture (no class) <p>The pytest framework comes with a unique system called fixtures, which replaces import statements at the top of Python files by importing libraries directly into test definitions. More than just being an import, a pytest fixture can also automatically call predefined <code>setUp()</code> and <code>tearDown()</code> methods at the beginning and end of test methods. To work, <code>sb</code> is added as an argument to each test method definition that needs SeleniumBase functionality. This means you no longer need import statements in your Python files to use SeleniumBase. If using other pytest fixtures in your tests, you may need to use the SeleniumBase fixture (instead of <code>BaseCase</code> class inheritance) for compatibility reasons. Here's an example of the <code>sb</code> fixture in a test that does not use Python classes:</p> <pre><code>def test_sb_fixture_with_no_class(sb):\n    sb.open(\"https://google.com/ncr\")\n    sb.type('input[title=\"Search\"]', 'SeleniumBase\\n')\n    sb.click('a[href*=\"github.com/seleniumbase/SeleniumBase\"]')\n    sb.click('a[title=\"seleniumbase\"]')\n</code></pre> <p>(See the top of examples/test_sb_fixture.py for the test.)</p> <p></p>  4. The \"sb\" pytest fixture (in class) <p>The <code>sb</code> pytest fixture can also be used inside of a class. There is a slight change to the syntax because that means test methods must also include <code>self</code> in their argument definitions when test methods are defined. (The <code>self</code> argument represents the class object, and is used in every test method that lives inside of a class.) Once again, no import statements are needed in your Python files for this to work. Here's an example of using the <code>sb</code> fixture in a test method that lives inside of a Python class:</p> <pre><code>class Test_SB_Fixture:\n    def test_sb_fixture_inside_class(self, sb):\n        sb.open(\"https://google.com/ncr\")\n        sb.type('input[title=\"Search\"]', 'SeleniumBase\\n')\n        sb.click('a[href*=\"github.com/seleniumbase/SeleniumBase\"]')\n        sb.click('a[title=\"examples\"]')\n</code></pre> <p>(See the bottom of examples/test_sb_fixture.py for the test.)</p> <p></p>  5. Page Object Model with BaseCase <p>With SeleniumBase, you can use Page Objects to break out code from tests, but remember, the <code>self</code> variable (from test methods that inherit <code>BaseCase</code>) contains the driver and all other framework-specific variable definitions. Therefore, that <code>self</code> must be passed as an arg into any outside class method in order to call SeleniumBase methods from there. In the example below, the <code>self</code> variable from the test method is passed into the <code>sb</code> arg of the Page Object class method because the <code>self</code> arg of the Page Object class method is already being used for its own class. Every Python class method definition must include the <code>self</code> as the first arg.</p> <pre><code>from seleniumbase import BaseCase\n\nclass LoginPage:\n    def login_to_swag_labs(self, sb, username):\n        sb.open(\"https://www.saucedemo.com\")\n        sb.type(\"#user-name\", username)\n        sb.type(\"#password\", \"secret_sauce\")\n        sb.click('input[type=\"submit\"]')\n\nclass MyTests(BaseCase):\n    def test_swag_labs_login(self):\n        LoginPage().login_to_swag_labs(self, \"standard_user\")\n        self.assert_element(\"div.inventory_list\")\n        self.assert_element('div:contains(\"Sauce Labs Backpack\")')\n</code></pre> <p>(See examples/boilerplates/samples/swag_labs_test.py for the full test.)</p> <p></p>  6. Page Object Model with the \"sb\" fixture <p>This is similar to the classic Page Object Model with <code>BaseCase</code> inheritance, except that this time we pass the <code>sb</code> pytest fixture from the test into the <code>sb</code> arg of the page object class method, (instead of passing <code>self</code>). Now that you're using <code>sb</code> as a pytest fixture, you no longer need to import <code>BaseCase</code> anywhere in your code. See the example below:</p> <pre><code>class LoginPage:\n    def login_to_swag_labs(self, sb, username):\n        sb.open(\"https://www.saucedemo.com\")\n        sb.type(\"#user-name\", username)\n        sb.type(\"#password\", \"secret_sauce\")\n        sb.click('input[type=\"submit\"]')\n\nclass MyTests:\n    def test_swag_labs_login(self, sb):\n        LoginPage().login_to_swag_labs(sb, \"standard_user\")\n        sb.assert_element(\"div.inventory_list\")\n        sb.assert_element('div:contains(\"Sauce Labs Backpack\")')\n</code></pre> <p>(See examples/boilerplates/samples/sb_swag_test.py for the full test.)</p> <p></p>  7. Using \"request\" to get \"sb\" (no class) <p>The pytest <code>request</code> fixture can be used to retrieve other pytest fixtures from within tests, such as the <code>sb</code> fixture. This allows you to have more control over when fixtures get initialized because the fixture no longer needs to be loaded at the very beginning of test methods. This is done by calling <code>request.getfixturevalue('sb')</code> from the test. Here's an example of using the pytest <code>request</code> fixture to load the <code>sb</code> fixture in a test method that does not use Python classes:</p> <pre><code>def test_request_sb_fixture(request):\n    sb = request.getfixturevalue('sb')\n    sb.open(\"https://seleniumbase.io/demo_page\")\n    sb.assert_text(\"SeleniumBase\", \"#myForm h2\")\n    sb.assert_element(\"input#myTextInput\")\n    sb.type(\"#myTextarea\", \"This is me\")\n    sb.click(\"#myButton\")\n    sb.tearDown()\n</code></pre> <p>(See the top of examples/test_request_sb_fixture.py for the test.)</p> <p></p>  8. Using \"request\" to get \"sb\" (in class) <p>The pytest <code>request</code> fixture can also be used to get the <code>sb</code> fixture from inside a Python class. Here's an example of that:</p> <pre><code>class Test_Request_Fixture:\n    def test_request_sb_fixture_in_class(self, request):\n        sb = request.getfixturevalue('sb')\n        sb.open(\"https://seleniumbase.io/demo_page\")\n        sb.assert_element(\"input#myTextInput\")\n        sb.type(\"#myTextarea\", \"Automated\")\n        sb.assert_text(\"This Text is Green\", \"#pText\")\n        sb.click(\"#myButton\")\n        sb.assert_text(\"This Text is Purple\", \"#pText\")\n        sb.tearDown()\n</code></pre> <p>(See the bottom of examples/test_request_sb_fixture.py for the test.)</p> <p></p>  9. Overriding the driver via BaseCase <p>When you want to use SeleniumBase methods via <code>BaseCase</code>, but you want total freedom to control how you spin up your web browsers, this is the format you want. Although SeleniumBase gives you plenty of command-line options to change how your browsers are launched, this format gives you more control when the existing options aren't enough. Here's an example of that:</p> <pre><code>from selenium import webdriver\nfrom seleniumbase import BaseCase\n\nclass OverrideDriverTest(BaseCase):\n    def get_new_driver(self, *args, **kwargs):\n\"\"\"This method overrides get_new_driver() from BaseCase.\"\"\"\n        options = webdriver.ChromeOptions()\n        options.add_argument(\"--disable-3d-apis\")\n        options.add_argument(\"--disable-notifications\")\n        if self.headless:\n            options.add_argument(\"--headless=new\")\n            options.add_argument(\"--disable-gpu\")\n        options.add_experimental_option(\n            \"excludeSwitches\", [\"enable-automation\", \"enable-logging\"],\n        )\n        prefs = {\n            \"credentials_enable_service\": False,\n            \"profile.password_manager_enabled\": False,\n        }\n        options.add_experimental_option(\"prefs\", prefs)\n        return webdriver.Chrome(options=options)\n\n    def test_simple(self):\n        self.open(\"https://seleniumbase.io/demo_page\")\n        self.assert_text(\"Demo Page\", \"h1\")\n</code></pre> <p>(From examples/test_override_driver.py)</p> <p>The above format lets you customize selenium-wire for intercepting and inspecting requests and responses during SeleniumBase tests. Here's how a <code>selenium-wire</code> integration may look:</p> <pre><code>from seleniumbase import BaseCase\nfrom seleniumwire import webdriver  # Requires \"pip install selenium-wire\"\n\n\nclass WireTestCase(BaseCase):\n    def get_new_driver(self, *args, **kwargs):\n        options = webdriver.ChromeOptions()\n        options.add_experimental_option(\n            \"excludeSwitches\", [\"enable-automation\"]\n        )\n        options.add_experimental_option(\"useAutomationExtension\", False)\n        return webdriver.Chrome(options=options)\n\n    def test_simple(self):\n        self.open(\"https://seleniumbase.io/demo_page\")\n        for request in self.driver.requests:\n            print(request.url)\n</code></pre> <p>(NOTE: The <code>selenium-wire</code> integration is now included with <code>seleniumbase</code>: Add <code>--wire</code> as a <code>pytest</code> command-line option to activate.)</p> <p></p>  10. Overriding the driver via \"sb\" fixture <p>When you want to use SeleniumBase methods via the <code>sb</code> pytest fixture, but you want total freedom to control how you spin up your web browsers, this is the format you want. Although SeleniumBase gives you plenty of command-line options to change how your browsers are launched, this format gives you more control when the existing options aren't enough.</p> <pre><code>\"\"\"Overriding the \"sb\" fixture to override the driver.\"\"\"\nimport pytest\n\n@pytest.fixture()\ndef sb(request):\n    from selenium import webdriver\n    from seleniumbase import BaseCase\n\n    class BaseClass(BaseCase):\n        def get_new_driver(self, *args, **kwargs):\n\"\"\"This method overrides get_new_driver() from BaseCase.\"\"\"\n            options = webdriver.ChromeOptions()\n            if self.headless:\n                options.add_argument(\"--headless=new\")\n                options.add_argument(\"--disable-gpu\")\n            options.add_experimental_option(\n                \"excludeSwitches\", [\"enable-automation\"],\n            )\n            return webdriver.Chrome(options=options)\n\n        def setUp(self):\n            super().setUp()\n\n        def base_method(self):\n            pass\n\n        def tearDown(self):\n            self.save_teardown_screenshot()  # On failure or \"--screenshot\"\n            super().tearDown()\n\n    sb = BaseClass(\"base_method\")\n    sb.setUpClass()\n    sb.setUp()\n    yield sb\n    sb.tearDown()\n    sb.tearDownClass()\n\ndef test_override_fixture_no_class(sb):\n    sb.open(\"https://seleniumbase.io/demo_page\")\n    sb.type(\"#myTextInput\", \"This is Automated\")\n\nclass TestOverride:\n    def test_override_fixture_inside_class(self, sb):\n        sb.open(\"https://seleniumbase.io/demo_page\")\n        sb.type(\"#myTextInput\", \"This is Automated\")\n</code></pre> <p>(From examples/test_override_sb_fixture.py)</p> <p>Here's how the selenium-wire integration may look when overriding the <code>sb</code> pytest fixture to override the driver:</p> <pre><code>import pytest\n\n@pytest.fixture()\ndef sb(request):\n    import sys\n    from seleniumbase import BaseCase\n    from seleniumwire import webdriver  # Requires \"pip install selenium-wire\"\n\n    class BaseClass(BaseCase):\n        def get_new_driver(self, *args, **kwargs):\n            options = webdriver.ChromeOptions()\n            if \"linux\" in sys.platform:\n                options.add_argument(\"--headless=new\")\n            options.add_experimental_option(\n                \"excludeSwitches\", [\"enable-automation\"],\n            )\n            return webdriver.Chrome(options=options)\n\n        def setUp(self):\n            super().setUp()\n\n        def tearDown(self):\n            self.save_teardown_screenshot()  # On failure or \"--screenshot\"\n            super().tearDown()\n\n        def base_method(self):\n            pass\n\n    sb = BaseClass(\"base_method\")\n    sb.setUpClass()\n    sb.setUp()\n    yield sb\n    sb.tearDown()\n    sb.tearDownClass()\n\ndef test_wire_with_no_class(sb):\n    sb.open(\"https://seleniumbase.io/demo_page\")\n    for request in sb.driver.requests:\n        print(request.url)\n\nclass TestWire:\n    def test_wire_inside_class(self, sb):\n        sb.open(\"https://seleniumbase.io/demo_page\")\n        for request in sb.driver.requests:\n            print(request.url)\n</code></pre> <p>(NOTE: The <code>selenium-wire</code> integration is now included with <code>seleniumbase</code>: Add <code>--wire</code> as a <code>pytest</code> command-line option to activate. If you need both <code>--wire</code> with <code>--undetected</code> modes together, you'll still need to override <code>get_new_driver()</code>.)</p> <p></p>  11. BaseCase with Chinese translations <p>This format is similar to the English version with <code>BaseCase</code> inheritance, but there's a different import statement, and method names have been translated into Chinese. Here's an example of that:</p> <pre><code>from seleniumbase.translate.chinese import \u7852\u6d4b\u8bd5\u7528\u4f8b\n\u7852\u6d4b\u8bd5\u7528\u4f8b.main(__name__, __file__)\n\n\nclass \u6211\u7684\u6d4b\u8bd5\u7c7b(\u7852\u6d4b\u8bd5\u7528\u4f8b):\n    def test_\u4f8b\u5b501(self):\n        self.\u5f00\u542f(\"https://zh.wikipedia.org/wiki/\")\n        self.\u65ad\u8a00\u6807\u9898(\"\u7ef4\u57fa\u767e\u79d1\uff0c\u81ea\u7531\u7684\u767e\u79d1\u5168\u4e66\")\n        self.\u65ad\u8a00\u5143\u7d20('a[title=\"\u9996\u9875\"]')\n        self.\u65ad\u8a00\u6587\u672c(\"\u65b0\u95fb\u52a8\u6001\", \"span#\u65b0\u95fb\u52a8\u6001\")\n        self.\u8f93\u5165\u6587\u672c(\"#searchInput\", \"\u821e\u9f8d\")\n        self.\u5355\u51fb(\"#searchButton\")\n        self.\u65ad\u8a00\u6587\u672c(\"\u821e\u9f8d\", \"#firstHeading\")\n        self.\u65ad\u8a00\u5143\u7d20('img[src*=\"Chinese_draak.jpg\"]')\n        self.\u8f93\u5165\u6587\u672c(\"#searchInput\", \"\u9ebb\u5a46\u8c46\u8150\")\n        self.\u5355\u51fb(\"#searchButton\")\n        self.\u65ad\u8a00\u6587\u672c(\"\u9ebb\u5a46\u8c46\u8150\", \"#firstHeading\")\n        self.\u65ad\u8a00\u5143\u7d20('div.thumb div:contains(\"\u4e00\u5bb6\u4e2d\u9910\u9928\u7684\u9ebb\u5a46\u8c46\u8150\")')\n        self.\u8f93\u5165\u6587\u672c(\"#searchInput\", \"\u7cbe\u6b66\u82f1\u96c4\")\n        self.\u5355\u51fb(\"#searchButton\")\n        self.\u65ad\u8a00\u5143\u7d20('img[src*=\"Fist_of_legend.jpg\"]')\n        self.\u65ad\u8a00\u6587\u672c(\"\u674e\u8fde\u6770\", 'li a[title=\"\u674e\u8fde\u6770\"]')\n</code></pre> <p>(See examples/translations/chinese_test_1.py for the Chinese test.)</p> <p></p>  12. BaseCase with Dutch translations <p>This format is similar to the English version with <code>BaseCase</code> inheritance, but there's a different import statement, and method names have been translated into Dutch. Here's an example of that:</p> <pre><code>from seleniumbase.translate.dutch import Testgeval\nTestgeval.main(__name__, __file__)\n\n\nclass MijnTestklasse(Testgeval):\n    def test_voorbeeld_1(self):\n        self.openen(\"https://nl.wikipedia.org/wiki/Hoofdpagina\")\n        self.controleren_element('a[title*=\"hoofdpagina gaan\"]')\n        self.controleren_tekst(\"Welkom op Wikipedia\", \"td.hp-welkom\")\n        self.typ(\"#searchInput\", \"Stroopwafel\")\n        self.klik(\"#searchButton\")\n        self.controleren_tekst(\"Stroopwafel\", \"#firstHeading\")\n        self.controleren_element('img[src*=\"Stroopwafels\"]')\n        self.typ(\"#searchInput\", \"Rijksmuseum Amsterdam\")\n        self.klik(\"#searchButton\")\n        self.controleren_tekst(\"Rijksmuseum\", \"#firstHeading\")\n        self.controleren_element('img[src*=\"Rijksmuseum\"]')\n        self.terug()\n        self.controleren_url_bevat(\"Stroopwafel\")\n        self.vooruit()\n        self.controleren_url_bevat(\"Rijksmuseum\")\n</code></pre> <p>(See examples/translations/dutch_test_1.py for the Dutch test.)</p> <p></p>  13. BaseCase with French translations <p>This format is similar to the English version with <code>BaseCase</code> inheritance, but there's a different import statement, and method names have been translated into French. Here's an example of that:</p> <pre><code>from seleniumbase.translate.french import CasDeBase\nCasDeBase.main(__name__, __file__)\n\n\nclass MaClasseDeTest(CasDeBase):\n    def test_exemple_1(self):\n        self.ouvrir(\"https://fr.wikipedia.org/wiki/\")\n        self.v\u00e9rifier_texte(\"Wikip\u00e9dia\")\n        self.v\u00e9rifier_\u00e9l\u00e9ment('[alt=\"Wikip\u00e9dia\"]')\n        self.js_taper(\"#searchform input\", \"Cr\u00e8me br\u00fbl\u00e9e\")\n        self.cliquer(\"#searchform button\")\n        self.v\u00e9rifier_texte(\"Cr\u00e8me br\u00fbl\u00e9e\", \"#firstHeading\")\n        self.v\u00e9rifier_\u00e9l\u00e9ment('img[alt*=\"Cr\u00e8me br\u00fbl\u00e9e\"]')\n        self.js_taper(\"#searchform input\", \"Jardin des Tuileries\")\n        self.cliquer(\"#searchform button\")\n        self.v\u00e9rifier_texte(\"Jardin des Tuileries\", \"#firstHeading\")\n        self.v\u00e9rifier_\u00e9l\u00e9ment('img[alt*=\"Jardin des Tuileries\"]')\n        self.retour()\n        self.v\u00e9rifier_url_contient(\"br\u00fbl\u00e9e\")\n        self.en_avant()\n        self.v\u00e9rifier_url_contient(\"Jardin\")\n</code></pre> <p>(See examples/translations/french_test_1.py for the French test.)</p> <p></p>  14. BaseCase with Italian translations <p>This format is similar to the English version with <code>BaseCase</code> inheritance, but there's a different import statement, and method names have been translated into Italian. Here's an example of that:</p> <pre><code>from seleniumbase.translate.italian import CasoDiProva\nCasoDiProva.main(__name__, __file__)\n\n\nclass MiaClasseDiTest(CasoDiProva):\n    def test_esempio_1(self):\n        self.apri(\"https://it.wikipedia.org/wiki/\")\n        self.verificare_testo(\"Wikipedia\")\n        self.verificare_elemento('a[title=\"Lingua italiana\"]')\n        self.digitare(\"#searchInput\", \"Pizza\")\n        self.fare_clic(\"#searchButton\")\n        self.verificare_testo(\"Pizza\", \"#firstHeading\")\n        self.verificare_elemento('figure img[src*=\"pizza\"]')\n        self.digitare(\"#searchInput\", \"Colosseo\")\n        self.fare_clic(\"#searchButton\")\n        self.verificare_testo(\"Colosseo\", \"#firstHeading\")\n        self.verificare_elemento('figure img[src*=\"Colosseo\"]')\n        self.indietro()\n        self.verificare_url_contiene(\"Pizza\")\n        self.avanti()\n        self.verificare_url_contiene(\"Colosseo\")\n</code></pre> <p>(See examples/translations/italian_test_1.py for the Italian test.)</p> <p></p>  15. BaseCase with Japanese translations <p>This format is similar to the English version with <code>BaseCase</code> inheritance, but there's a different import statement, and method names have been translated into Japanese. Here's an example of that:</p> <pre><code>from seleniumbase.translate.japanese import \u30bb\u30ec\u30cb\u30a6\u30e0\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\n\u30bb\u30ec\u30cb\u30a6\u30e0\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9.main(__name__, __file__)\n\n\nclass \u79c1\u306e\u30c6\u30b9\u30c8\u30af\u30e9\u30b9(\u30bb\u30ec\u30cb\u30a6\u30e0\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9):\n    def test_\u4f8b1(self):\n        self.\u3092\u958b\u304f(\"https://ja.wikipedia.org/wiki/\")\n        self.\u30c6\u30ad\u30b9\u30c8\u3092\u78ba\u8a8d\u3059\u308b(\"\u30a6\u30a3\u30ad\u30da\u30c7\u30a3\u30a2\")\n        self.\u8981\u7d20\u3092\u78ba\u8a8d\u3059\u308b('[title*=\"\u30a6\u30a3\u30ad\u30da\u30c7\u30a3\u30a2\u3078\u3088\u3046\u3053\u305d\"]')\n        self.JS\u5165\u529b('input[name=\"search\"]', \"\u30a2\u30cb\u30e1\")\n        self.\u30af\u30ea\u30c3\u30af\u3057\u3066(\"#searchform button\")\n        self.\u30c6\u30ad\u30b9\u30c8\u3092\u78ba\u8a8d\u3059\u308b(\"\u30a2\u30cb\u30e1\", \"#firstHeading\")\n        self.JS\u5165\u529b('input[name=\"search\"]', \"\u5bff\u53f8\")\n        self.\u30af\u30ea\u30c3\u30af\u3057\u3066(\"#searchform button\")\n        self.\u30c6\u30ad\u30b9\u30c8\u3092\u78ba\u8a8d\u3059\u308b(\"\u5bff\u53f8\", \"#firstHeading\")\n        self.\u8981\u7d20\u3092\u78ba\u8a8d\u3059\u308b('img[alt=\"\u63e1\u308a\u5bff\u53f8\"]')\n        self.JS\u5165\u529b(\"#searchInput\", \"\u30ec\u30b4\u30e9\u30f3\u30c9\u30fb\u30b8\u30e3\u30d1\u30f3\")\n        self.\u30af\u30ea\u30c3\u30af\u3057\u3066(\"#searchform button\")\n        self.\u8981\u7d20\u3092\u78ba\u8a8d\u3059\u308b('img[alt*=\"LEGOLAND JAPAN\"]')\n        self.\u30ea\u30f3\u30af\u30c6\u30ad\u30b9\u30c8\u3092\u78ba\u8a8d\u3059\u308b(\"\u540d\u53e4\u5c4b\u57ce\")\n        self.\u30ea\u30f3\u30af\u30c6\u30ad\u30b9\u30c8\u3092\u30af\u30ea\u30c3\u30af\u3057\u307e\u3059(\"\u30c6\u30fc\u30de\u30d1\u30fc\u30af\")\n        self.\u30c6\u30ad\u30b9\u30c8\u3092\u78ba\u8a8d\u3059\u308b(\"\u30c6\u30fc\u30de\u30d1\u30fc\u30af\", \"#firstHeading\")\n</code></pre> <p>(See examples/translations/japanese_test_1.py for the Japanese test.)</p> <p></p>  16. BaseCase with Korean translations <p>This format is similar to the English version with <code>BaseCase</code> inheritance, but there's a different import statement, and method names have been translated into Korean. Here's an example of that:</p> <pre><code>from seleniumbase.translate.korean import \uc140\ub808\ub284_\ud14c\uc2a4\ud2b8_\ucf00\uc774\uc2a4\n\uc140\ub808\ub284_\ud14c\uc2a4\ud2b8_\ucf00\uc774\uc2a4.main(__name__, __file__)\n\n\nclass \ud14c\uc2a4\ud2b8_\ud074\ub798\uc2a4(\uc140\ub808\ub284_\ud14c\uc2a4\ud2b8_\ucf00\uc774\uc2a4):\n    def test_\uc2e4\uc2dc\uc608_1(self):\n        self.\uc5f4\uae30(\"https://ko.wikipedia.org/wiki/\")\n        self.\ud14d\uc2a4\ud2b8_\ud655\uc778(\"\uc704\ud0a4\ubc31\uacfc\")\n        self.\uc694\uc18c_\ud655\uc778('[title=\"\uc704\ud0a4\ubc31\uacfc:\uc18c\uac1c\"]')\n        self.JS_\uc785\ub825(\"#searchform input\", \"\uae40\uce58\")\n        self.\ud074\ub9ad(\"#searchform button\")\n        self.\ud14d\uc2a4\ud2b8_\ud655\uc778(\"\uae40\uce58\", \"#firstHeading\")\n        self.\uc694\uc18c_\ud655\uc778('img[alt=\"Various kimchi.jpg\"]')\n        self.\ub9c1\ud06c_\ud14d\uc2a4\ud2b8_\ud655\uc778(\"\ud55c\uad6d \uc694\ub9ac\")\n        self.JS_\uc785\ub825(\"#searchform input\", \"\ube44\ube54\ubc25\")\n        self.\ud074\ub9ad(\"#searchform button\")\n        self.\ud14d\uc2a4\ud2b8_\ud655\uc778(\"\ube44\ube54\ubc25\", \"#firstHeading\")\n        self.\uc694\uc18c_\ud655\uc778('img[alt=\"Dolsot-bibimbap.jpg\"]')\n        self.\ub9c1\ud06c_\ud14d\uc2a4\ud2b8\ub97c_\ud074\ub9ad\ud569\ub2c8\ub2e4(\"\ub3cc\uc1a5\ube44\ube54\ubc25\")\n        self.\ud14d\uc2a4\ud2b8_\ud655\uc778(\"\ub3cc\uc1a5\ube44\ube54\ubc25\", \"#firstHeading\")\n</code></pre> <p>(See examples/translations/korean_test_1.py for the Korean test.)</p> <p></p>  17. BaseCase with Portuguese translations <p>This format is similar to the English version with <code>BaseCase</code> inheritance, but there's a different import statement, and method names have been translated into Portuguese. Here's an example of that:</p> <pre><code>from seleniumbase.translate.portuguese import CasoDeTeste\nCasoDeTeste.main(__name__, __file__)\n\n\nclass MinhaClasseDeTeste(CasoDeTeste):\n    def test_exemplo_1(self):\n        self.abrir(\"https://pt.wikipedia.org/wiki/\")\n        self.verificar_texto(\"Wikip\u00e9dia\")\n        self.verificar_elemento('[title=\"L\u00edngua portuguesa\"]')\n        self.digitar(\"#searchform input\", \"Jo\u00e3o Pessoa\")\n        self.clique(\"#searchform button\")\n        self.verificar_texto(\"Jo\u00e3o Pessoa\", \"#firstHeading\")\n        self.verificar_elemento('img[alt*=\"Jo\u00e3o Pessoa\"]')\n        self.digitar(\"#searchform input\", \"Florian\u00f3polis\")\n        self.clique(\"#searchform button\")\n        self.verificar_texto(\"Florian\u00f3polis\", \"h1#firstHeading\")\n        self.verificar_elemento('td:contains(\"Avenida Beira-Mar\")')\n        self.voltar()\n        self.verificar_url_cont\u00e9m(\"Jo\u00e3o_Pessoa\")\n        self.atualizar_a_p\u00e1gina()\n        self.js_digitar(\"#searchform input\", \"Teatro Amazonas\")\n        self.clique(\"#searchform button\")\n        self.verificar_texto(\"Teatro Amazonas\", \"#firstHeading\")\n        self.verificar_texto_do_link(\"Festival Amazonas de \u00d3pera\")\n</code></pre> <p>(See examples/translations/portuguese_test_1.py for the Portuguese test.)</p> <p></p>  18. BaseCase with Russian translations <p>This format is similar to the English version with <code>BaseCase</code> inheritance, but there's a different import statement, and method names have been translated into Russian. Here's an example of that:</p> <pre><code>from seleniumbase.translate.russian import \u0422\u0435\u0441\u0442\u041d\u0430\u0421\u0435\u043b\u0435\u043d\n\u0422\u0435\u0441\u0442\u041d\u0430\u0421\u0435\u043b\u0435\u043d.main(__name__, __file__)\n\n\nclass \u041c\u043e\u0439\u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0439\u041a\u043b\u0430\u0441\u0441(\u0422\u0435\u0441\u0442\u041d\u0430\u0421\u0435\u043b\u0435\u043d):\n    def test_\u043f\u0440\u0438\u043c\u0435\u0440_1(self):\n        self.\u043e\u0442\u043a\u0440\u044b\u0442\u044c(\"https://ru.wikipedia.org/wiki/\")\n        self.\u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u044c_\u044d\u043b\u0435\u043c\u0435\u043d\u0442('[title=\"\u0420\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a\"]')\n        self.\u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u044c_\u0442\u0435\u043a\u0441\u0442(\"\u0412\u0438\u043a\u0438\u043f\u0435\u0434\u0438\u044f\", \"h2.main-wikimedia-header\")\n        self.\u0432\u0432\u0435\u0434\u0438\u0442\u0435(\"#searchInput\", \"\u041c\u0413\u0423\")\n        self.\u043d\u0430\u0436\u043c\u0438\u0442\u0435(\"#searchButton\")\n        self.\u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u044c_\u0442\u0435\u043a\u0441\u0442(\"\u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442\", \"#firstHeading\")\n        self.\u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u044c_\u044d\u043b\u0435\u043c\u0435\u043d\u0442('img[alt*=\"\u0413\u043b\u0430\u0432\u043d\u043e\u0435 \u0437\u0434\u0430\u043d\u0438\u0435 \u041c\u0413\u0423\"]')\n        self.\u0432\u0432\u0435\u0434\u0438\u0442\u0435(\"#searchInput\", \"\u043f\u0440\u0438\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0428\u0443\u0440\u0438\u043a\u0430\")\n        self.\u043d\u0430\u0436\u043c\u0438\u0442\u0435(\"#searchButton\")\n        self.\u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u044c_\u0442\u0435\u043a\u0441\u0442(\"\u041e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \u00ab\u042b\u00bb \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u043f\u0440\u0438\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0428\u0443\u0440\u0438\u043a\u0430\")\n        self.\u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u044c_\u044d\u043b\u0435\u043c\u0435\u043d\u0442('img[alt=\"\u041f\u043e\u0441\u0442\u0435\u0440 \u0444\u0438\u043b\u044c\u043c\u0430\"]')\n        self.\u043d\u0430\u0437\u0430\u0434()\n        self.\u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u044c_URL_\u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442(\"\u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442\")\n        self.\u0432\u043f\u0435\u0440\u0435\u0434()\n        self.\u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u044c_URL_\u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442(\"\u0428\u0443\u0440\u0438\u043a\u0430\")\n</code></pre> <p>(See examples/translations/russian_test_1.py for the Russian test.)</p> <p></p>  19. BaseCase with Spanish translations <p>This format is similar to the English version with <code>BaseCase</code> inheritance, but there's a different import statement, and method names have been translated into Spanish. Here's an example of that:</p> <pre><code>from seleniumbase.translate.spanish import CasoDePrueba\nCasoDePrueba.main(__name__, __file__)\n\n\nclass MiClaseDePrueba(CasoDePrueba):\n    def test_ejemplo_1(self):\n        self.abrir(\"https://es.wikipedia.org/wiki/\")\n        self.verificar_texto(\"Wikipedia\")\n        self.verificar_elemento('[title*=\"la p\u00e1gina principal\"]')\n        self.escriba(\"#searchInput\", \"Parc d'Atraccions Tibidabo\")\n        self.haga_clic(\"#searchButton\")\n        self.verificar_texto(\"Tibidabo\", \"#firstHeading\")\n        self.verificar_elemento('img[alt*=\"Tibidabo\"]')\n        self.escriba(\"#searchInput\", \"Palma de Mallorca\")\n        self.haga_clic(\"#searchButton\")\n        self.verificar_texto(\"Palma de Mallorca\", \"#firstHeading\")\n        self.verificar_elemento('img[alt*=\"Palma\"]')\n        self.volver()\n        self.verificar_url_contiene(\"Tibidabo\")\n        self.adelante()\n        self.verificar_url_contiene(\"Mallorca\")\n</code></pre> <p>(See examples/translations/spanish_test_1.py for the Spanish test.)</p> <p></p>  20. Gherkin syntax with \"behave\" BDD runner <p>With Behave's BDD Gherkin format, you can use natural language to write tests that work with SeleniumBase methods. Behave tests are run by calling <code>behave</code> on the command-line. This requires some special files in a specific directory structure. Here's an example of that structure:</p> <pre><code>features/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 behave.ini\n\u251c\u2500\u2500 environment.py\n\u251c\u2500\u2500 feature_file.feature\n\u2514\u2500\u2500 steps/\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 imported.py\n    \u2514\u2500\u2500 step_file.py\n</code></pre> <p>A <code>*.feature</code> file might look like this:</p> <pre><code>Feature: SeleniumBase scenarios for the RealWorld App\n\nScenario: Verify RealWorld App (log in / sign out)\n    Given Open \"seleniumbase.io/realworld/login\"\nAnd Clear Session Storage\nWhen Type \"demo_user\" into \"#username\"\nAnd Type \"secret_pass\" into \"#password\"\nAnd Do MFA \"GAXG2MTEOR3DMMDG\" into \"#totpcode\"\nThen Assert exact text \"Welcome!\" in \"h1\"\nAnd Highlight \"img#image1\"\nAnd Click 'a:contains(\"This Page\")'\nAnd Save screenshot to logs\nWhen Click link \"Sign out\"\nThen Assert element 'a:contains(\"Sign in\")'\nAnd Assert text \"You have been signed out!\"\n</code></pre> <p>(From examples/behave_bdd/features/realworld.feature)</p> <p>You'll need the <code>environment.py</code> file for tests to work. Here it is:</p> <pre><code>from seleniumbase import BaseCase\nfrom seleniumbase.behave import behave_sb\nbehave_sb.set_base_class(BaseCase)  # Accepts a BaseCase subclass\nfrom seleniumbase.behave.behave_sb import before_all  # noqa\nfrom seleniumbase.behave.behave_sb import before_feature  # noqa\nfrom seleniumbase.behave.behave_sb import before_scenario  # noqa\nfrom seleniumbase.behave.behave_sb import before_step  # noqa\nfrom seleniumbase.behave.behave_sb import after_step  # noqa\nfrom seleniumbase.behave.behave_sb import after_scenario  # noqa\nfrom seleniumbase.behave.behave_sb import after_feature  # noqa\nfrom seleniumbase.behave.behave_sb import after_all  # noqa\n</code></pre> <p>(From examples/behave_bdd/features/environment.py)</p> <p>Inside that file, you can use <code>BaseCase</code> (or a subclass) for the inherited class.</p> <p>For your <code>behave</code> tests to have access to SeleniumBase Behave steps, you can create an <code>imported.py</code> file with the following line:</p> <pre><code>from seleniumbase.behave import steps  # noqa\n</code></pre> <p>That will allow you to use lines like this in your <code>*.feature</code> files:</p> <pre><code>Feature: SeleniumBase scenarios for the RealWorld App\n\nScenario: Verify RealWorld App (log in / sign out)\n    Given Open \"seleniumbase.io/realworld/login\"\nAnd Clear Session Storage\nWhen Type \"demo_user\" into \"#username\"\nAnd Type \"secret_pass\" into \"#password\"\nAnd Do MFA \"GAXG2MTEOR3DMMDG\" into \"#totpcode\"\nThen Assert exact text \"Welcome!\" in \"h1\"\nAnd Highlight \"img#image1\"\nAnd Click 'a:contains(\"This Page\")'\nAnd Save screenshot to logs\n</code></pre> <p>You can also create your own step files (Eg. <code>step_file.py</code>):</p> <pre><code>from behave import step\n\n@step(\"Open the Swag Labs Login Page\")\ndef go_to_swag_labs(context):\n    sb = context.sb\n    sb.open(\"https://www.saucedemo.com\")\n    sb.clear_local_storage()\n\n@step(\"Login to Swag Labs with {user}\")\ndef login_to_swag_labs(context, user):\n    sb = context.sb\n    sb.type(\"#user-name\", user)\n    sb.type(\"#password\", \"secret_sauce\\n\")\n</code></pre> <p>(For more information, see the SeleniumBase Behave BDD ReadMe.)</p> <p></p>  21. SeleniumBase SB (Python context manager) <p>This format provides a pure Python way of using SeleniumBase without a test runner. Options can be passed via method instantiation or from the command-line. When setting the <code>test</code> option to <code>True</code> (or calling <code>python --test</code>), then standard test logging will occur, such as screenshots and reports for failing tests. All the usual SeleniumBase options are available, such as customizing the browser settings, etc. Here are some examples:</p> <pre><code>from seleniumbase import SB\n\nwith SB() as sb:  # By default, browser=\"chrome\" if not set.\n    sb.open(\"https://seleniumbase.github.io/realworld/login\")\n    sb.type(\"#username\", \"demo_user\")\n    sb.type(\"#password\", \"secret_pass\")\n    sb.enter_mfa_code(\"#totpcode\", \"GAXG2MTEOR3DMMDG\")  # 6-digit\n    sb.assert_text(\"Welcome!\", \"h1\")\n    sb.highlight(\"img#image1\")  # A fancier assert_element() call\n    sb.click('a:contains(\"This Page\")')  # Use :contains() on any tag\n    sb.click_link(\"Sign out\")  # Link must be \"a\" tag. Not \"button\".\n    sb.assert_element('a:contains(\"Sign in\")')\n    sb.assert_exact_text(\"You have been signed out!\", \"#top_message\")\n</code></pre> <p>(See examples/raw_sb.py for the test.)</p> <p>Here's another example, which uses <code>test</code> mode:</p> <pre><code>from seleniumbase import SB\n\nwith SB(test=True) as sb:\n    sb.open(\"https://google.com/ncr\")\n    sb.type('[name=\"q\"]', \"SeleniumBase on GitHub\\n\")\n    sb.click('a[href*=\"github.com/seleniumbase\"]')\n    sb.highlight(\"div.Layout-main\")\n    sb.highlight(\"div.Layout-sidebar\")\n    sb.sleep(0.5)\n\nwith SB(test=True, rtf=True, demo=True) as sb:\n    sb.open(\"seleniumbase.github.io/demo_page\")\n    sb.type(\"#myTextInput\", \"This is Automated\")\n    sb.assert_text(\"This is Automated\", \"#myTextInput\")\n    sb.assert_text(\"This Text is Green\", \"#pText\")\n    sb.click('button:contains(\"Click Me\")')\n    sb.assert_text(\"This Text is Purple\", \"#pText\")\n    sb.click(\"#checkBox1\")\n    sb.assert_element_not_visible(\"div#drop2 img#logo\")\n    sb.drag_and_drop(\"img#logo\", \"div#drop2\")\n    sb.assert_element(\"div#drop2 img#logo\")\n</code></pre> <p>(See examples/raw_test_scripts.py for the test.)</p> <p></p>  22. The driver manager (via context manager) <p>This pure Python format gives you a raw <code>webdriver</code> instance in a <code>with</code> block. The SeleniumBase Driver Manager will automatically make sure that your driver is compatible with your browser version. It gives you full access to customize driver options via method args or via the command-line. The driver will automatically call <code>quit()</code> after the code leaves the <code>with</code> block. Here are some examples:</p> <pre><code>\"\"\"This script can be run with pure \"python\". (pytest not needed).\"\"\"\nfrom seleniumbase import js_utils\nfrom seleniumbase import page_actions\nfrom seleniumbase import DriverContext\n\n# Driver Context Manager - (By default, browser=\"chrome\". Lots of options)\nwith DriverContext() as driver:\n    driver.get(\"https://seleniumbase.github.io/\")\n    js_utils.highlight_with_js(driver, 'img[alt=\"SeleniumBase\"]', loops=6)\n\nwith DriverContext(browser=\"chrome\", incognito=True) as driver:\n    driver.get(\"https://seleniumbase.io/apps/calculator\")\n    page_actions.wait_for_element(driver, \"4\", by=\"id\").click()\n    page_actions.wait_for_element(driver, \"2\", by=\"id\").click()\n    page_actions.wait_for_text(driver, \"42\", \"output\", by=\"id\")\n    js_utils.highlight_with_js(driver, \"#output\", loops=6)\n\nwith DriverContext() as driver:\n    driver.get(\"https://seleniumbase.github.io/demo_page\")\n    js_utils.highlight_with_js(driver, \"h2\", loops=5)\n    by_css = \"css selector\"\n    driver.find_element(by_css, \"#myTextInput\").send_keys(\"Automation\")\n    driver.find_element(by_css, \"#checkBox1\").click()\n    js_utils.highlight_with_js(driver, \"img\", loops=5)\n</code></pre> <p>(See examples/raw_driver_context.py for an example.)</p> <p></p>  23. The driver manager (via direct import) <p>Another way of running Selenium tests with pure <code>python</code> (as opposed to using <code>pytest</code> or <code>nosetests</code>) is by using this format, which bypasses BaseCase methods while still giving you a flexible driver with a manager. SeleniumBase includes helper files such as page_actions.py, which may help you get around some of the limitations of bypassing <code>BaseCase</code>. Here's an example:</p> <pre><code>\"\"\"This script can be run with pure \"python\". (pytest not needed).\"\"\"\nfrom seleniumbase import Driver\nfrom seleniumbase import js_utils\nfrom seleniumbase import page_actions\n\n# Example with options. (Also accepts command-line options.)\ndriver = Driver(browser=\"chrome\", headless=False)\ntry:\n    driver.get(\"https://seleniumbase.io/apps/calculator\")\n    page_actions.wait_for_element(driver, \"4\", by=\"id\").click()\n    page_actions.wait_for_element(driver, \"2\", by=\"id\").click()\n    page_actions.wait_for_text(driver, \"42\", \"output\", by=\"id\")\n    js_utils.highlight_with_js(driver, \"#output\", loops=6)\nfinally:\n    driver.quit()\n\n# Example 2 using default args or command-line options\ndriver = Driver()\ntry:\n    driver.get(\"https://seleniumbase.github.io/demo_page\")\n    js_utils.highlight_with_js(driver, \"h2\", loops=5)\n    by_css = \"css selector\"\n    driver.find_element(by_css, \"#myTextInput\").send_keys(\"Automation\")\n    driver.find_element(by_css, \"#checkBox1\").click()\n    js_utils.highlight_with_js(driver, \"img\", loops=5)\nfinally:\n    driver.quit()\n</code></pre> <p>(From examples/raw_browser_launcher.py)</p> <p>The above format can be used as a drop-in replacement for virtually every Python/selenium framework, as it uses the raw <code>driver</code> instance for handling commands. The <code>Driver()</code> method simplifies the work of managing drivers with optimal settings, and it can be configured via multiple method args. The Driver also accepts command-line options (such as <code>python --headless</code>) so that you don't need to modify your tests directly to use different settings. These command-line options only take effect if the associated method args remain unset (or set to <code>None</code>) for the specified options.</p>"}, {"location": "help_docs/thank_you/", "title": "\ud83d\ude4f Thank You", "text": ""}, {"location": "help_docs/thank_you/#thank-you-for-flying-with-seleniumbase", "title": "Thank you for flying with SeleniumBase! \ud83e\udd85", "text": "<p>SeleniumBase Playlist on YouTube:</p> <p></p> <p>SeleniumBase GitHub Repo Link:</p> <p></p> <p>SeleniumBase Gitter Chat Link:</p> <p></p> <p>Other Social Media Links:</p> <p></p> <p></p>"}, {"location": "help_docs/translations/", "title": "\ud83c\udf0f Translations", "text": ""}, {"location": "help_docs/translations/#translated-tests", "title": "\ud83c\udf0f Translated Tests \ud83c\ude3a Translation API \ud83c\ude3a", "text": "<p>SeleniumBase supports the following 10 languages: English, Chinese, Dutch, French, Italian, Japanese, Korean, Portuguese, Russian, and Spanish. (Examples can be found in SeleniumBase/examples/translations)</p> <p>Multi-language tests run with pytest like other tests. Test methods have a one-to-one mapping to supported languages. Here's an example of a translated test:</p> <pre><code># Chinese Translation\nfrom seleniumbase.translate.chinese import \u7852\u6d4b\u8bd5\u7528\u4f8b\n\nclass \u6211\u7684\u6d4b\u8bd5\u7c7b(\u7852\u6d4b\u8bd5\u7528\u4f8b):\n    def test_\u4f8b\u5b501(self):\n        self.\u5f00\u542f(\"https://zh.wikipedia.org/wiki/\")\n        self.\u65ad\u8a00\u6807\u9898(\"\u7ef4\u57fa\u767e\u79d1\uff0c\u81ea\u7531\u7684\u767e\u79d1\u5168\u4e66\")\n        self.\u65ad\u8a00\u5143\u7d20('a[title=\"\u9996\u9875\"]')\n        self.\u65ad\u8a00\u6587\u672c(\"\u65b0\u95fb\u52a8\u6001\", \"span#\u65b0\u95fb\u52a8\u6001\")\n        self.\u8f93\u5165\u6587\u672c(\"#searchInput\", \"\u821e\u9f8d\")\n        self.\u5355\u51fb(\"#searchButton\")\n        self.\u65ad\u8a00\u6587\u672c(\"\u821e\u9f8d\", \"#firstHeading\")\n</code></pre> <p>Here's another example:</p> <pre><code># Japanese Translation\nfrom seleniumbase.translate.japanese import \u30bb\u30ec\u30cb\u30a6\u30e0\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\n\nclass \u79c1\u306e\u30c6\u30b9\u30c8\u30af\u30e9\u30b9(\u30bb\u30ec\u30cb\u30a6\u30e0\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9):\n    def test_\u4f8b1(self):\n        self.\u3092\u958b\u304f(\"https://ja.wikipedia.org/wiki/\")\n        self.\u30c6\u30ad\u30b9\u30c8\u3092\u78ba\u8a8d\u3059\u308b(\"\u30a6\u30a3\u30ad\u30da\u30c7\u30a3\u30a2\")\n        self.\u8981\u7d20\u3092\u78ba\u8a8d\u3059\u308b('[title=\"\u30e1\u30a4\u30f3\u30da\u30fc\u30b8\u306b\u79fb\u52d5\u3059\u308b\"]')\n        self.\u5165\u529b(\"#searchInput\", \"\u30a2\u30cb\u30e1\")\n        self.\u30af\u30ea\u30c3\u30af\u3057\u3066(\"#searchButton\")\n        self.\u30c6\u30ad\u30b9\u30c8\u3092\u78ba\u8a8d\u3059\u308b(\"\u30a2\u30cb\u30e1\", \"#firstHeading\")\n        self.\u5165\u529b(\"#searchInput\", \"\u5bff\u53f8\")\n</code></pre> <p></p> <p>You can use SeleniumBase to selectively translate the method names of any test from one language to another with the console scripts interface. Additionally, the <code>import</code> line at the top of the Python file will change to import the new <code>BaseCase</code>. Example: <code>BaseCase</code> becomes <code>CasoDeTeste</code> when a test is translated into Portuguese.</p> <pre><code>seleniumbase translate\n</code></pre> <pre><code>* Usage:\nseleniumbase translate [SB_FILE.py] [LANGUAGE] [ACTION]\n\n* Languages:\n``--en`` / ``--English``  |  ``--zh`` / ``--Chinese``\n``--nl`` / ``--Dutch``    |  ``--fr`` / ``--French``\n``--it`` / ``--Italian``  |  ``--ja`` / ``--Japanese``\n``--ko`` / ``--Korean``   |  ``--pt`` / ``--Portuguese``\n``--ru`` / ``--Russian``  |  ``--es`` / ``--Spanish``\n\n* Actions:\n``-p`` / ``--print``  (Print translation output to the screen)\n``-o`` / ``--overwrite``  (Overwrite the file being translated)\n``-c`` / ``--copy``  (Copy the translation to a new ``.py`` file)\n\n* Options:\n``-n``  (include line Numbers when using the Print action)\n\n* Examples:\nTranslate test_1.py into Chinese and only print the output:\n&gt;&gt;&gt; seleniumbase translate test_1.py --zh  -p\nTranslate test_2.py into Portuguese and overwrite the file:\n&gt;&gt;&gt; seleniumbase translate test_2.py --pt  -o\nTranslate test_3.py into Dutch and make a copy of the file:\n&gt;&gt;&gt; seleniumbase translate test_3.py --nl  -c\n\n* Output:\nTranslates a SeleniumBase Python file into the language\nspecified. Method calls and ``import`` lines get swapped.\nBoth a language and an action must be specified.\nThe ``-p`` action can be paired with one other action.\nWhen running with ``-c`` (or ``--copy``) the new file name\nwill be the original name appended with an underscore\nplus the 2-letter language code of the new language.\n(Example: Translating ``test_1.py`` into Japanese with\n``-c`` will create a new file called ``test_1_ja.py``.)\n</code></pre>"}, {"location": "help_docs/useful_grep_commands/", "title": "\ud83d\udcdc Useful grep commands", "text": ""}, {"location": "help_docs/useful_grep_commands/#useful-grep-commands", "title": "Useful grep commands", "text": "<p>There are several useful grep commands for helping you find and/or replace text in multiple files. Examples:</p>"}, {"location": "help_docs/useful_grep_commands/#list-all-files-containing-selfget_new_driver-ignoring-pyc-files-from-the-current-directory", "title": "List all files containing <code>self.get_new_driver(</code>, ignoring \".pyc\" files, from the current directory", "text": "<p><code>grep -rl \"self.get_new_driver(\" * --exclude=\\*.pyc</code> OR <code>grep -rl * -e \"self.get_new_driver(\" --exclude=\\*.pyc</code></p> <p>To only search <code>.py</code> files, use <code>--include=\\*.py</code>:</p> <p><code>grep -rl \"self.get_new_driver(\" * --include=\\*.py</code></p>"}, {"location": "help_docs/useful_grep_commands/#replace-all-occurrences-of-foo_abc-with-bar_xyz-on-linux-for-python-files-from-the-current-directory", "title": "Replace all occurrences of \"foo_abc\" with \"bar_xyz\" on Linux, for Python files from the current directory", "text": "<p><code>sed -i 's/foo_abc/bar_xyz/g' *.py</code></p>"}, {"location": "help_docs/useful_grep_commands/#replace-all-occurrences-of-foo_abc-with-bar_xyz-on-macos-for-python-files-from-the-current-directory", "title": "Replace all occurrences of \"foo_abc\" with \"bar_xyz\" on macOS, for Python files from the current directory", "text": "<p><code>sed -i '' 's/foo_abc/bar_xyz/g' *.py</code></p>"}, {"location": "help_docs/useful_grep_commands/#find-all-chromedriver-processes-this-combines-ps-with-grep", "title": "Find all chromedriver processes (this combines <code>ps</code> with <code>grep</code>):", "text": "<p><code>ps -ef |grep chromedriver</code></p>"}, {"location": "help_docs/useful_grep_commands/#references", "title": "References", "text": "<ul> <li>https://stackoverflow.com/questions/16956810/how-do-i-find-all-files-containing-specific-text-on-linux</li> <li>https://stackoverflow.com/questions/11392478/how-to-replace-a-string-in-multiple-files-in-linux-command-line/20721292#20721292</li> </ul>"}, {"location": "help_docs/using_safari_driver/", "title": "\ud83e\udded Using Safari Driver", "text": ""}, {"location": "help_docs/using_safari_driver/#using-safaris-webdriver-for-running-browser-tests-on-macos", "title": "Using Safari's WebDriver for running browser tests on macOS", "text": "<p>(NOTE: Safari's WebDriver requires macOS 10.13 \"High Sierra\" or later.)</p> <p>You can find the official Apple documentation regarding \"Testing with WebDriver in Safari\" on the following page: https://developer.apple.com/documentation/webkit/testing_with_webdriver_in_safari</p> <p>Run <code>safaridriver --enable</code> once in a terminal to enable Safari's WebDriver. (If you\u2019re upgrading from a previous macOS release, you may need to prefix the command with <code>sudo</code>.)</p> <p>Now you can use <code>--browser=safari</code> to run your SeleniumBase tests on Safari.</p>"}, {"location": "help_docs/virtualenv_instructions/", "title": "\u2699\ufe0f Virtualenv Instructions", "text": ""}, {"location": "help_docs/virtualenv_instructions/#virtual-environment-tutorial", "title": "Virtual Environment Tutorial", "text": "<p>There are multiple ways of creating a Python virtual environment. This tutorial covers two of those:</p> <ul> <li>The <code>venv</code> command (included with Python 3+).</li> <li>The virtualenvwrapper <code>mkvirtualenv</code> command.</li> </ul> <p><code>venv</code> creates virtual environments in the location where run (generally with Python projects).</p> <p><code>mkvirtualenv</code> creates virtual environments in one place (generally in your home directory).</p> <p>(The Python Software Foundation recommends <code>venv</code> for creating virtual environments.)</p>  Option 1: Using \"venv\" <p>macOS/Linux terminal (<code>python3 -m venv ENV</code>)</p> <pre><code>python3 -m venv sbase_env\nsource sbase_env/bin/activate\n</code></pre> <p>Windows CMD prompt (<code>py -m venv ENV</code>):</p> <pre><code>py -m venv sbase_env\ncall sbase_env\\\\Scripts\\\\activate\n</code></pre> <p>To exit a virtual env, type <code>deactivate</code>.</p>  Option 2: Using virtualenvwrapper <p>macOS/Linux terminal:</p> <pre><code>python3 -m pip install virtualenvwrapper --force-reinstall\nexport WORKON_HOME=$HOME/.virtualenvs\nsource `which virtualenvwrapper.sh`\n</code></pre> <p>(Shortcut: Run <code>source virtualenv_install.sh</code> from the top-level SeleniumBase folder to perform the above steps.)</p> <p>(If you add <code>source `which virtualenvwrapper.sh`</code> to your local bash file (<code>~/.bash_profile</code> on macOS, or <code>~/.bashrc</code> on Linux), virtualenvwrapper commands such as <code>mkvirtualenv</code> will be available whenever you open a new command prompt.)</p> <p>Windows CMD prompt:</p> <pre><code>py -m pip install virtualenvwrapper-win --force-reinstall --user\n</code></pre> <p>(Shortcut: Run <code>win_virtualenv.bat</code> from the top-level SeleniumBase folder to perform the above step.)</p> Create a virtual environment: <ul> <li><code>mkvirtualenv ENV</code>:</li> </ul> <pre><code>mkvirtualenv sbase_env\n</code></pre> <p>(If you have multiple versions of Python installed on your machine, and you want your virtual environment to use a specific Python version, add <code>--python=PATH_TO_PYTHON_EXE</code> to your <code>mkvirtualenv</code> command with the Python executable to use.)</p>  virtualenvwrapper commands: <p>Creating a virtual environment:</p> <pre><code>mkvirtualenv sbase_env\n</code></pre> <p>Leaving your virtual environment:</p> <pre><code>deactivate\n</code></pre> <p>Returning to a virtual environment:</p> <pre><code>workon sbase_env\n</code></pre> <p>Listing all virtual environments:</p> <pre><code>workon\n</code></pre> <p>Deleting a virtual environment:</p> <pre><code>rmvirtualenv sbase_env\n</code></pre> <p>If the <code>python</code> and <code>python3</code> versions don't match (while in a virtualenv on macOS or Linux), the following command will sync the versions:</p> <pre><code>alias python=python3\n</code></pre> <p>(To remove an alias, use: <code>unalias NAME</code>)</p> <p>To verify the <code>python</code> version, use:</p> <pre><code>python --version\n</code></pre> <p>To see the PATH of your <code>python</code> (macOS/Linux), use:</p> <pre><code>which python\n</code></pre> <p>python-guide.org/en/latest/dev/virtualenvs has more information about Python virtual environments. For specific details about VirtualEnv and VirtualEnvWrapper, see http://virtualenv.readthedocs.org/en/latest/ and http://virtualenvwrapper.readthedocs.org/en/latest/.</p>"}, {"location": "integrations/azure/azure_pipelines/ReadMe/", "title": "\ud83e\udd16 Azure Pipelines", "text": ""}, {"location": "integrations/azure/azure_pipelines/ReadMe/#running-browser-based-test-automation-with-azure-pipelines-by-using-seleniumbase", "title": "Running browser-based test automation with Azure Pipelines by using SeleniumBase", "text": ""}, {"location": "integrations/azure/azure_pipelines/ReadMe/#step-0-fork-the-seleniumbase-repo-on-github-to-get-started-quickly", "title": "Step 0. Fork the SeleniumBase repo on GitHub to get started quickly.", "text": "<ul> <li>(You'll be using your own repository eventually.)</li> </ul>"}, {"location": "integrations/azure/azure_pipelines/ReadMe/#step-1-get-azure-pipelines-from-the-github-marketplace", "title": "Step 1. Get Azure Pipelines from the GitHub Marketplace", "text": ""}, {"location": "integrations/azure/azure_pipelines/ReadMe/#navigate-to-httpsgithubcommarketplaceazure-pipelines", "title": "Navigate to https://github.com/marketplace/azure-pipelines", "text": "<ul> <li>Set up a new plan (it's free) and follow the steps...</li> </ul>"}, {"location": "integrations/azure/azure_pipelines/ReadMe/#step-2-go-to-microsoft-azure-devops-to-set-up-your-environment", "title": "Step 2. Go to Microsoft Azure DevOps to set up your environment", "text": "<ul> <li> <p>Navigate to https://azure.microsoft.com/en-us/services/devops/?nav=min</p> </li> <li> <p>Follow the steps...</p> </li> </ul>"}, {"location": "integrations/azure/azure_pipelines/ReadMe/#select-start-free-with-github", "title": "Select \"Start free with GitHub &gt;\":", "text": ""}, {"location": "integrations/azure/azure_pipelines/ReadMe/#give-your-new-project-a-name-and-set-visibility-to-public-for-your-seleniumbase-fork", "title": "Give your new project a name and set visibility to public (for your SeleniumBase fork):", "text": ""}, {"location": "integrations/azure/azure_pipelines/ReadMe/#select-that-your-code-is-hosted-on-github", "title": "Select that your code is hosted on GitHub", "text": ""}, {"location": "integrations/azure/azure_pipelines/ReadMe/#select-your-fork-of-seleniumbase-as-your-repository", "title": "Select your fork of SeleniumBase as your repository", "text": ""}, {"location": "integrations/azure/azure_pipelines/ReadMe/#copy-the-azure-pipelinesyml-file-from-seleniumbase-into-the-azure-pipelinesyml-box-to-create-your-new-pipeline", "title": "Copy the azure-pipelines.yml file from SeleniumBase into the azure-pipelines.yml box to create your new pipeline", "text": ""}, {"location": "integrations/azure/azure_pipelines/ReadMe/#when-youre-done-copying-click-run", "title": "When you're done copying, click \"Run\".", "text": ""}, {"location": "integrations/azure/azure_pipelines/ReadMe/#step-3-congratulations-your-browser-tests-are-now-running", "title": "Step 3. Congratulations! Your browser tests are now running!", "text": "<ul> <li>Here's what a SeleniumBase sample run in Azure Pipelines may look like:</li> </ul> <p>https://dev.azure.com/seleniumbase/seleniumbase/_build/results?buildId=234</p> <p></p>"}, {"location": "integrations/azure/azure_pipelines/ReadMe/#every-time-you-create-a-pull-request-now-azure-pipelines-will-run-your-tests-automatically", "title": "Every time you create a pull request now, Azure Pipelines will run your tests automatically.", "text": "<p>To learn more, study SeleniumBase and see how the azure-pipelines.yml file works.</p>"}, {"location": "integrations/azure/jenkins/ReadMe/", "title": "\ud83e\udd16 Jenkins on Azure", "text": ""}, {"location": "integrations/azure/jenkins/ReadMe/#building-a-browser-based-test-automation-server-with-jenkins-on-azure-by-using-seleniumbase", "title": "Building a browser-based test automation server with Jenkins on Azure by using SeleniumBase", "text": "<p>(2022 NOTE: Steps from this 2019 tutorial from Boston Code Camp are now out-of-date. For installing Jenkins from the Azure Marketplace, you can try using Bitnami Jenkins. Or, for the newer official Microsoft tutorial, see Get Started: Install Jenkins on an Azure Linux VM, and then continue with Step 4 below to resume SeleniumBase setup after you've created your Jenkins instance.)</p>"}, {"location": "integrations/azure/jenkins/ReadMe/#step-0-fork-the-seleniumbase-repo-on-github-to-get-started-quickly", "title": "Step 0. Fork the SeleniumBase repo on GitHub to get started quickly.", "text": "<ul> <li>(You'll be using your own repository eventually.)</li> </ul>"}, {"location": "integrations/azure/jenkins/ReadMe/#step-1-find-jenkins-in-the-azure-marketplace", "title": "Step 1. Find Jenkins in the Azure Marketplace", "text": ""}, {"location": "integrations/azure/jenkins/ReadMe/#search-for-jenkins-in-the-azure-marketplace-and-select-the-jenkins-publisher-microsoft-result-to-get-to-the-jenkins-start-page", "title": "Search for \"Jenkins\" in the Azure Marketplace and select the <code>Jenkins (Publisher: Microsoft)</code> result to get to the Jenkins Start page.", "text": ""}, {"location": "integrations/azure/jenkins/ReadMe/#step-2-launch-a-jenkins-instance", "title": "Step 2. Launch a Jenkins instance", "text": ""}, {"location": "integrations/azure/jenkins/ReadMe/#click-create-and-follow-the-steps", "title": "Click \"Create\" and follow the steps...", "text": ""}, {"location": "integrations/azure/jenkins/ReadMe/#continue-to-additional-settings-when-youre-done-with-basics", "title": "Continue to \"Additional Settings\" when you're done with \"Basics\".", "text": ""}, {"location": "integrations/azure/jenkins/ReadMe/#on-the-additional-settings-section-set-the-size-to-b2s", "title": "On the \"Additional Settings\" section, set the Size to \"B2s\":", "text": ""}, {"location": "integrations/azure/jenkins/ReadMe/#once-youve-reached-step-5-click-create-to-complete-the-setup", "title": "Once you've reached Step 5, click \"Create\" to complete the setup.", "text": ""}, {"location": "integrations/azure/jenkins/ReadMe/#step-3-inspect-your-new-jenkins-instance-to-ssh-into-the-new-machine", "title": "Step 3. Inspect your new Jenkins instance to SSH into the new machine", "text": ""}, {"location": "integrations/azure/jenkins/ReadMe/#once-your-new-jenkins-instance-has-finished-launching-you-should-be-able-to-see-the-main-page", "title": "Once your new Jenkins instance has finished launching, you should be able to see the main page", "text": ""}, {"location": "integrations/azure/jenkins/ReadMe/#on-the-main-page-you-should-be-able-to-find-the-public-ip-address", "title": "On the main page, you should be able to find the Public IP Address.", "text": "<ul> <li>Use that IP Address to SSH into the machine:</li> </ul> <pre><code>ssh USERNAME@IP_ADDRESS\n</code></pre>"}, {"location": "integrations/azure/jenkins/ReadMe/#step-4-clone-the-seleniumbase-repository-from-the-root-directory", "title": "Step 4. Clone the SeleniumBase repository from the root (\"/\") directory.", "text": "<pre><code>cd /\nsudo git clone https://github.com/seleniumbase/SeleniumBase.git\n</code></pre>"}, {"location": "integrations/azure/jenkins/ReadMe/#step-5-enter-the-linux-folder", "title": "Step 5. Enter the \"linux\" folder", "text": "<pre><code>cd SeleniumBase/integrations/linux/\n</code></pre>"}, {"location": "integrations/azure/jenkins/ReadMe/#step-6-give-the-jenkins-user-sudo-access-see-jenkins_permissionssh-for-details", "title": "Step 6. Give the \"jenkins\" user sudo access (See jenkins_permissions.sh for details)", "text": "<pre><code>./jenkins_permissions.sh\n</code></pre>"}, {"location": "integrations/azure/jenkins/ReadMe/#step-7-become-the-jenkins-user-and-enter-a-bash-shell", "title": "Step 7. Become the \"jenkins\" user and enter a \"bash\" shell", "text": "<pre><code>sudo su jenkins\nbash\n</code></pre>"}, {"location": "integrations/azure/jenkins/ReadMe/#step-8-install-dependencies-see-linuxfilesh-for-details", "title": "Step 8. Install dependencies (See Linuxfile.sh for details)", "text": "<pre><code>./Linuxfile.sh\n</code></pre>"}, {"location": "integrations/azure/jenkins/ReadMe/#step-9-start-up-the-headless-browser-display-mechanism-xvfb-see-xvfb_launchersh-for-details", "title": "Step 9. Start up the headless browser display mechanism: Xvfb (See Xvfb_launcher.sh for details)", "text": "<pre><code>./Xvfb_launcher.sh\n</code></pre>"}, {"location": "integrations/azure/jenkins/ReadMe/#step-10-go-to-the-seleniumbase-directory", "title": "Step 10. Go to the SeleniumBase directory", "text": "<pre><code>cd /SeleniumBase\n</code></pre>"}, {"location": "integrations/azure/jenkins/ReadMe/#step-11-install-the-requirements-for-seleniumbase", "title": "Step 11. Install the requirements for SeleniumBase", "text": "<pre><code>sudo pip install -r requirements.txt --upgrade\n</code></pre>"}, {"location": "integrations/azure/jenkins/ReadMe/#step-12-install-seleniumbase-make-sure-you-already-installed-the-requirements-above", "title": "Step 12. Install SeleniumBase (Make sure you already installed the requirements above)", "text": "<pre><code>sudo python setup.py develop\n</code></pre>"}, {"location": "integrations/azure/jenkins/ReadMe/#step-13-install-chromedriver", "title": "Step 13. Install chromedriver", "text": "<pre><code>sudo seleniumbase install chromedriver\n</code></pre>"}, {"location": "integrations/azure/jenkins/ReadMe/#step-14-run-an-example-test-in-chrome-to-verify-installation-may-take-up-to-10-seconds", "title": "Step 14. Run an example test in Chrome to verify installation (May take up to 10 seconds)", "text": "<pre><code>pytest examples/my_first_test.py --headless --browser=chrome\n</code></pre>"}, {"location": "integrations/azure/jenkins/ReadMe/#step-15-secure-your-jenkins-machine", "title": "Step 15. Secure your Jenkins machine", "text": ""}, {"location": "integrations/azure/jenkins/ReadMe/#navigate-to-httpjenkins_ip_addressjenkins-on-azure", "title": "Navigate to http://JENKINS_IP_ADDRESS/jenkins-on-azure/", "text": "<p>(Depending on your version of Jenkins, you may see the following screen, or nothing at all.)</p> <p></p>"}, {"location": "integrations/azure/jenkins/ReadMe/#initially-jenkins-uses-only-http-which-makes-it-less-secure", "title": "Initially, Jenkins uses only <code>http</code>, which makes it less secure.", "text": ""}, {"location": "integrations/azure/jenkins/ReadMe/#youll-need-to-set-up-ssh-port-forwarding-in-order-to-secure-it", "title": "You'll need to set up SSH Port Forwarding in order to secure it.", "text": "<ul> <li>To do this, copy/paste the string and run it in a NEW command prompt on your local machine (NOT from an SSH terminal session), swapping out the username and DNS name with the ones you set up when creating the Jenkins instance in Azure.</li> </ul> <p><code>ssh -L 127.0.0.1:8080:localhost:8080 USERNAME@DNS_NAME</code></p>"}, {"location": "integrations/azure/jenkins/ReadMe/#step-16-login-to-jenkins", "title": "Step 16. Login to Jenkins", "text": ""}, {"location": "integrations/azure/jenkins/ReadMe/#if-youve-correctly-set-up-ssh-port-forwarding-the-url-will-be-http1270018080", "title": "If you've correctly set up SSH Port Forwarding, the url will be <code>http://127.0.0.1:8080/</code>", "text": ""}, {"location": "integrations/azure/jenkins/ReadMe/#youll-need-to-get-the-password-from-the-ssh-terminal-on-the-linux-machine-to-log-in", "title": "You'll need to get the password from the SSH terminal on the Linux machine to log in", "text": "<pre><code>sudo cat /var/lib/jenkins/secrets/initialAdminPassword\n</code></pre>"}, {"location": "integrations/azure/jenkins/ReadMe/#step-17-customize-jenkins", "title": "Step 17. Customize Jenkins", "text": ""}, {"location": "integrations/azure/jenkins/ReadMe/#step-18-create-an-admin-user", "title": "Step 18. Create an Admin user", "text": ""}, {"location": "integrations/azure/jenkins/ReadMe/#once-jenkins-has-finished-loading-the-top-left-of-the-page-should-look-like-this", "title": "Once Jenkins has finished loading, the top left of the page should look like this", "text": ""}, {"location": "integrations/azure/jenkins/ReadMe/#step-19-create-a-new-jenkins-job", "title": "Step 19. Create a new Jenkins job", "text": "<ul> <li>Click on \"New Item\"</li> <li>Give your new Jenkins job a name (ex: \"Test1\")</li> <li>Select \"Freestyle project\"</li> <li>Click \"OK\"</li> </ul>"}, {"location": "integrations/azure/jenkins/ReadMe/#step-20-setup-your-new-jenkins-job", "title": "Step 20. Setup your new Jenkins job", "text": "<ul> <li>Under \"Source Code Management\", select \"Git\".</li> <li>For the \"Repository URL\", put: <code>https://github.com/seleniumbase/SeleniumBase.git</code>. (You'll eventually be using your own clone of the repository here.)</li> </ul> <ul> <li>Under \"Build\", click the \"Add build step\" dropdown.</li> <li>Select \"Execute shell\".</li> <li>For the \"Command\", paste:</li> </ul> <pre><code>cd examples\npytest my_first_test.py --headless\n</code></pre>"}, {"location": "integrations/azure/jenkins/ReadMe/#click-save-when-youre-done", "title": "Click \"Save\" when you're done.", "text": "<ul> <li>You'll see the following page after that:</li> </ul>"}, {"location": "integrations/azure/jenkins/ReadMe/#step-21-run-your-new-jenkins-job", "title": "Step 21. Run your new Jenkins job", "text": "<ul> <li>Click on \"Build Now\"</li> <li>(If everything was done correctly, you'll see a blue dot appear after a few seconds, indicating that the test job passed.)</li> </ul>"}, {"location": "integrations/azure/jenkins/ReadMe/#step-22-see-the-top-jenkins-page-for-an-overview-of-all-jobs", "title": "Step 22. See the top Jenkins page for an overview of all jobs", "text": ""}, {"location": "integrations/azure/jenkins/ReadMe/#step-23-future-work", "title": "Step 23. Future Work", "text": "<p>If you have a web application that you want to test, you'll be able to create SeleniumBase tests and add them to Jenkins as you saw here. You may want to create a Deploy job, which downloads the latest version of your repository, and then kicks off all tests to run after that. You could then tell that Deploy job to auto-run whenever a change is pushed to your repository by using: \"Poll SCM\". All your tests would then be able to run by using: \"Build after other projects are built\". </p>"}, {"location": "integrations/azure/jenkins/ReadMe/#congratulations-youre-now-well-on-your-way-to-becoming-a-build-release-automation-engineer", "title": "Congratulations! You're now well on your way to becoming a build &amp; release / automation engineer!", "text": ""}, {"location": "integrations/docker/ReadMe/", "title": "\ud83d\udc33 Docker Start Guide", "text": ""}, {"location": "integrations/docker/ReadMe/#docker-setup-instructions-for-seleniumbase", "title": "Docker setup instructions for SeleniumBase", "text": ""}, {"location": "integrations/docker/ReadMe/#1-install-the-docker-toolbox", "title": "1. Install the Docker Toolbox", "text": "<p>You can get that from here: https://www.docker.com/products/docker-toolbox</p> <p>You might also want to install the Docker Engine: https://docs.docker.com/engine/installation/</p>"}, {"location": "integrations/docker/ReadMe/#2-create-your-seleniumbase-docker-environment", "title": "2. Create your SeleniumBase Docker environment", "text": "<pre><code>docker-machine create --driver virtualbox seleniumbase\n</code></pre>"}, {"location": "integrations/docker/ReadMe/#if-your-docker-environment-ever-goes-down-for-any-reason-you-can-bring-it-back-up-with-a-restart", "title": "(If your Docker environment ever goes down for any reason, you can bring it back up with a restart.)", "text": "<pre><code>docker-machine restart seleniumbase\n</code></pre>"}, {"location": "integrations/docker/ReadMe/#3-configure-your-shell", "title": "3. Configure your shell", "text": "<pre><code>eval \"$(docker-machine env seleniumbase)\"\n</code></pre>"}, {"location": "integrations/docker/ReadMe/#4-go-to-the-seleniumbase-home-directory-on-the-command-line-which-is-where-dockerfile-is-located-this-assumes-youve-already-cloned-the-seleniumbase-repo", "title": "4. Go to the SeleniumBase home directory on the command line, which is where Dockerfile is located. (This assumes you've already cloned the SeleniumBase repo.)", "text": ""}, {"location": "integrations/docker/ReadMe/#5-create-your-docker-image-from-your-dockerfile-get-ready-to-wait-awhile", "title": "5. Create your Docker image from your Dockerfile: (Get ready to wait awhile)", "text": "<pre><code>docker build -t seleniumbase .\n</code></pre> <p>If running on an Apple M1 Mac, use this instead:</p> <pre><code>docker build --platform linux/amd64 -t seleniumbase .\n</code></pre>"}, {"location": "integrations/docker/ReadMe/#6-run-the-example-test-with-chrome-inside-your-docker-once-the-test-completes-after-a-few-seconds-youll-automatically-exit-the-docker-shell", "title": "6. Run the example test with Chrome inside your Docker: (Once the test completes after a few seconds, you'll automatically exit the Docker shell)", "text": "<pre><code>docker run seleniumbase ./run_docker_test_in_chrome.sh\n</code></pre>"}, {"location": "integrations/docker/ReadMe/#7-now-run-the-same-test-with-firefox-inside-your-docker", "title": "7. Now run the same test with Firefox inside your Docker", "text": "<pre><code>docker run seleniumbase ./run_docker_test_in_firefox.sh\n</code></pre>"}, {"location": "integrations/docker/ReadMe/#8-you-can-also-enter-docker-and-stay-inside-the-shell", "title": "8. You can also enter Docker and stay inside the shell", "text": "<pre><code>docker run -i -t seleniumbase\n</code></pre>"}, {"location": "integrations/docker/ReadMe/#9-now-you-can-run-the-example-test-from-inside-the-docker-shell", "title": "9. Now you can run the example test from inside the Docker shell", "text": "<pre><code>./run_docker_test_in_chrome.sh\n</code></pre>"}, {"location": "integrations/docker/ReadMe/#10-when-youre-satisfied-you-may-exit-the-docker-shell", "title": "10. When you're satisfied, you may exit the Docker shell", "text": "<pre><code>exit\n</code></pre>"}, {"location": "integrations/docker/ReadMe/#11-optional-since-docker-images-and-containers-take-up-a-lot-of-space-you-may-want-to-clean-up-your-machine-from-time-to-time-when-theyre-not-being-used", "title": "11. (Optional) Since Docker images and containers take up a lot of space, you may want to clean up your machine from time to time when they\u2019re not being used", "text": "<p>Details on that can be found here: http://stackoverflow.com/questions/17236796/how-to-remove-old-docker-containers</p> <p>Here are a few of those cleanup commands:</p> <pre><code>docker container prune\ndocker system prune\ndocker images | grep \"&lt;none&gt;\" | awk '{print $3}' | xargs docker rmi\ndocker rm 'docker ps --no-trunc -aq'\n</code></pre> <p>If you want to completely remove all of your Docker containers and images, use these commands: (If there's nothing to delete, those commands will return an error.)</p> <pre><code>docker rm -f $(docker ps -a -q)\ndocker rmi -f $(docker images -q)\n</code></pre> <p>Finally, if you want to wipe out your SeleniumBase Docker virtualbox, use these commands:</p> <pre><code>docker-machine kill seleniumbase\ndocker-machine rm seleniumbase\n</code></pre> <p>For more cleanup commands, check out: https://codefresh.io/blog/everyday-hacks-docker/</p>"}, {"location": "integrations/docker/ReadMe/#13-optional-more-reading-on-docker-can-be-found-here", "title": "13. (Optional) More reading on Docker can be found here", "text": "<ul> <li>https://docs.docker.com</li> <li>https://docs.docker.com/get-started/</li> <li>https://docs.docker.com/docker-for-mac/</li> </ul>"}, {"location": "integrations/github/workflows/ReadMe/", "title": "\ud83e\udd16 GitHub CI", "text": ""}, {"location": "integrations/github/workflows/ReadMe/#running-browser-tests-on-github-actions-with-seleniumbase", "title": "Running browser tests on GitHub Actions with SeleniumBase", "text": ""}, {"location": "integrations/github/workflows/ReadMe/#step-0-create-a-fork-of-seleniumbase-on-github-to-help-you-get-started", "title": "Step 0. Create a fork of SeleniumBase on GitHub to help you get started.", "text": "<ul> <li>(You'll be using your own repo eventually.)</li> </ul>"}, {"location": "integrations/github/workflows/ReadMe/#step-1-from-the-github-actions-tab-choose-to-set-up-a-python-package-workflow", "title": "Step 1. From the GitHub Actions tab, choose to set up a Python package Workflow.", "text": ""}, {"location": "integrations/github/workflows/ReadMe/#step-2-add-your-workflow-yml-script", "title": "Step 2. Add your workflow <code>.yml</code> script.", "text": "<ul> <li>(If using a SeleniumBase fork, the script from https://github.com/seleniumbase/SeleniumBase/blob/master/.github/workflows/python-package.yml already exists to help guide you.)</li> </ul>"}, {"location": "integrations/github/workflows/ReadMe/#step-3-commit-your-changes-to-github", "title": "Step 3. Commit your changes to GitHub.", "text": ""}, {"location": "integrations/github/workflows/ReadMe/#step-4-your-tests-will-now-run-on-every-pull-request-and-on-every-commit-to-the-master-branch", "title": "Step 4. Your tests will now run on every pull request and on every commit to the <code>master</code> branch.", "text": "<ul> <li>(See https://github.com/seleniumbase/SeleniumBase/actions for the SeleniumBase example.)</li> </ul> <ul> <li>(You can click inside each build for more details.)</li> </ul> <ul> <li>(You can also see the specific steps being performed by each command.)</li> </ul> <ul> <li>(You'll notice that web browsers such as Chrome and Firefox get installed for tests to use. SeleniumBase uses pytest for running tests while using Selenium to interact with web browsers.)</li> </ul>"}, {"location": "integrations/github/workflows/ReadMe/#congratulations-you-now-know-how-to-create-and-run-browser-tests-with-github-actions", "title": "Congratulations! You now know how to create and run browser tests with GitHub Actions!", "text": ""}, {"location": "integrations/github/workflows/ReadMe/#study-seleniumbase-to-learn-more", "title": "Study SeleniumBase to learn more!", "text": ""}, {"location": "integrations/google_cloud/ReadMe/", "title": "\ud83e\udd16 Jenkins on Google Cloud", "text": ""}, {"location": "integrations/google_cloud/ReadMe/#building-a-browser-based-test-automation-server-on-the-google-cloud-platform-by-using-seleniumbase", "title": "Building a browser-based test automation server on the Google Cloud Platform by using SeleniumBase", "text": "<p>(This tutorial, from a previous Google Cloud Meetup, will teach you how to setup a Linux server for running automated browser tests. The cost of running this server is about $13.60/month on Google Cloud (enough to handle 5 parallel tests). This is less expensive than using other platforms.)</p>"}, {"location": "integrations/google_cloud/ReadMe/#step-1-open-the-google-cloud-platform-cloud-launcher", "title": "Step 1. Open the Google Cloud Platform Cloud Launcher", "text": "<ul> <li>Navigate to https://console.cloud.google.com/launcher</li> <li>(If you already have an active Google Cloud project, the Google Cloud Launcher will probably default to using that. If you don't, sign up for the free trial of Google Cloud Platform here to get started.)</li> </ul>"}, {"location": "integrations/google_cloud/ReadMe/#step-2-launch-a-jenkins-instance", "title": "Step 2. Launch a Jenkins instance", "text": "<ul> <li>Under \"Cloud Launcher\", Click on \"Jenkins Certified by Bitnami\"</li> <li>Click on \"Launch on Compute Engine\"</li> <li>Give the instance a name</li> <li>Give the instance a zone</li> <li>Click \"Create\"</li> </ul>"}, {"location": "integrations/google_cloud/ReadMe/#step-3-connect-with-your-new-jenkins-instance", "title": "Step 3. Connect with your new Jenkins instance", "text": "<ul> <li>SSH into your new instance by selecting: \"SSH\" =&gt; \"Open in browser window\" from the instance page.</li> </ul>"}, {"location": "integrations/google_cloud/ReadMe/#step-4-clone-the-seleniumbase-repository-from-the-root-directory", "title": "Step 4. Clone the SeleniumBase repository from the root (\"/\") directory.", "text": "<pre><code>cd /\nsudo git clone https://github.com/seleniumbase/SeleniumBase.git\n</code></pre>"}, {"location": "integrations/google_cloud/ReadMe/#step-5-enter-the-linux-folder", "title": "Step 5. Enter the \"linux\" folder", "text": "<pre><code>cd SeleniumBase/integrations/linux/\n</code></pre>"}, {"location": "integrations/google_cloud/ReadMe/#step-6-give-jenkins-aka-tomcat-user-sudo-access-see-tomcat_permissionssh-for-details", "title": "Step 6. Give Jenkins (aka \"tomcat\" user) sudo access (See tomcat_permissions.sh for details)", "text": "<pre><code>./tomcat_permissions.sh\n</code></pre>"}, {"location": "integrations/google_cloud/ReadMe/#step-7-become-tomcat-the-jenkins-user-and-enter-a-bash-shell", "title": "Step 7. Become \"tomcat\" (the Jenkins user) and enter a \"bash\" shell", "text": "<pre><code>sudo su tomcat\nbash\n</code></pre>"}, {"location": "integrations/google_cloud/ReadMe/#step-8-install-dependencies-see-linuxfilesh-for-details", "title": "Step 8. Install dependencies (See Linuxfile.sh for details)", "text": "<pre><code>./Linuxfile.sh\n</code></pre>"}, {"location": "integrations/google_cloud/ReadMe/#step-9-start-up-the-headless-browser-display-mechanism-xvfb-see-xvfb_launchersh-for-details", "title": "Step 9. Start up the headless browser display mechanism: Xvfb (See Xvfb_launcher.sh for details)", "text": "<pre><code>./Xvfb_launcher.sh\n</code></pre>"}, {"location": "integrations/google_cloud/ReadMe/#step-10-go-to-the-seleniumbase-directory", "title": "Step 10. Go to the SeleniumBase directory", "text": "<pre><code>cd /SeleniumBase\n</code></pre>"}, {"location": "integrations/google_cloud/ReadMe/#step-11-install-the-requirements-for-seleniumbase", "title": "Step 11. Install the requirements for SeleniumBase", "text": "<pre><code>sudo pip install -r requirements.txt --upgrade\n</code></pre>"}, {"location": "integrations/google_cloud/ReadMe/#step-12-install-seleniumbase", "title": "Step 12. Install SeleniumBase", "text": "<pre><code>sudo python setup.py develop\n</code></pre>"}, {"location": "integrations/google_cloud/ReadMe/#step-13-run-an-example-test-on-chrome-to-verify-installation-may-take-up-to-10-seconds", "title": "Step 13. Run an example test on Chrome to verify installation (May take up to 10 seconds)", "text": "<pre><code>pytest examples/my_first_test.py --headless\n</code></pre>"}, {"location": "integrations/google_cloud/ReadMe/#step-14-if-you-prefer-using-nosetests-that-works-too", "title": "Step 14. If you prefer using nosetests, that works too", "text": "<pre><code>nosetests examples/my_first_test.py --headless\n</code></pre>"}, {"location": "integrations/google_cloud/ReadMe/#step-15-you-can-also-verify-that-the-example-test-runs-on-firefox", "title": "Step 15. You can also verify that the example test runs on Firefox", "text": "<pre><code>pytest examples/my_first_test.py --headless --browser=firefox\n</code></pre>"}, {"location": "integrations/google_cloud/ReadMe/#step-16-login-to-jenkins", "title": "Step 16. Login to Jenkins", "text": "<ul> <li>(The url, as well as username and password, should be accessible from your Google Cloud Platform VM instance page.)</li> </ul>"}, {"location": "integrations/google_cloud/ReadMe/#step-17-create-a-new-jenkins-job", "title": "Step 17. Create a new Jenkins job", "text": "<ul> <li>Click on \"New Item\"</li> <li>Give your new Jenkins job a name (ex: \"My_First_Test\")</li> <li>Select \"Freestyle project\"</li> <li>Click \"OK\"</li> </ul>"}, {"location": "integrations/google_cloud/ReadMe/#step-18-setup-your-new-jenkins-job", "title": "Step 18. Setup your new Jenkins job", "text": "<ul> <li>Under \"Source Code Management\", select \"Git\".</li> <li>For the \"Repository URL\", put: <code>https://github.com/seleniumbase/SeleniumBase.git</code>. (You'll eventually be using your own clone of the repository here.)</li> <li>Under \"Build\", click the \"Add build step\" dropdown and then select \"Execute shell\".</li> <li>For the \"Command\", put:</li> </ul> <pre><code>pytest examples/my_first_test.py --headless\n</code></pre> <ul> <li>Click \"Save\" when you're done.</li> </ul>"}, {"location": "integrations/google_cloud/ReadMe/#step-19-run-your-new-jenkins-job", "title": "Step 19. Run your new Jenkins job", "text": "<ul> <li>Click on \"Build Now\"</li> <li>(If all the setup was done correctly, you should see a blue dot appear after a few seconds, indicating that the test job passed.)</li> </ul>"}, {"location": "integrations/google_cloud/ReadMe/#step-20-future-work", "title": "Step 20. Future Work", "text": "<p>If you have a web application that you want to test, you'll be able to create SeleniumBase tests and add them to Jenkins as you saw here. You may want to create a Deploy job, which downloads the latest version of your repository, and then kicks off all tests to run after that. You could then tell that Deploy job to auto-run whenever a change is pushed to your repository by using: \"Poll SCM\". All your tests would then be able to run by using: \"Build after other projects are built\". You can also use MySQL to save test results in the DB so that you can query the data at any time.</p>"}, {"location": "integrations/google_cloud/ReadMe/#congratulations-youre-now-well-on-your-way-to-becoming-a-build-release-automation-engineer", "title": "Congratulations! You're now well on your way to becoming a build &amp; release / automation engineer!", "text": ""}, {"location": "integrations/google_cloud/ReadMe/#mysql-db-setup-instructions", "title": "MySQL DB setup instructions", "text": ""}, {"location": "integrations/google_cloud/ReadMe/#step-21-return-to-the-google-cloud-launcher-and-launch-a-mysql-instance", "title": "Step 21. Return to the Google Cloud Launcher and launch a MySQL Instance", "text": "<ul> <li>Under \"Featured Solutions\", Click on \"MySQL\"</li> <li>Click on \"Launch on Compute Engine\"</li> <li>Give the instance a name</li> <li>Give the instance a zone</li> <li>Click \"Create\"</li> </ul>"}, {"location": "integrations/google_cloud/ReadMe/#step-22-get-the-connection-credentials-for-your-new-mysql-instance", "title": "Step 22. Get the Connection credentials for your new MySQL Instance", "text": "<ul> <li>Under the Google Cloud Platform menu, go to \"Compute Engine\"</li> <li>Find your new MySQL instance and then write down the value written in the \"External IP\" section.</li> <li>Under the Google Cloud Platform menu, go to \"Deployment Manager\"</li> <li>Find your new MySQL instance and then click on it.</li> <li>Write down the values for Admin username and password. (Username should be \"root\")</li> </ul>"}, {"location": "integrations/google_cloud/ReadMe/#step-23-get-a-mysql-gui-tool-so-that-you-can-connect-to-your-mysql-instance", "title": "Step 23. Get a MySQL GUI tool so that you can connect to your MySQL Instance", "text": "<ul> <li>You can download MySQL Workbench for this.</li> </ul>"}, {"location": "integrations/google_cloud/ReadMe/#step-24-create-a-new-connection-to-your-mysql-instance", "title": "Step 24. Create a new connection to your MySQL Instance", "text": "<ul> <li>Use the MySQL DB credentials that you saved in Step 21 for this.</li> </ul>"}, {"location": "integrations/google_cloud/ReadMe/#step-25-create-a-new-databaseschema-in-your-mysql-instance", "title": "Step 25. Create a new database/schema in your MySQL Instance", "text": "<ul> <li>You can name your database/schema <code>test_db</code>.</li> </ul>"}, {"location": "integrations/google_cloud/ReadMe/#step-26-create-the-necessary-tables-in-your-mysql-databaseschema", "title": "Step 26. Create the necessary tables in your MySQL database/schema", "text": "<ul> <li>Run the create_db_tables.sql script in your MySQL database/schema to create all the required DB tables. </li> </ul>"}, {"location": "integrations/google_cloud/ReadMe/#step-27-have-your-local-clone-of-seleniumbase-connect-to-your-mysql-db-instance", "title": "Step 27. Have your local clone of SeleniumBase connect to your MySQL DB Instance", "text": "<ul> <li>Update the MySQL connection details in your settings.py file to use the credentials that you saved in Step 21.</li> </ul>"}, {"location": "integrations/google_cloud/ReadMe/#step-28-have-your-seleniumbase-jenkins-jobs-use-your-mysql-db-instance", "title": "Step 28. Have your SeleniumBase Jenkins jobs use your MySQL DB Instance", "text": "<ul> <li>For the \"Execute shell\", use the following as your updated \"Command\":</li> </ul> <pre><code>pytest examples/test_suite.py --headless --with-db_reporting\n</code></pre> <ul> <li>Click \"Save\" when you're done.</li> </ul>"}, {"location": "integrations/google_cloud/ReadMe/#step-29-run-your-new-jenkins-job", "title": "Step 29. Run your new Jenkins job", "text": "<ul> <li>Click on \"Build Now\"</li> <li>If all goes well, you should be seeing new rows appear in your MySQL DB tables.</li> </ul>"}, {"location": "integrations/google_cloud/ReadMe/#step-30-congratulations-youve-successfully-completed-this-tutorial", "title": "Step 30. Congratulations! You've successfully completed this tutorial!", "text": ""}, {"location": "seleniumbase/common/ReadMe/", "title": "\ud83d\udd10 Decorators / Security", "text": ""}, {"location": "seleniumbase/common/ReadMe/#using-seleniumbasecommon-methods", "title": "Using seleniumbase/common methods.", "text": ""}, {"location": "seleniumbase/common/ReadMe/#part-1-decorators-from-decoratorspy", "title": "Part 1: Decorators - (from decorators.py)", "text": ""}, {"location": "seleniumbase/common/ReadMe/#use-these-python-decorators-with-your-test-methods-as-needed", "title": "Use these Python decorators with your test methods as needed", "text": "<ul> <li> <p><code>@print_runtime(description=None, limit=None)</code></p> </li> <li> <p><code>@runtime_limit(limit, description=None)</code></p> </li> <li> <p><code>@retry_on_exception(tries=6, delay=1, backoff=2, max_delay=32)</code></p> </li> <li> <p><code>@rate_limited(max_per_second)</code></p> </li> </ul> <p>Example demonstrating a rate-limited printing functionality:</p> <pre><code>import unittest\nfrom seleniumbase import decorators\n\nclass MyTestClass(unittest.TestCase):\n\n    @decorators.rate_limited(3.5)  # The arg is max calls per second\n    def print_item(self, item):\n        print(item)\n\n    def test_rate_limited_printing(self):\n        print(\"\\nRunning rate-limited print test:\")\n        for item in range(1, 11):\n            self.print_item(item)\n</code></pre>"}, {"location": "seleniumbase/common/ReadMe/#part-2-stringpassword-obfuscation-encryption-and-decryption", "title": "Part 2: String/Password Obfuscation, Encryption, and Decryption", "text": ""}, {"location": "seleniumbase/common/ReadMe/#intro", "title": "Intro", "text": "<p>Often in your tests, you may need to login to a website to perform testing. This generally means storing passwords in plaintext formats. For security reasons, that may not be an optimal solution. For this reason, encryption/obfuscation tools have been built here to help you mask your passwords in your tests. It's not a bulletproof solution, but it can keep anyone looking over your shoulder during test creation from getting your login passwords if they don't have your encryption key, which is stored in a separate file.</p>"}, {"location": "seleniumbase/common/ReadMe/#usage", "title": "Usage", "text": "<ul> <li> <p>First, set your custom encryption/decryption key in your local clone of settings.py. (If you modify the key later, you'll need to encrypt all your passwords again.)</p> </li> <li> <p>Next, use obfuscate.py to obfuscate/encrypt passwords into coded strings:</p> </li> </ul> <pre><code>python obfuscate.py\n\nEnter password to obfuscate: (CTRL+C to exit)\nPassword: *********\nVerify password:\nPassword: *********\n\nHere is the obfuscated password:\n$^*ENCRYPT=RXlYMSJWTz8HSwM=?&amp;#$\n</code></pre> <p>(You can also use unobfuscate.py to encrypt passwords without having them masked while typing them. Or you can use it to decrypt an obfuscated password.)</p> <ul> <li>Finally, in your tests you can now decrypt obfuscated passwords for use in login methods like this:</li> </ul> <pre><code>from seleniumbase import encryption\n...\npassword = encryption.decrypt('$^*ENCRYPT=RXlYMSJWTz8HSwM=?&amp;#$')\n</code></pre> <p>(You'll notice that encrypted strings have a common start token and end token. This is to help tell them apart from non-encrypted strings. You can customize these tokens in settings.py. The current default setting is <code>$^*ENCRYPT=</code> for the start token and <code>?&amp;#$</code> for the end token.)</p> <p>See decryption_test.py for an example of decrypting encrypted passwords in tests.</p>"}, {"location": "seleniumbase/console_scripts/ReadMe/", "title": "\ud83c\udf20 Console Scripts", "text": ""}, {"location": "seleniumbase/console_scripts/ReadMe/#console-scripts", "title": "Console Scripts \ud83c\udf20", "text": "<p>\ud83c\udf1f SeleniumBase console scripts can do many things, such as downloading web drivers, creating test directories with config files, activating the SeleniumBase Recorder, launching the SeleniumBase Commander, translating tests into other languages, running a Selenium Grid, and more.</p> <ul> <li> <p>Usage: <code>seleniumbase [COMMAND] [PARAMETERS]</code></p> </li> <li> <p>(simplified): <code>sbase [COMMAND] [PARAMETERS]</code></p> </li> <li> <p>To list all commands: <code>seleniumbase --help</code></p> </li> </ul> <p>(For running tests, use pytest with SeleniumBase.)</p> <pre><code>COMMANDS:\n      get / install    [DRIVER] [OPTIONS]\nmethods          (List common Python methods)\noptions          (List common pytest options)\nbehave-options   (List common behave options)\ngui / commander  [OPTIONAL PATH or TEST FILE]\nbehave-gui       (SBase Commander for Behave)\ncaseplans        [OPTIONAL PATH or TEST FILE]\nmkdir            [DIRECTORY] [OPTIONS]\nmkfile           [FILE.py] [OPTIONS]\nmkrec / codegen  [FILE.py] [OPTIONS]\nrecorder         (Open Recorder Desktop App.)\nrecord           (If args: mkrec. Else: App.)\nmkpres           [FILE.py] [LANG]\nmkchart          [FILE.py] [LANG]\nprint            [FILE] [OPTIONS]\ntranslate        [SB_FILE.py] [LANG] [ACTION]\nconvert          [WEBDRIVER_UNITTEST_FILE.py]\nextract-objects  [SB_FILE.py]\ninject-objects   [SB_FILE.py] [OPTIONS]\nobjectify        [SB_FILE.py] [OPTIONS]\nrevert-objects   [SB_FILE.py] [OPTIONS]\nencrypt / obfuscate\n      decrypt / unobfuscate\n      download server  (Get Selenium Grid JAR file)\ngrid-hub         [start|stop] [OPTIONS]\ngrid-node        [start|stop] --hub=[HOST/IP]\n* (EXAMPLE: \"sbase get chromedriver latest\") *\n\n    Type \"sbase help [COMMAND]\" for specific command info.\n    For info on all commands, type: \"seleniumbase --help\".\n    Use \"pytest\" for running tests.\n</code></pre> get / install <ul> <li>Usage:</li> </ul> <pre><code>sbase get [DRIVER] [OPTIONS]\nsbase install [DRIVER] [OPTIONS]\n</code></pre> <ul> <li>Examples:</li> </ul> <pre><code>sbase get chromedriver\nsbase get geckodriver\nsbase get edgedriver\nsbase get chromedriver 112\nsbase get chromedriver 112.0.5615.49\nsbase get chromedriver latest\nsbase get chromedriver latest-1  # (Latest minus one)\nsbase get chromedriver -p\nsbase get chromedriver latest -p\n</code></pre> <p>(Drivers:  <code>chromedriver</code>, <code>geckodriver</code>, <code>edgedriver</code>,            <code>iedriver</code>, <code>operadriver</code>, <code>uc_driver</code>)</p> <p>(Options:  <code>latest</code> or a specific driver version.            For chromedriver, you can also specify the major            version int, or <code>latest-1</code> for latest minus 1.            If none specified, installs the default version.            <code>-p</code> / <code>--path</code>: Also copy to \"/usr/local/bin\".)</p> <ul> <li>Output:</li> </ul> <p>Downloads the webdriver to <code>seleniumbase/drivers/</code> (<code>chromedriver</code> is required for Chrome automation) (<code>geckodriver</code> is required for Firefox automation) (<code>edgedriver</code> is required for MS__Edge automation)</p> methods <ul> <li>Usage:</li> </ul> <pre><code>sbase methods\n</code></pre> <ul> <li>Output:</li> </ul> <p>Displays common SeleniumBase Python methods.</p> options <ul> <li>Usage:</li> </ul> <pre><code>sbase options\n</code></pre> <ul> <li>Output:</li> </ul> <p>Displays common pytest command-line options that are available when using SeleniumBase.</p> <pre><code>--browser=BROWSER  (The web browser to use. Default is \"chrome\")\n--edge / --firefox / --safari  (Shortcut for browser selection.)\n--headless  (Run tests headlessly. Default mode on Linux OS.)\n--demo  (Slow down and visually see test actions as they occur.)\n--slow  (Slow down the automation. Faster than using Demo Mode.)\n--reuse-session / --rs  (Reuse browser session between tests.)\n--crumbs  (Clear all cookies between tests reusing a session.)\n--maximize  (Start tests with the web browser window maximized.)\n--dashboard  (Enable SeleniumBase\\'s Dashboard at dashboard.html)\n--uc  (Enable undetected-chromedriver to evade bot-detection.)\n--incognito  (Enable Chromium\\'s Incognito mode.)\n--guest  (Enable Chromium\\'s Guest mode.)\n-m=MARKER  (Run tests with the specified pytest marker.)\n-n=NUM  (Multithread the tests using that many threads.)\n-v  (Verbose mode. Print the full names of each test run.)\n--html=report.html  (Create a detailed pytest-html report.)\n--collect-only / --co  (Only show discovered tests. No run.)\n--co -q  (Only show full names of discovered tests. No run.)\n-x  (Stop running tests after the first failure is reached.)\n--pdb  (Enter the Post Mortem Debug Mode after any test fails.)\n--trace  (Enter Debug Mode immediately after starting any test.)\n| Debug Mode Commands  &gt;&gt;&gt;   help / h: List all commands. |\n|   n: Next line of method. s: Step through. c: Continue. |\n|  return / r: Run until method returns. j: Jump to line. |\n| where / w: Show stack spot. u: Up stack. d: Down stack. |\n| longlist / ll: See code. dir(): List namespace objects. |\n--help / -h  (Display list of all available pytest options.)\n--final-debug  (Enter Final Debug Mode after each test ends.)\n--recorder / --rec  (Save browser actions as Python scripts.)\n--rec-behave / --rec-gherkin  (Save actions as Gherkin code.)\n--save-screenshot  (Save a screenshot at the end of each test.)\n--archive-logs  (Archive old log files instead of deleting them.)\n--check-js  (Check for JavaScript errors after page loads.)\n--start-page=URL  (The browser start page when tests begin.)\n--agent=STRING  (Modify the web browser\\'s User-Agent string.)\n--mobile  (Use Chromium\\'s mobile device emulator during tests.)\n--metrics=STRING  (Set mobile \"CSSWidth,CSSHeight,PixelRatio\".)\n--ad-block  (Block some types of display ads after page loads.)\n--settings-file=FILE  (Override default SeleniumBase settings.)\n--env=ENV  (Set the test env. Access with \"self.env\" in tests.)\n--data=DATA  (Extra test data. Access with \"self.data\" in tests.)\n--disable-csp  (Disable the Content Security Policy of websites.)\n--remote-debug  (Sync to Ch-R-Debugger chrome://inspect/#devices)\n--server=SERVER  (The Selenium Grid server/IP used for tests.)\n--port=PORT  (The Selenium Grid port used by the test server.)\n--proxy=SERVER:PORT  (Connect to a proxy server:port for tests.)\n--proxy=USER:PASS@SERVER:PORT  (Use authenticated proxy server.)\n\nFor the full list of command-line options, type: \"pytest --help\".\n</code></pre> behave-options <ul> <li>Usage:</li> </ul> <pre><code>sbase behave-options\n</code></pre> <ul> <li>Output:</li> </ul> <p>Displays common Behave command-line options that are available when using SeleniumBase.</p> <pre><code>-D browser=BROWSER  (The web browser to use. Default is \"chrome\")\n-D headless  (Run tests headlessly. Default mode on Linux OS.)\n-D demo  (Slow down and visually see test actions as they occur.)\n-D slow  (Slow down the automation. Faster than using Demo Mode.)\n-D reuse-session / -D rs  (Reuse browser session between tests.)\n-D crumbs  (Clear all cookies between tests reusing a session.)\n-D maximize  (Start tests with the web browser window maximized.)\n-D dashboard  (Enable SeleniumBase\\'s Dashboard at dashboard.html)\n-D uc  (Enable undetected-chromedriver to evade bot-detection.)\n-D incognito  (Enable Chromium\\'s Incognito mode.)\n-D guest  (Enable Chromium\\'s Guest mode.)\n--no-snippets / -q  (Quiet mode. Don\\'t print snippets.)\n--dry-run / -d  (Dry run. Only show discovered tests.)\n--stop  (Stop running tests after the first failure is reached.)\n-D pdb  (Enter the Post Mortem Debug Mode after any test fails.)\n| Debug Mode Commands  &gt;&gt;&gt;   help / h: List all commands. |\n|   n: Next line of method. s: Step through. c: Continue. |\n|  return / r: Run until method returns. j: Jump to line. |\n| where / w: Show stack spot. u: Up stack. d: Down stack. |\n| longlist / ll: See code. dir(): List namespace objects. |\n-D recorder  (Record browser actions to generate test scripts.)\n-D save-screenshot  (Save a screenshot at the end of each test.)\n-D archive-logs  (Archive old log files instead of deleting them.)\n-D check-js  (Check for JavaScript errors after page loads.)\n-D start-page=URL  (The browser start page when tests begin.)\n-D agent=STRING  (Modify the web browser\\'s User-Agent string.)\n-D mobile  (Use Chromium\\'s mobile device emulator during tests.)\n-D metrics=STRING  (Set mobile \"CSSWidth,CSSHeight,PixelRatio\".)\n-D ad-block  (Block some types of display ads after page loads.)\n-D settings-file=FILE  (Override default SeleniumBase settings.)\n-D env=ENV  (Set the test env. Access with \"self.env\" in tests.)\n-D data=DATA  (Extra test data. Access with \"self.data\" in tests.)\n-D disable-csp  (Disable the Content Security Policy of websites.)\n-D remote-debug  (Sync to Ch-R-Debugger chrome://inspect/#devices)\n-D server=SERVER  (The Selenium Grid server/IP used for tests.)\n-D port=PORT  (The Selenium Grid port used by the test server.)\n-D proxy=SERVER:PORT  (Connect to a proxy server:port for tests.)\n-D proxy=USER:PASS@SERVER:PORT  (Use authenticated proxy server.)\n\nFor the full list of command-line options, type: \"behave --help\".\n</code></pre> gui / commander <ul> <li>Usage:</li> </ul> <pre><code>sbase gui [OPTIONAL PATH or TEST FILE]\nsbase commander [OPTIONAL PATH or TEST FILE]\n</code></pre> behave-gui <ul> <li>Usage:</li> </ul> <pre><code>sbase behave-gui [OPTIONAL PATH or TEST FILE]\nsbase gui-behave [OPTIONAL PATH or TEST FILE]\n</code></pre> <ul> <li>Examples:</li> </ul> <pre><code>sbase behave-gui\nsbase behave-gui -i=calculator\nsbase behave-gui features/\nsbase behave-gui features/calculator.feature\n</code></pre> <ul> <li>Output:</li> </ul> <p>Launches SeleniumBase Commander / GUI for Behave.</p> caseplans <ul> <li>Usage:</li> </ul> <pre><code>sbase caseplans [OPTIONAL PATH or TEST FILE]\n</code></pre> <ul> <li>Examples:</li> </ul> <pre><code>sbase caseplans\nsbase caseplans -k agent\nsbase caseplans -m marker2\nsbase caseplans test_suite.py\nsbase caseplans offline_examples/\n</code></pre> <ul> <li>Output:</li> </ul> <p>Launches the SeleniumBase Case Plans Generator.</p> mkdir <ul> <li>Usage:</li> </ul> <pre><code>sbase mkdir [DIRECTORY] [OPTIONS]\n</code></pre> <ul> <li>Example:</li> </ul> <pre><code>sbase mkdir ui_tests\n</code></pre> <ul> <li>Options:</li> </ul> <p><code>-b</code> / <code>--basic</code>  (Only config files. No tests added.)</p> <ul> <li>Output:</li> </ul> <p>Creates a new folder for running SBase scripts. The new folder contains default config files, sample tests for helping new users get started, and Python boilerplates for setting up customized test frameworks.</p> <pre><code>ui_tests/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 my_first_test.py\n\u251c\u2500\u2500 parameterized_test.py\n\u251c\u2500\u2500 pytest.ini\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 setup.cfg\n\u251c\u2500\u2500 test_demo_site.py\n\u2514\u2500\u2500 boilerplates/\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 base_test_case.py\n    \u251c\u2500\u2500 boilerplate_test.py\n    \u251c\u2500\u2500 classic_obj_test.py\n    \u251c\u2500\u2500 page_objects.py\n    \u251c\u2500\u2500 sb_fixture_test.py\n    \u2514\u2500\u2500 samples/\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 google_objects.py\n        \u251c\u2500\u2500 google_test.py\n        \u251c\u2500\u2500 sb_swag_test.py\n        \u2514\u2500\u2500 swag_labs_test.py\n</code></pre> <p>If running with the <code>-b</code> or <code>--basic</code> option:</p> <pre><code>ui_tests/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 pytest.ini\n\u251c\u2500\u2500 requirements.txt\n\u2514\u2500\u2500 setup.cfg\n</code></pre> mkfile <ul> <li>Usage:</li> </ul> <pre><code>sbase mkfile [FILE.py] [OPTIONS]\n</code></pre> <ul> <li>Example:</li> </ul> <pre><code>sbase mkfile new_test.py\n</code></pre> <ul> <li>Options:</li> </ul> <p><code>-b</code> / <code>--basic</code>  (Basic boilerplate / single-line test) <code>-r</code> / <code>--rec</code>  (adds Pdb+ breakpoint for Recorder Mode)</p> <ul> <li>Language Options:</li> </ul> <p><code>--en</code> / <code>--English</code>    |    <code>--zh</code> / <code>--Chinese</code> <code>--nl</code> / <code>--Dutch</code>      |    <code>--fr</code> / <code>--French</code> <code>--it</code> / <code>--Italian</code>    |    <code>--ja</code> / <code>--Japanese</code> <code>--ko</code> / <code>--Korean</code>     |    <code>--pt</code> / <code>--Portuguese</code> <code>--ru</code> / <code>--Russian</code>    |    <code>--es</code> / <code>--Spanish</code></p> <ul> <li>Output:</li> </ul> <p>Creates a new SeleniumBase test file with boilerplate code. If the file already exists, an error is raised. By default, uses English mode and creates a boilerplate with the 5 most common SeleniumBase methods, which are \"open\", \"type\", \"click\", \"assert_element\", and \"assert_text\". If using the basic boilerplate option, only the \"open\" method is included.</p> mkrec / record / codegen <ul> <li>Usage:</li> </ul> <pre><code>sbase mkrec [FILE.py] [OPTIONS]\nsbase codegen [FILE.py] [OPTIONS]\n</code></pre> <ul> <li>Examples:</li> </ul> <pre><code>sbase mkrec new_test.py\nsbase mkrec new_test.py --url=seleniumbase.io\nsbase codegen new_test.py\nsbase codegen new_test.py --url=wikipedia.org\n</code></pre> <ul> <li>Options:</li> </ul> <p><code>--url=URL</code>  (Sets the initial start page URL.) <code>--edge</code>  (Use Edge browser instead of Chrome.) <code>--gui</code> / <code>--headed</code>  (Use headed mode on Linux.) <code>--uc</code> / <code>--undetected</code>  (Use undetectable mode.) <code>--overwrite</code>  (Overwrite file when it exists.) <code>--behave</code>  (Also output Behave/Gherkin files.)</p> <ul> <li>Output:</li> </ul> <p>Creates a new SeleniumBase test using the Recorder. If the filename already exists, an error is raised.</p> recorder <ul> <li>Usage:</li> </ul> <pre><code>sbase recorder [OPTIONS]\n</code></pre> <ul> <li>Options:</li> </ul> <p><code>--uc</code> / <code>--undetected</code>  (Use undetectable mode.) <code>--behave</code>  (Also output Behave/Gherkin files.)</p> <ul> <li>Output:</li> </ul> <p>Launches the SeleniumBase Recorder Desktop App.</p> mkpres <ul> <li>Usage:</li> </ul> <pre><code>sbase mkpres [FILE.py] [LANG]\n</code></pre> <ul> <li>Example:</li> </ul> <pre><code>sbase mkpres new_presentation.py --en\n</code></pre> <ul> <li>Language Options:</li> </ul> <p><code>--en</code> / <code>--English</code>    |    <code>--zh</code> / <code>--Chinese</code> <code>--nl</code> / <code>--Dutch</code>      |    <code>--fr</code> / <code>--French</code> <code>--it</code> / <code>--Italian</code>    |    <code>--ja</code> / <code>--Japanese</code> <code>--ko</code> / <code>--Korean</code>     |    <code>--pt</code> / <code>--Portuguese</code> <code>--ru</code> / <code>--Russian</code>    |    <code>--es</code> / <code>--Spanish</code></p> <ul> <li>Output:</li> </ul> <p>Creates a new presentation with 3 example slides. If the file already exists, an error is raised. By default, the slides are written in English, and use \"serif\" theme with \"slide\" transition. The slides can be used as a basic boilerplate.</p> mkchart <ul> <li>Usage:</li> </ul> <pre><code>sbase mkchart [FILE.py] [LANG]\n</code></pre> <ul> <li>Example:</li> </ul> <pre><code>sbase mkchart new_chart.py --en\n</code></pre> <ul> <li>Language Options:</li> </ul> <p><code>--en</code> / <code>--English</code>    |    <code>--zh</code> / <code>--Chinese</code> <code>--nl</code> / <code>--Dutch</code>      |    <code>--fr</code> / <code>--French</code> <code>--it</code> / <code>--Italian</code>    |    <code>--ja</code> / <code>--Japanese</code> <code>--ko</code> / <code>--Korean</code>     |    <code>--pt</code> / <code>--Portuguese</code> <code>--ru</code> / <code>--Russian</code>    |    <code>--es</code> / <code>--Spanish</code></p> <ul> <li>Output:</li> </ul> <p>Creates a new SeleniumBase chart presentation. If the file already exists, an error is raised. By default, the slides are written in English, and use a \"sky\" theme with \"slide\" transition. The chart can be used as a basic boilerplate.</p> print <ul> <li>Usage:</li> </ul> <pre><code>sbase print [FILE] [OPTIONS]\n</code></pre> <ul> <li>Options:</li> </ul> <p><code>-n</code> (Add line Numbers to the rows)</p> <ul> <li>Output:</li> </ul> <p>Prints the code/text of any file with syntax-highlighting.</p> translate <ul> <li>Usage:</li> </ul> <pre><code>sbase translate [SB_FILE.py] [LANGUAGE] [ACTION]\n</code></pre> <ul> <li>Languages:</li> </ul> <p><code>--en</code> / <code>--English</code>    |    <code>--zh</code> / <code>--Chinese</code> <code>--nl</code> / <code>--Dutch</code>      |    <code>--fr</code> / <code>--French</code> <code>--it</code> / <code>--Italian</code>    |    <code>--ja</code> / <code>--Japanese</code> <code>--ko</code> / <code>--Korean</code>     |    <code>--pt</code> / <code>--Portuguese</code> <code>--ru</code> / <code>--Russian</code>    |    <code>--es</code> / <code>--Spanish</code></p> <ul> <li>Actions:</li> </ul> <p><code>-p</code> / <code>--print</code>  (Print translation output to the screen) <code>-o</code> / <code>--overwrite</code>  (Overwrite the file being translated) <code>-c</code> / <code>--copy</code>  (Copy the translation to a new <code>.py</code> file)</p> <ul> <li>Options:</li> </ul> <p><code>-n</code>  (include line Numbers when using the Print action)</p> <ul> <li>Output:</li> </ul> <p>Translates a SeleniumBase Python file into the language specified. Method calls and \"import\" lines get swapped. Both a language and an action must be specified. The <code>-p</code> action can be paired with one other action. When running with <code>-c</code> (or <code>--copy</code>), the new file name will be the original name appended with an underscore plus the 2-letter language code of the new language. (Example: Translating \"test_1.py\" into Japanese with <code>-c</code> will create a new file called \"test_1_ja.py\".)</p> extract-objects <ul> <li>Usage:</li> </ul> <pre><code>sbase extract-objects [SB_FILE.py]\n</code></pre> <ul> <li>Output:</li> </ul> <p>Creates page objects based on selectors found in a seleniumbase Python file and saves those objects to the \"page_objects.py\" file in the same folder as the tests.</p> inject-objects <ul> <li>Usage:</li> </ul> <pre><code>sbase inject-objects [SB_FILE.py] [OPTIONS]\n</code></pre> <ul> <li>Options:</li> </ul> <p><code>-c</code>, <code>--comments</code>  (Add object selectors to the comments.)</p> <ul> <li>Output:</li> </ul> <p>Takes the page objects found in the \"page_objects.py\" file and uses those to replace matching selectors in the selected seleniumbase Python file.</p> objectify <ul> <li>Usage:</li> </ul> <pre><code>sbase objectify [SB_FILE.py] [OPTIONS]\n</code></pre> <ul> <li>Options:</li> </ul> <p><code>-c</code>, <code>--comments</code>  (Add object selectors to the comments.)</p> <ul> <li>Output:</li> </ul> <p>A modified version of the file where the selectors have been replaced with variable names defined in \"page_objects.py\", supporting the Page Object Pattern. (This has the same outcome as combining <code>extract-objects</code> with <code>inject-objects</code>)</p> revert-objects <ul> <li>Usage:</li> </ul> <pre><code>sbase revert-objects [SB_FILE.py] [OPTIONS]\n</code></pre> <ul> <li>Options:</li> </ul> <p><code>-c</code>, <code>--comments</code>  (Keep existing comments for the lines.)</p> <ul> <li>Output:</li> </ul> <p>Reverts the changes made by <code>seleniumbase objectify ...</code> or <code>seleniumbase inject-objects ...</code> when run against a seleniumbase Python file. Objects will get replaced by selectors stored in the \"page_objects.py\" file.</p> convert <ul> <li>Usage:</li> </ul> <pre><code>sbase convert [WEBDRIVER_UNITTEST_FILE.py]\n</code></pre> <ul> <li>Output:</li> </ul> <p>Converts a Selenium IDE exported WebDriver unittest file into a SeleniumBase file. Adds <code>_SB</code> to the new file name while keeping the original file intact. Works with Katalon Recorder scripts. See This ReadMe for details.</p> encrypt / obfuscate <ul> <li>Usage:</li> </ul> <p><code>sbase encrypt</code>  OR  <code>sbase obfuscate</code></p> <ul> <li>Output:</li> </ul> <p>Runs the password encryption/obfuscation tool. (Where you can enter a password to encrypt/obfuscate.)</p> decrypt / unobfuscate <ul> <li>Usage:</li> </ul> <p><code>sbase decrypt</code>  OR  <code>sbase unobfuscate</code></p> <ul> <li>Output:</li> </ul> <p>Runs the password decryption/unobfuscation tool. (Where you can enter an encrypted password to decrypt.)</p> download <ul> <li>Usage:</li> </ul> <pre><code>sbase download server\n</code></pre> <ul> <li>Output:</li> </ul> <p>Downloads the Selenium Server JAR file for Grid usage. (That JAR file is required when using a Selenium Grid)</p> grid-hub <ul> <li>Usage:</li> </ul> <pre><code>sbase grid-hub {start|stop|restart} [OPTIONS]\n</code></pre> <ul> <li>Options:</li> </ul> <p><code>-v</code>, <code>--verbose</code>  (Increases verbosity of logging output.) <code>--timeout=TIMEOUT</code>  (Close idle browser windows after TIMEOUT seconds.)</p> <ul> <li>Output:</li> </ul> <p>Controls the Selenium Grid Hub server, which allows for running tests on multiple machines in parallel to speed up test runs and reduce the total time of test suite execution. You can start, restart, or stop the Grid Hub server.</p> grid-node <ul> <li>Usage:</li> </ul> <pre><code>sbase grid-node {start|stop|restart} [OPTIONS]\n</code></pre> <ul> <li>Options:</li> </ul> <p><code>--hub=HUB_IP</code> (The Grid Hub IP Address to connect to.) (Default: <code>127.0.0.1</code>) <code>-v</code>, <code>--verbose</code>  (Increases verbosity of logging output.)</p> <ul> <li>Output:</li> </ul> <p>Controls the Selenium Grid node, which serves as a worker machine for your Selenium Grid Hub server. You can start, restart, or stop the Grid node.</p> <p></p>"}, {"location": "seleniumbase/utilities/selenium_grid/ReadMe/", "title": "\ud83c\udf10 Selenium Grid", "text": "The Selenium Grid Hub: <p>The Selenium Grid Hub lets you distribute tests to run in parallel across multiple node machines. Each node machine can then run its own allocation of tests. This allows you to run a large suite of tests very quickly.</p>  Running the Selenium Grid Hub: <p>The following commands will work once you've installed seleniumbase.</p>  Downloading the Selenium Server JAR file: <pre><code>seleniumbase download server\n</code></pre> <ul> <li>(Required for using your own Selenium Grid)</li> </ul>  Grid Hub server controls: <pre><code>seleniumbase grid-hub {start|stop|restart} [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li> -v / --verbose  (Increases verbosity of logging output.)</li> <li> --timeout=TIMEOUT  (Close idle browser after TIMEOUT sec.)</li> </ul>  Grid node server controls: <pre><code>seleniumbase grid-node {start|stop|restart} --hub=[HUB_IP] [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li> -v / --verbose  (Increases verbosity of logging output.)</li> <li> --hub=[HUB_IP]  (Specifies the Grid Hub to connect to. Default: \"127.0.0.1\".)</li> </ul> <p>When the Grid Hub Console is up and running, you'll be able to find it here: http://127.0.0.1:4444/grid/console</p> <p>Now you can run your tests on the Selenium Grid:</p> <pre><code>pytest test_demo_site.py --server=IP_ADDRESS --port=4444\n</code></pre> <p>You can also run your tests on someone else's Selenium Grid to avoid managing your own. Here are some Selenium Grids that you can use (and the run command format):</p> <ul> <li>BrowserStack Selenium Grid:</li> </ul> <pre><code>pytest test_demo_site.py --server=USERNAME:KEY@hub.browserstack.com --port=80\n</code></pre> <ul> <li>Sauce Labs Selenium Grid:</li> </ul> <pre><code>pytest test_demo_site.py --server=USERNAME:KEY@ondemand.us-east-1.saucelabs.com --port=443 --protocol=https\n</code></pre> <ul> <li>Perfecto Selenium Grid:</li> </ul> <pre><code>pytest test_demo_site.py --server=USERNAME:KEY@demo.perfectomobile.com/nexperience/perfectomobile --port=443\n</code></pre> <ul> <li>TestingBot Selenium Grid:</li> </ul> <pre><code>pytest test_demo_site.py --server=USERNAME:KEY@hub.testingbot.com --port=80\n</code></pre> <ul> <li>LambdaTest Selenium Grid:</li> </ul> <pre><code>pytest test_demo_site.py --server=USERNAME:KEY@hub.lambdatest.com --port=80\n</code></pre> <ul> <li>CrossBrowserTesting Selenium Grid:</li> </ul> <pre><code>pytest test_demo_site.py --server=USERNAME:KEY@hub.crossbrowsertesting.com --port=80\n</code></pre> <p>To use a server on the <code>https</code> protocol, add <code>--protocol=https</code>: (SeleniumBase 1.65.2 and newer uses <code>https</code> automatically for <code>--port=443</code>.)</p> <pre><code>pytest test_demo_site.py --protocol=https --server=IP_ADDRESS --port=PORT\n</code></pre> <p>(For setting browser desired capabilities while running Selenium remotely, see the desired capabilities documentation and the sample files located in SeleniumBase/examples/capabilities)</p>  More info about the Selenium Grid Hub can be found here: <ul> <li>https://www.selenium.dev/documentation/grid/</li> </ul>"}]}
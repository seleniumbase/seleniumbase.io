{"config": {"indexing": "full", "lang": ["en"], "min_search_length": 3, "prebuild_index": false, "separator": "[\\s]+"}, "docs": [{"location": "", "text": "Scale your web app testing with Selenium , Python , and pytest . \ud83d\ude81 Start | \ud83c\udff0 Features | \ud83d\udcd6 Examples | \ud83c\udf9b\ufe0f Options | \ud83d\udd2e Scripts | \ud83d\udcf1 Phone \ud83d\udcd9 APIs | \ud83d\udd20 Formats | \ud83d\udcca Dashboard | \ud83d\udd34 Recorder | \ud83d\uddfe Locales | \ud83c\udf10 Grid \ud83c\udf96\ufe0f GUI | \ud83d\udcf0 TestPage | \ud83d\uddc2\ufe0f CasePlans | \ud83d\udd0e Inspector | \ud83e\uddec Hybrid | \ud83d\udcbb Farm \ud83d\udc41\ufe0f How | \ud83d\ude9d Migrate | \u267b\ufe0f Templates | \ud83d\ude89 NodeGUI | \ud83d\udcf6 Charts | \ud83d\ude8e Tours \ud83e\udd16 CI/CD | \ud83d\udd79\ufe0f JSMgr | \ud83c\ude3a Translator | \ud83c\udf9e\ufe0f Presenter | \ud83d\udec2 Boxes | \ud83d\uddbc\ufe0f Visual Run test_demo_site.py from examples/ in Chrome: cd examples/ pytest test_demo_site.py --chrome Run test_swag_labs.py from examples/ in Demo Mode: pytest test_swag_labs.py --demo \u25b6\ufe0f How is SeleniumBase different from raw Selenium? ( click to expand ) \ud83d\udca1 SeleniumBase is a Python test framework for the Selenium/WebDriver browser automation library. This framework incorporates test-runners such as pytest , nosetests , and behave to provide organized structure, test discovery, test execution, test state ( eg. passed, failed, or skipped ), and command-line options for changing default settings ( such as choosing the browser to use ). With raw Selenium, you would need to set up your own options-parser for configuring tests from the command-line. \ud83d\udca1 With raw Selenium, you have to manually download drivers ( eg. chromedriver ) before running tests. With SeleniumBase's driver manager, that's done automatically for you if the required driver isn't already on your PATH. There are also console scripts available for more control (eg. sbase get chromedriver latest to download the latest version of chromedriver to a local SeleniumBase directory). \ud83d\udca1 With raw Selenium, commands that use selectors need to specify the type of selector (eg. \"css selector\", \"button#myButton\" ). With SeleniumBase, there's auto-detection between CSS Selectors and XPath, which means you don't need to specify the type of selector in your commands ( but optionally you could ). \ud83d\udca1 SeleniumBase methods often perform multiple actions in a single method call. For example, self.type(selector,text) does the following: 1. Waits for the element to be visible. 2. Waits for the element to be interactive. 3. Clears the text field. 4. Types in the new text. 5. Presses Enter/Submit if the text ends in \"\\n\". With raw Selenium, those actions require multiple method calls. \ud83d\udca1 SeleniumBase uses default timeout values when not set, which means that methods automatically wait for elements to appear ( up to the timeout limit ) before failing: \u2705 self.click(\"button\") With raw Selenium, methods would fail instantly ( by default ) if an element needed more time to load: \u274c self.driver.find_element(by=\"css selector\", value=\"button\").click() (Reliable code is better than unreliable code.) \ud83d\udca1 SeleniumBase lets you change the explicit timeout values of methods: \u2705 self.click(\"button\",timeout=10) With raw Selenium, that requires more code: \u274c WebDriverWait(driver,10).until(EC.element_to_be_clickable(\"css selector\", \"button\")).click() (Simple code is better than complex code.) \ud83d\udca1 SeleniumBase gives you clean error output when a test fails. With raw Selenium, error messages can get very messy. \ud83d\udca1 SeleniumBase gives you the option to generate a dashboard and reports for tests. It also saves screenshots from failing tests to the ./latest_logs/ folder. Raw Selenium does not have these options out-of-the-box. \ud83d\udca1 SeleniumBase includes desktop GUI apps for running tests, such as SeleniumBase Commander for pytest , and SeleniumBase Behave GUI. \ud83d\udca1 SeleniumBase has its own Recorder & Test Generator that can create tests from manual browser actions. SeleniumBase also has many other useful tools and console scripts for getting things done quickly. ( See the documentation for more details! ) Here's a 2FA/MFA app that can be tested with SeleniumBase: Here are a few scripts to test that app with SeleniumBase: \ud83d\udcd8\ud83d\udcdd An example test with the BaseCase class. Runs with pytest or nosetests . ( Learn more ) from seleniumbase import BaseCase class TestMFALogin ( BaseCase ): def test_mfa_login ( self ): self . open ( \"https://seleniumbase.io/realworld/login\" ) self . type ( \"#username\" , \"demo_user\" ) self . type ( \"#password\" , \"secret_pass\" ) self . enter_mfa_code ( \"#totpcode\" , \"GAXG2MTEOR3DMMDG\" ) # 6-digit self . assert_element ( \"img#image1\" ) self . assert_exact_text ( \"Welcome!\" , \"h1\" ) self . click ( 'a:contains(\"This Page\")' ) self . save_screenshot_to_logs () \ud83d\udcd7\ud83d\udcdd An example test with the sb pytest fixture. Runs with pytest . def test_mfa_login ( sb ): sb . open ( \"https://seleniumbase.io/realworld/login\" ) sb . type ( \"#username\" , \"demo_user\" ) sb . type ( \"#password\" , \"secret_pass\" ) sb . enter_mfa_code ( \"#totpcode\" , \"GAXG2MTEOR3DMMDG\" ) # 6-digit sb . assert_element ( \"img#image1\" ) sb . assert_exact_text ( \"Welcome!\" , \"h1\" ) sb . click ( 'a:contains(\"This Page\")' ) sb . save_screenshot_to_logs () \ud83d\udcd5\ud83d\udcdd An example test with behave-BDD Gherkin structure. Runs with behave . ( Learn more ) Feature: SeleniumBase scenarios for the RealWorld App Scenario: Verify RealWorld App Given Open \" seleniumbase.io/realworld/login \" When Type \" demo_user \" into \" #username \" And Type \" secret_pass \" into \" #password \" And Do MFA \" GAXG2MTEOR3DMMDG \" into \" #totpcode \" Then Assert element \" img#image1 \" And Assert exact text \" Welcome! \" in \" h1 \" And Click 'a:contains(\" This Page \")' And Save screenshot to logs Python Setup: \ud83d\udd35 Add Python and Git to your System PATH. \ud83d\udd35 Using a Python virtual env is recommended. Install SeleniumBase: You can install seleniumbase from GitHub or PyPI : \ud83d\udd35 Installing seleniumbase from a GitHub clone: git clone https://github.com/seleniumbase/SeleniumBase.git cd SeleniumBase/ pip install . # Normal installation pip install -e . # Editable install (When using a virtual env, the Editable install is faster.) To upgrade an existing install from a GitHub clone: git pull # To pull the latest version pip install -e . # Or \"pip install .\" \ud83d\udd35 Installing seleniumbase from PyPI: pip install seleniumbase (Add --upgrade OR -U to upgrade SeleniumBase.) (Add --force-reinstall to upgrade dependencies.) (Use pip3 if multiple versions of Python are present.) To upgrade an existing install from PyPI: pip install -U seleniumbase \ud83d\udd35 Type seleniumbase or sbase to verify that SeleniumBase was installed successfully: ______ __ _ ____ / ____/__ / /__ ____ ( _ ) _ ______ ___ / _ \\_ ___ ________ \\_ _ \\/ _ \\/ / _ \\/ __ \\/ / / / / __ ` __ \\ / /_ ) / __ \\/ ___/ _ \\ ___/ / __/ / __/ / / / / /_/ / / / / / // /_ ) / ( _/ /__ / __/ /____/ \\_ __/_/ \\_ __/_/ /_/_/ \\_ _,_/_/ /_/ /_//_____/ \\_ _,_/____/ \\_ __/ ------------------------------------------------------------------ * USAGE: \"seleniumbase [COMMAND] [PARAMETERS]\" * OR: \"sbase [COMMAND] [PARAMETERS]\" COMMANDS: get / install [ DRIVER ] [ OPTIONS ] methods ( List common Python methods ) options ( List common pytest options ) behave-options ( List common behave options ) gui / commander [ OPTIONAL PATH or TEST FILE ] behave-gui ( SBase Commander for Behave ) caseplans [ OPTIONAL PATH or TEST FILE ] mkdir [ DIRECTORY ] [ OPTIONS ] mkfile [ FILE.py ] [ OPTIONS ] mkrec / codegen [ FILE.py ] [ OPTIONS ] recorder ( Open Recorder Desktop App. ) record ( If args: mkrec. Else: App. ) mkpres [ FILE.py ] [ LANG ] mkchart [ FILE.py ] [ LANG ] print [ FILE ] [ OPTIONS ] translate [ SB_FILE.py ] [ LANG ] [ ACTION ] convert [ WEBDRIVER_UNITTEST_FILE.py ] extract-objects [ SB_FILE.py ] inject-objects [ SB_FILE.py ] [ OPTIONS ] objectify [ SB_FILE.py ] [ OPTIONS ] revert-objects [ SB_FILE.py ] [ OPTIONS ] encrypt / obfuscate decrypt / unobfuscate download server ( Get Selenium Grid JAR file ) grid-hub [ start | stop ] [ OPTIONS ] grid-node [ start | stop ] --hub =[ HOST/IP ] * ( EXAMPLE: \"sbase get chromedriver latest\" ) * Type \"sbase help [COMMAND]\" for specific command info. For info on all commands, type: \"seleniumbase --help\" . Use \"pytest\" for running tests. Downloading web drivers: \u2705 SeleniumBase automatically downloads web drivers as needed, such as chromedriver and geckodriver (Firefox). \u2705 To manually download a webdriver, see Console Scripts OR Webdriver Installation . Running tests: \ud83d\udd35 If you've cloned SeleniumBase, you can run tests from the examples/ folder. Here's my_first_test.py : cd examples/ pytest my_first_test.py (Chrome is the default browser if not specified with --browser . On Linux, --headless is the default behavior.) Here's the code for my_first_test.py : from seleniumbase import BaseCase class MyTestClass ( BaseCase ): def test_swag_labs ( self ): self . open ( \"https://www.saucedemo.com\" ) self . type ( \"#user-name\" , \"standard_user\" ) self . type ( \"#password\" , \"secret_sauce \\n \" ) self . assert_element ( \"#inventory_container\" ) self . assert_text ( \"PRODUCTS\" , \"span.title\" ) self . click ( 'button[name*=\"backpack\"]' ) self . click ( \"#shopping_cart_container a\" ) self . assert_text ( \"YOUR CART\" , \"span.title\" ) self . assert_text ( \"Backpack\" , \"div.cart_item\" ) self . click ( \"button#checkout\" ) self . type ( \"#first-name\" , \"SeleniumBase\" ) self . type ( \"#last-name\" , \"Automation\" ) self . type ( \"#postal-code\" , \"77123\" ) self . click ( \"input#continue\" ) self . assert_text ( \"CHECKOUT: OVERVIEW\" ) self . assert_text ( \"Backpack\" , \"div.cart_item\" ) self . click ( \"button#finish\" ) self . assert_exact_text ( \"THANK YOU FOR YOUR ORDER\" , \"h2\" ) self . assert_element ( 'img[alt=\"Pony Express\"]' ) self . js_click ( \"a#logout_sidebar_link\" ) By default, CSS Selectors are used for finding page elements. If you're new to CSS Selectors, games like CSS Diner can help you learn. For more reading, here's an advanced guide on CSS attribute selectors . Here are some common SeleniumBase methods that you might find in tests: self . open ( url ) # Navigate the browser window to the URL. self . type ( selector , text ) # Update the field with the text. self . click ( selector ) # Click the element with the selector. self . click_link ( link_text ) # Click the link containing text. self . go_back () # Navigate back to the previous URL. self . select_option_by_text ( dropdown_selector , option ) self . hover_and_click ( hover_selector , click_selector ) self . drag_and_drop ( drag_selector , drop_selector ) self . get_text ( selector ) # Get the text from the element. self . get_current_url () # Get the URL of the current page. self . get_page_source () # Get the HTML of the current page. self . get_attribute ( selector , attribute ) # Get element attribute. self . get_title () # Get the title of the current page. self . switch_to_frame ( frame ) # Switch into the iframe container. self . switch_to_default_content () # Leave the iframe container. self . open_new_window () # Open a new window in the same browser. self . switch_to_window ( window ) # Switch to the browser window. self . switch_to_default_window () # Switch to the original window. self . get_new_driver ( OPTIONS ) # Open a new driver with OPTIONS. self . switch_to_driver ( driver ) # Switch to the browser driver. self . switch_to_default_driver () # Switch to the original driver. self . wait_for_element ( selector ) # Wait until element is visible. self . is_element_visible ( selector ) # Return element visibility. self . is_text_visible ( text , selector ) # Return text visibility. self . sleep ( seconds ) # Do nothing for the given amount of time. self . save_screenshot ( name ) # Save a screenshot in .png format. self . assert_element ( selector ) # Verify the element is visible. self . assert_text ( text , selector ) # Verify text in the element. self . assert_title ( title ) # Verify the title of the web page. self . assert_downloaded_file ( file ) # Verify file was downloaded. self . assert_no_404_errors () # Verify there are no broken links. self . assert_no_js_errors () # Verify there are no JS errors. \ud83d\udd35 For the complete list of SeleniumBase methods, see: Method Summary Learn More: \u2705 Supports all major web browsers and operating systems: Browsers: Chrome, Edge, Firefox, IE, and Safari. Systems: Linux, macOS, Windows, and Ubuntu. \u2705 Works on popular CI/CD platforms: \u2705 Automatic WebDriver Abilities: SeleniumBase automatically handles common WebDriver actions such as spinning up web browsers and saving screenshots during test failures. ( Read more about customizing test runs . ) \u2705 Simplified Code: SeleniumBase uses simple syntax for commands. Example: self . type ( \"input\" , \"dogs \\n \" ) SeleniumBase tests can be run with both pytest and nosetests , but using pytest is recommended. ( chrome is the default browser if not specified.) pytest my_first_test.py --chrome nosetests test_suite.py --firefox \u2705 Automatic Test Discovery: All Python methods that start with test_ will be run automatically when running pytest or nosetests on Python files. You can also be more specific on what to run within a file by using the following: ( Note that the syntax is different for pytest vs nosetests. ) pytest [ FILE_NAME.py ] :: [ CLASS_NAME ] :: [ METHOD_NAME ] nosetests [ FILE_NAME.py ] : [ CLASS_NAME ] . [ METHOD_NAME ] \u2705 No More Flaky Tests: SeleniumBase methods automatically wait for page elements to finish loading before interacting with them ( up to a timeout limit ). This means you no longer need random time.sleep() statements in your scripts. \u2705 Automated/Manual Hybrid Mode: SeleniumBase includes a solution called MasterQA , which speeds up manual testing by having automation perform all the browser actions while the manual tester handles validation. \u2705 Feature-Rich: For a full list of SeleniumBase features, Click Here . Detailed Instructions: \ud83d\udd35 You can use Demo Mode to help you see what a test is doing: If a test is moving too fast for your eyes, run it in Demo Mode by adding --demo on the command-line, which pauses the browser briefly between actions, highlights page elements being acted on, and displays assertions: pytest my_first_test.py --demo \ud83d\udd35 Pytest includes test discovery. If you don't specify a specific file or folder to run from, pytest will search all subdirectories automatically for tests to run based on the following matching criteria: Python filenames that start with test_ or end with _test.py . Python methods that start with test_ . The Python class name can be anything since SeleniumBase's BaseCase class inherits from the unittest.TestCase class. You can see which tests are getting discovered by pytest by using: pytest --collect-only -q \ud83d\udd35 You can use the following calls in your scripts to help you debug issues: import time ; time . sleep ( 5 ) # Makes the test wait and do nothing for 5 seconds. import ipdb ; ipdb . set_trace () # Enter debugging mode. n = next, c = continue, s = step. import pytest ; pytest . set_trace () # Enter debugging mode. n = next, c = continue, s = step. \ud83d\udd35 To pause an active test that throws an exception or error, add --pdb : pytest my_first_test.py --pdb The code above will leave your browser window open in case there's a failure. (ipdb commands: 'n', 'c', 's' => next, continue, step). \ud83d\udd35 Here are some useful command-line options that come with pytest : -v # Verbose mode. Prints the full name of each test run. -q # Quiet mode. Print fewer details in the console output when running tests. -x # Stop running the tests after the first failure is reached. --html = report.html # Creates a detailed pytest-html report after tests finish. --collect-only | --co # Show what tests would get run. (Without running them) -n = NUM # Multithread the tests using that many threads. (Speed up test runs!) -s # See print statements. (Should be on by default with pytest.ini present.) --junit-xml = report.xml # Creates a junit-xml report after tests finish. --pdb # If a test fails, enter Post Mortem Debug Mode. (Don't use with CI!) --trace # Enter Debug Mode at the beginning of each test. (Don't use with CI!) -m = MARKER # Run tests with the specified pytest marker. \ud83d\udd35 SeleniumBase provides additional pytest command-line options for tests: --browser = BROWSER # (The web browser to use. Default: \"chrome\".) --chrome # (Shortcut for \"--browser=chrome\". On by default.) --edge # (Shortcut for \"--browser=edge\".) --firefox # (Shortcut for \"--browser=firefox\".) --ie # (Shortcut for \"--browser=ie\".) --opera # (Shortcut for \"--browser=opera\".) --safari # (Shortcut for \"--browser=safari\".) --cap-file = FILE # (The web browser's desired capabilities to use.) --cap-string = STRING # (The web browser's desired capabilities to use.) --settings-file = FILE # (Override default SeleniumBase settings.) --env = ENV # (Set the test env. Access with \"self.env\" in tests.) --account = STR # (Set account. Access with \"self.account\" in tests.) --data = STRING # (Extra test data. Access with \"self.data\" in tests.) --var1 = STRING # (Extra test data. Access with \"self.var1\" in tests.) --var2 = STRING # (Extra test data. Access with \"self.var2\" in tests.) --var3 = STRING # (Extra test data. Access with \"self.var3\" in tests.) --variables = DICT # (Extra test data. Access with \"self.variables\".) --user-data-dir = DIR # (Set the Chrome user data directory to use.) --protocol = PROTOCOL # (The Selenium Grid protocol: http|https.) --server = SERVER # (The Selenium Grid server/IP used for tests.) --port = PORT # (The Selenium Grid port used by the test server.) --proxy = SERVER:PORT # (Connect to a proxy server:port for tests.) --proxy = USERNAME:PASSWORD@SERVER:PORT # (Use authenticated proxy server.) --proxy-bypass-list = STRING # (\";\"-separated hosts to bypass, Eg \"*.foo.com\") --proxy-pac-url = URL # (Connect to a proxy server using a PAC_URL.pac file.) --proxy-pac-url = USERNAME:PASSWORD@URL # (Authenticated proxy with PAC URL.) --agent = STRING # (Modify the web browser's User-Agent string.) --mobile # (Use the mobile device emulator while running tests.) --metrics = STRING # (Set mobile metrics: \"CSSWidth,CSSHeight,PixelRatio\".) --chromium-arg = \"ARG=N,ARG2\" # (Set Chromium args, \",\"-separated, no spaces.) --firefox-arg = \"ARG=N,ARG2\" # (Set Firefox args, comma-separated, no spaces.) --firefox-pref = SET # (Set a Firefox preference:value set, comma-separated.) --extension-zip = ZIP # (Load a Chrome Extension .zip|.crx, comma-separated.) --extension-dir = DIR # (Load a Chrome Extension directory, comma-separated.) --pls = PLS # (Set pageLoadStrategy on Chrome: \"normal\", \"eager\", or \"none\".) --headless # (Run tests in headless mode. The default arg on Linux OS.) --headed # (Run tests in headed/GUI mode on Linux OS.) --xvfb # (Run tests using the Xvfb virtual display server on Linux OS.) --locale = LOCALE_CODE # (Set the Language Locale Code for the web browser.) --interval = SECONDS # (The autoplay interval for presentations & tour steps) --start-page = URL # (The starting URL for the web browser when tests begin.) --archive-logs # (Archive existing log files instead of deleting them.) --archive-downloads # (Archive old downloads instead of deleting them.) --skip-js-waits # (Skip waiting for readyState to be complete or Angular.) --time-limit = SECONDS # (Safely fail any test that exceeds the time limit.) --slow # (Slow down the automation. Faster than using Demo Mode.) --demo # (Slow down and visually see test actions as they occur.) --demo-sleep = SECONDS # (Set the wait time after Slow & Demo Mode actions.) --highlights = NUM # (Number of highlight animations for Demo Mode actions.) --message-duration = SECONDS # (The time length for Messenger alerts.) --check-js # (Check for JavaScript errors after page loads.) --ad-block # (Block some types of display ads from loading.) --block-images # (Block images from loading during tests.) --do-not-track # (Indicate to websites that you don't want to be tracked.) --verify-delay = SECONDS # (The delay before MasterQA verification checks.) --recorder # (Enables the Recorder for turning browser actions into code.) --rec-behave # (Same as Recorder Mode, but also generates behave-gherkin.) --rec-sleep # (If the Recorder is enabled, also records self.sleep calls.) --rec-print # (If the Recorder is enabled, prints output after tests end.) --disable-csp # (Disable the Content Security Policy of websites.) --disable-ws # (Disable Web Security on Chromium-based browsers.) --enable-ws # (Enable Web Security on Chromium-based browsers.) --enable-sync # (Enable \"Chrome Sync\".) --use-auto-ext # (Use Chrome's automation extension.) --undetected # (Use an undetectable chromedriver to evade bot-detection.) --remote-debug # (Enable Chrome's Remote Debugger on http://localhost:9222) --final-debug # (Enter Debug Mode after each test ends. Don't use with CI!) --dashboard # (Enable the SeleniumBase Dashboard. Saved at: dashboard.html) --dash-title = STRING # (Set the title shown for the generated dashboard.) --swiftshader # (Use Chrome's \"--use-gl=swiftshader\" feature.) --incognito # (Enable Chrome's Incognito mode.) --guest # (Enable Chrome's Guest mode.) --devtools # (Open Chrome's DevTools when the browser opens.) --reuse-session | --rs # (Reuse the browser session between tests.) --crumbs # (Delete all cookies between tests reusing a session.) --disable-beforeunload # (Disable the \"beforeunload\" event on Chrome.) --window-size = WIDTH,HEIGHT # (Set the browser's starting window size.) --maximize # (Start tests with the browser window maximized.) --screenshot # (Save a screenshot at the end of each test.) --visual-baseline # (Set the visual baseline for Visual/Layout tests.) --external-pdf # (Set Chrome \"plugins.always_open_pdf_externally\": True.) --timeout-multiplier = MULTIPLIER # (Multiplies the default timeout values.) --list-fail-page # (After each failing test, list the URL of the failure.) (For more details, see the full list of command-line options here .) \ud83d\udd35 During test failures, logs and screenshots from the most recent test run will get saved to the latest_logs/ folder. Those logs will get moved to archived_logs/ if you add --archive_logs to command-line options, or have ARCHIVE_EXISTING_LOGS set to True in settings.py , otherwise log files with be cleaned up at the start of the next test run. The test_suite.py collection contains tests that fail on purpose so that you can see how logging works. cd examples/ pytest test_suite.py --browser = chrome pytest test_suite.py --browser = firefox An easy way to override seleniumbase/config/settings.py is by using a custom settings file. Here's the command-line option to add to tests: (See examples/custom_settings.py ) --settings_file=custom_settings.py (Settings include default timeout values, a two-factor auth key, DB credentials, S3 credentials, and other important settings used by tests.) \ud83d\udd35 To pass additional data from the command-line to tests, add --data=\"ANY STRING\" . Inside your tests, you can use self.data to access that. Test Directory Configuration: \ud83d\udd35 When running tests with pytest , you'll want a copy of pytest.ini in your root folders. When running tests with nosetests , you'll want a copy of setup.cfg in your root folders. These files specify default configuration details for tests. Folders should also include a blank __init__.py file, which allows your tests to import files from that folder. \ud83d\udd35 sbase mkdir DIR creates a folder with config files and sample tests: sbase mkdir ui_tests That new folder will have these files: ui_tests/ \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 my_first_test.py \u251c\u2500\u2500 parameterized_test.py \u251c\u2500\u2500 pytest.ini \u251c\u2500\u2500 requirements.txt \u251c\u2500\u2500 setup.cfg \u251c\u2500\u2500 test_demo_site.py \u2514\u2500\u2500 boilerplates/ \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 base_test_case.py \u251c\u2500\u2500 boilerplate_test.py \u251c\u2500\u2500 classic_obj_test.py \u251c\u2500\u2500 page_objects.py \u251c\u2500\u2500 sb_fixture_test.py \u2514\u2500\u2500 samples/ \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 google_objects.py \u251c\u2500\u2500 google_test.py \u251c\u2500\u2500 sb_swag_test.py \u2514\u2500\u2500 swag_labs_test.py ProTip\u2122: You can also create a boilerplate folder without any sample tests in it by adding -b or --basic to the sbase mkdir command: sbase mkdir ui_tests --basic That new folder will have these files: ui_tests/ \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 pytest.ini \u251c\u2500\u2500 requirements.txt \u2514\u2500\u2500 setup.cfg Of those files, the pytest.ini config file is the most important, followed by a blank __init__.py file. There's also a setup.cfg file (only needed for nosetests). Finally, the requirements.txt file can be used to help you install seleniumbase into your environments (if it's not already installed). Log files from failed tests: Let's try an example of a test that fails: \"\"\" test_fail.py \"\"\" from seleniumbase import BaseCase class MyTestClass ( BaseCase ): def test_find_army_of_robots_on_xkcd_desert_island ( self ): self . open ( \"https://xkcd.com/731/\" ) self . assert_element ( \"div#ARMY_OF_ROBOTS\" , timeout = 1 ) # This should fail You can run it from the examples/ folder like this: pytest test_fail.py \ud83d\udd35 You'll notice that a logs folder, \"latest_logs\", was created to hold information about the failing test, and screenshots. During test runs, past results get moved to the archived_logs folder if you have ARCHIVE_EXISTING_LOGS set to True in settings.py , or if your run tests with --archive-logs . If you choose not to archive existing logs, they will be deleted and replaced by the logs of the latest test run. The SeleniumBase Dashboard: \ud83d\udd35 The --dashboard option for pytest generates a SeleniumBase Dashboard located at dashboard.html , which updates automatically as tests run and produce results. Example: pytest --dashboard --rs --headless \ud83d\udd35 Additionally, you can host your own SeleniumBase Dashboard Server on a port of your choice. Here's an example of that using Python 3's http.server : python -m http.server 1948 \ud83d\udd35 Now you can navigate to http://localhost:1948/dashboard.html in order to view the dashboard as a web app. This requires two different terminal windows: one for running the server, and another for running the tests, which should be run from the same directory. (Use CTRL+C to stop the http server.) \ud83d\udd35 Here's a full example of what the SeleniumBase Dashboard may look like: pytest test_suite.py --dashboard --rs --headless Creating Visual Test Reports: Pytest Reports: \ud83d\udd35 Using --html=report.html gives you a fancy report of the name specified after your test suite completes. pytest test_suite.py --html = report.html \ud83d\udd35 When combining pytest html reports with SeleniumBase Dashboard usage, the pie chart from the Dashboard will get added to the html report. Additionally, if you set the html report URL to be the same as the Dashboard URL when also using the dashboard, (example: --dashboard --html=dashboard.html ), then the Dashboard will become an advanced html report when all the tests complete. \ud83d\udd35 Here's an example of an upgraded html report: pytest test_suite.py --dashboard --html = report.html If viewing pytest html reports in Jenkins , you may need to configure Jenkins settings for the html to render correctly. This is due to Jenkins CSP changes . You can also use --junit-xml=report.xml to get an xml report instead. Jenkins can use this file to display better reporting for your tests. pytest test_suite.py --junit-xml = report.xml Nosetest Reports: The --report option gives you a fancy report after your test suite completes. nosetests test_suite.py --report (NOTE: You can add --show-report to immediately display Nosetest reports after the test suite completes. Only use --show-report when running tests locally because it pauses the test run.) Behave Dashboard & Reports: (The behave_bdd/ folder can be found in the examples/ folder.) behave behave_bdd/features/ -D dashboard -D headless You can also use --junit to get .xml reports for each Behave feature. Jenkins can use these files to display better reporting for your tests. behave behave_bdd/features/ --junit -D rs -D headless Allure Reports: See: https://docs.qameta.io/allure/ SeleniumBase no longer includes allure-pytest as part of installed dependencies. If you want to use it, install it first: pip install allure-pytest Now your tests can create Allure results files, which can be processed by Allure Reports. pytest test_suite.py --alluredir = allure_results Using a Proxy Server: If you wish to use a proxy server for your browser tests (Chromium or Firefox), you can add --proxy=IP_ADDRESS:PORT as an argument on the command line. pytest proxy_test.py --proxy = IP_ADDRESS:PORT If the proxy server that you wish to use requires authentication, you can do the following (Chromium only): pytest proxy_test.py --proxy = USERNAME:PASSWORD@IP_ADDRESS:PORT SeleniumBase also supports SOCKS4 and SOCKS5 proxies: pytest proxy_test.py --proxy = \"socks4://IP_ADDRESS:PORT\" pytest proxy_test.py --proxy = \"socks5://IP_ADDRESS:PORT\" To make things easier, you can add your frequently-used proxies to PROXY_LIST in proxy_list.py , and then use --proxy=KEY_FROM_PROXY_LIST to use the IP_ADDRESS:PORT of that key. pytest proxy_test.py --proxy = proxy1 Changing the User-Agent: \ud83d\udd35 If you wish to change the User-Agent for your browser tests (Chromium and Firefox only), you can add --agent=\"USER AGENT STRING\" as an argument on the command-line. pytest user_agent_test.py --agent = \"Mozilla/5.0 (Nintendo 3DS; U; ; en) Version/1.7412.EU\" Handling Pop-Up / Pop Up Alerts: \ud83d\udd35 self.accept_alert() automatically waits for and accepts alert pop-ups. self.dismiss_alert() automatically waits for and dismisses alert pop-ups. On occasion, some methods like self.click(SELECTOR) might dismiss a pop-up on its own because they call JavaScript to make sure that the readyState of the page is complete before advancing. If you're trying to accept a pop-up that got dismissed this way, use this workaround: Call self.find_element(SELECTOR).click() instead, (which will let the pop-up remain on the screen), and then use self.accept_alert() to accept the pop-up ( more on that here ). If pop-ups are intermittent, wrap code in a try/except block. Building Guided Tours for Websites: \ud83d\udd35 Learn about SeleniumBase Interactive Walkthroughs (in the examples/tour_examples/ folder). It's great for prototyping a website onboarding experience. Production Environments & Integrations: \u25b6\ufe0f Here are some things you can do to set up a production environment for your testing. ( click to expand ) You can set up a Jenkins build server for running tests at regular intervals. For a real-world Jenkins example of headless browser automation in action, check out the SeleniumBase Jenkins example on Azure or the SeleniumBase Jenkins example on Google Cloud . You can use the Selenium Grid to scale your testing by distributing tests on several machines with parallel execution. To do this, check out the SeleniumBase selenium_grid folder , which should have everything you need, including the Selenium Grid ReadMe , which will help you get started. If you're using the SeleniumBase MySQL feature to save results from tests running on a server machine, you can install MySQL Workbench to help you read & write from your DB more easily. If you're using AWS, you can set up an Amazon S3 account for saving log files and screenshots from your tests. To activate this feature, modify settings.py with connection details in the S3 section, and add --with-s3-logging on the command-line when running your tests. Here's an example of running tests with some additional features enabled: pytest [ YOUR_TEST_FILE.py ] --with-db-reporting --with-s3-logging Detailed Method Specifications and Examples: \ud83d\udd35 Navigating to a web page: (and related commands) self . open ( \"https://xkcd.com/378/\" ) # This method opens the specified page. self . go_back () # This method navigates the browser to the previous page. self . go_forward () # This method navigates the browser forward in history. self . refresh_page () # This method reloads the current page. self . get_current_url () # This method returns the current page URL. self . get_page_source () # This method returns the current page source. ProTip\u2122: You can use the self.get_page_source() method with Python's find() command to parse through HTML to find something specific. (For more advanced parsing, see the BeautifulSoup example .) source = self . get_page_source () head_open_tag = source . find ( '<head>' ) head_close_tag = source . find ( '</head>' , head_open_tag ) everything_inside_head = source [ head_open_tag + len ( '<head>' ): head_close_tag ] \ud83d\udd35 Clicking: To click an element on the page: self . click ( \"div#my_id\" ) ProTip\u2122: In most web browsers, you can right-click on a page and select Inspect Element to see the CSS selector details that you'll need to create your own scripts. \ud83d\udd35 Typing Text: self.type(selector, text) # updates the text from the specified element with the specified value. An exception is raised if the element is missing or if the text field is not editable. Example: self . type ( \"input#id_value\" , \"2012\" ) You can also use self.add_text() or the WebDriver .send_keys() command, but those won't clear the text box first if there's already text inside. If you want to type in special keys, that's easy too. Here's an example: from selenium.webdriver.common.keys import Keys self . find_element ( \"textarea\" ) . send_keys ( Keys . SPACE + Keys . BACK_SPACE + ' \\n ' ) # The backspace should cancel out the space, leaving you with the newline \ud83d\udd35 Getting the text from an element on a page: text = self . get_text ( \"header h2\" ) \ud83d\udd35 Getting the attribute value from an element on a page: attribute = self . get_attribute ( \"#comic img\" , \"title\" ) \ud83d\udd35 Asserting existence of an element on a page within some number of seconds: self . wait_for_element_present ( \"div.my_class\" , timeout = 10 ) (NOTE: You can also use: self.assert_element_present(ELEMENT) ) \ud83d\udd35 Asserting visibility of an element on a page within some number of seconds: self . wait_for_element_visible ( \"a.my_class\" , timeout = 5 ) (NOTE: The short versions of that are self.find_element(ELEMENT) and self.assert_element(ELEMENT) . The find_element() version returns the element.) Since the line above returns the element, you can combine that with .click() as shown below: self . find_element ( \"a.my_class\" , timeout = 5 ) . click () # But you're better off using the following statement, which does the same thing self . click ( \"a.my_class\" ) # DO IT THIS WAY! ProTip\u2122: You can use dots to signify class names (Ex: div.class_name ) as a simplified version of div[class=\"class_name\"] within a CSS selector. You can also use *= to search for any partial value in a CSS selector as shown below: self . click ( 'a[name*=\"partial_name\"]' ) \ud83d\udd35 Asserting visibility of text inside an element on a page within some number of seconds: self . assert_text ( \"Make it so!\" , \"div#trek div.picard div.quotes\" ) self . assert_text ( \"Tea. Earl Grey. Hot.\" , \"div#trek div.picard div.quotes\" , timeout = 3 ) (NOTE: self.find_text(TEXT, ELEMENT) and self.wait_for_text(TEXT, ELEMENT) also do this. For backwards compatibility, older method names were kept, but the default timeout may be different.) \ud83d\udd35 Asserting Anything: self . assert_true ( myvar1 == something ) self . assert_equal ( var1 , var2 ) \ud83d\udd35 Useful Conditional Statements: (with creative examples in action) is_element_visible(selector) # is an element visible on a page if self . is_element_visible ( 'div#warning' ): print ( \"Red Alert: Something bad might be happening!\" ) is_element_present(selector) # is an element present on a page if self . is_element_present ( 'div#top_secret img.tracking_cookie' ): self . contact_cookie_monster () # Not a real SeleniumBase method else : current_url = self . get_current_url () self . contact_the_nsa ( url = current_url , message = \"Dark Zone Found\" ) # Not a real SeleniumBase method Another example: def is_there_a_cloaked_klingon_ship_on_this_page (): if self . is_element_present ( \"div.ships div.klingon\" ): return not self . is_element_visible ( \"div.ships div.klingon\" ) return False \u25b6\ufe0f is_text_visible(text, selector) # is text visible on a page ( click to expand ) def get_mirror_universe_captain_picard_superbowl_ad ( superbowl_year ): selector = \"div.superbowl_ %s div.commercials div.transcript div.picard\" % superbowl_year if self . is_text_visible ( \"Yes, it was I who summoned you all here.\" , selector ): return \"Picard Paramount+ Superbowl Ad 2020\" elif self . is_text_visible ( \"Commander, signal the following: Our Network is Secure!\" ): return \"Picard Mirror Universe iboss Superbowl Ad 2018\" elif self . is_text_visible ( \"For the Love of Marketing and Earl Grey Tea!\" , selector ): return \"Picard Mirror Universe HubSpot Superbowl Ad 2015\" elif self . is_text_visible ( \"Delivery Drones... Engage\" , selector ): return \"Picard Mirror Universe Amazon Superbowl Ad 2015\" elif self . is_text_visible ( \"Bing it on Screen!\" , selector ): return \"Picard Mirror Universe Microsoft Superbowl Ad 2015\" elif self . is_text_visible ( \"OK Glass, Make it So!\" , selector ): return \"Picard Mirror Universe Google Superbowl Ad 2015\" elif self . is_text_visible ( \"Number One, I've Never Seen Anything Like It.\" , selector ): return \"Picard Mirror Universe Tesla Superbowl Ad 2015\" elif self . is_text_visible ( \"Let us make sure history never forgets the name ... Facebook\" , selector ): return \"Picard Mirror Universe Facebook Superbowl Ad 2015\" elif self . is_text_visible ( \"\"\"With the first link, the chain is forged. The first speech censored, the first thought forbidden, the first freedom denied, chains us all irrevocably.\"\"\" , selector ): return \"Picard Mirror Universe Wikimedia Superbowl Ad 2015\" else : raise Exception ( \"Reports of my assimilation are greatly exaggerated.\" ) \ud83d\udd35 Switching Tabs: If your test opens up a new tab/window, you can switch to it. (SeleniumBase automatically switches to new tabs that don't open to about:blank URLs.) self . switch_to_window ( 1 ) # This switches to the new tab (0 is the first one) \ud83d\udd35 ProTip\u2122: iframes follow the same principle as new windows - you need to specify the iframe if you want to take action on something in there self . switch_to_frame ( 'ContentManagerTextBody_ifr' ) # Now you can act inside the iframe # .... Do something cool (here) self . switch_to_default_content () # Exit the iframe when you're done \ud83d\udd35 Executing Custom jQuery Scripts: jQuery is a powerful JavaScript library that allows you to perform advanced actions in a web browser. If the web page you're on already has jQuery loaded, you can start executing jQuery scripts immediately. You'd know this because the web page would contain something like the following in the HTML: < script src = \"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js\" ></ script > \ud83d\udd35 It's OK if you want to use jQuery on a page that doesn't have it loaded yet. To do so, run the following command first: self . activate_jquery () \u25b6\ufe0f Here are some examples of using jQuery in your scripts. ( click to expand ) self . execute_script ( \"jQuery, window.scrollTo(0, 600)\" ) # Scrolling the page self . execute_script ( \"jQuery('#annoying-widget').hide()\" ) # Hiding elements on a page self . execute_script ( \"jQuery('#hidden-widget').show(0)\" ) # Showing hidden elements on a page self . execute_script ( \"jQuery('#annoying-button a').remove()\" ) # Removing elements on a page self . execute_script ( \"jQuery(' %s ').mouseover()\" % ( mouse_over_item )) # Mouse-over elements on a page self . execute_script ( \"jQuery('input#the_id').val('my_text')\" ) # Fast text input on a page self . execute_script ( \"jQuery('div#dropdown a.link').click()\" ) # Click elements on a page self . execute_script ( \"return jQuery('div#amazing')[0].text\" ) # Returns the css \"text\" of the element given self . execute_script ( \"return jQuery('textarea')[2].value\" ) # Returns the css \"value\" of the 3rd textarea element on the page (Most of the above commands can be done directly with built-in SeleniumBase methods.) \ud83d\udd35 Some websites have a restrictive Content Security Policy to prevent users from loading jQuery and other external libraries onto their websites. If you need to use jQuery or another JS library on such a website, add --disable-csp on the command-line. \u25b6\ufe0f In this example, JavaScript creates a referral button on a page, which is then clicked. ( click to expand ) start_page = \"https://xkcd.com/465/\" destination_page = \"https://github.com/seleniumbase/SeleniumBase\" self . open ( start_page ) referral_link = '''<a class='analytics test' href=' %s '>Free-Referral Button!</a>''' % destination_page self . execute_script ( '''document.body.innerHTML = \\\" %s \\\" ''' % referral_link ) self . click ( \"a.analytics\" ) # Clicks the generated button (Due to popular demand, this traffic generation example has been included in SeleniumBase with the self.generate_referral(start_page, end_page) and the self.generate_traffic(start_page, end_page, loops) methods.) \ud83d\udd35 Using deferred asserts: Let's say you want to verify multiple different elements on a web page in a single test, but you don't want the test to fail until you verified several elements at once so that you don't have to rerun the test to find more missing elements on the same page. That's where deferred asserts come in. Here's the example: from seleniumbase import BaseCase class MyTestClass ( BaseCase ): def test_deferred_asserts ( self ): self . open ( 'https://xkcd.com/993/' ) self . wait_for_element ( '#comic' ) self . deferred_assert_element ( 'img[alt=\"Brand Identity\"]' ) self . deferred_assert_element ( 'img[alt=\"Rocket Ship\"]' ) # Will Fail self . deferred_assert_element ( '#comicmap' ) self . deferred_assert_text ( 'Fake Item' , '#middleContainer' ) # Will Fail self . deferred_assert_text ( 'Random' , '#middleContainer' ) self . deferred_assert_element ( 'a[name=\"Super Fake !!!\"]' ) # Will Fail self . process_deferred_asserts () deferred_assert_element() and deferred_assert_text() will save any exceptions that would be raised. To flush out all the failed deferred asserts into a single exception, make sure to call self.process_deferred_asserts() at the end of your test method. If your test hits multiple pages, you can call self.process_deferred_asserts() before navigating to a new page so that the screenshot from your log files matches the URL where the deferred asserts were made. \ud83d\udd35 Accessing Raw WebDriver: If you need access to any commands that come with standard WebDriver, you can call them directly like this: self . driver . delete_all_cookies () capabilities = self . driver . capabilities self . driver . find_elements ( \"partial link text\" , \"GitHub\" ) (In general, you'll want to use the SeleniumBase versions of methods when available.) \ud83d\udd35 Retrying failing tests automatically: You can use --reruns=NUM to retry failing tests that many times. Use --reruns-delay=SECONDS to wait that many seconds between retries. Example: pytest --reruns = 1 --reruns-delay = 1 Additionally, you can use the @retry_on_exception() decorator to specifically retry failing methods. (First import: from seleniumbase import decorators ) To learn more about SeleniumBase decorators, [click here](https://github.com/seleniumbase/SeleniumBase/tree/master/seleniumbase/common). Wrap-Up Congratulations on getting started with SeleniumBase! If you see something, say something! If you like us, give us a star! https://github.com/mdmintz", "title": "SeleniumBase ReadMe"}, {"location": "examples/ReadMe/", "text": "Example Tests \u00b6 SeleniumBase tests are run with pytest . Chrome is the default browser if not specified. Tests are structured using 20 unique syntax formats . Logs from test failures are saved to ./latest_logs/ . Tests can be run with multiple command-line options . Examples can be found in: SeleniumBase/examples/ . (NOTE: Some example tests fail on purpose to demonstrate logging features .) Example tests with run commands to help you get started: Run an example test in Chrome: (Default: --browser=chrome ) pytest my_first_test.py Run an example test on the SeleniumBase Demo Site: pytest test_demo_site.py Run an example test in Firefox: pytest my_first_test.py --browser = firefox Run an example test in Demo Mode: (highlight assertions) pytest test_swag_labs.py --demo Run a Wordle-solver example : pytest wordle_test.py Run an example test in Headless Mode: (invisible browser) pytest my_first_test.py --headless Run an example test using Chrome's mobile device emulator: (default settings) pytest test_swag_labs.py --mobile Run another example test in Demo Mode: (highlight assertions) pytest test_xkcd.py --demo Run a test suite with verbose output: (see more details) pytest test_suite.py -v Run a test suite multi-threaded using [n] threads: pytest test_suite.py -n = 4 Run a parameterized test : (Generates multiple tests from one) pytest parameterized_test.py -v Run a test suite and generate a SeleniumBase Dashboard: pytest test_suite.py --dashboard Run a test suite and generate a pytest report: pytest test_suite.py --html = report.html Run a failing test : (See the latest_logs/ folder for logs and screenshots) pytest test_fail.py Run a failing test with Debug-mode enabled: ( pdb activates on failures) pytest test_fail.py --pdb -s Run a test suite that demonstrates the use of pytest markers: pytest -m marker_test_suite -v Run a test suite that reuses the browser session between tests: pytest test_suite.py --reuse-session Run an example test demonstrating the rate_limited Python decorator: pytest rate_limiting_test.py Run an example test that demonstrates how to upload a file to a website: pytest upload_file_test.py Try the new SeleniumBase Commander! A GUI for pytest: sbase gui SeleniumBase tests can also be run with nosetests : Run an example test with nosetests: nosetests my_first_test.py Run an example test suite and generate a nosetest report: nosetests test_suite.py --report --show-report Run an example test using a nosetest configuration file: nosetests my_first_test.py --config = example_config.cfg For more advanced run commands, such as using a proxy server, see ../help_docs/customizing_test_runs.md If you just need to perform some quick website verification on various devices, you can use the SeleniumBase Device Farm . Just plug in a website URL, and it will display how the website looks on four different devices: To make things easier, here's a simple GUI program that allows you to run a few example tests by pressing a button: python gui_test_runner.py", "title": "Running Example Tests"}, {"location": "examples/ReadMe/#example-tests", "text": "SeleniumBase tests are run with pytest . Chrome is the default browser if not specified. Tests are structured using 20 unique syntax formats . Logs from test failures are saved to ./latest_logs/ . Tests can be run with multiple command-line options . Examples can be found in: SeleniumBase/examples/ . (NOTE: Some example tests fail on purpose to demonstrate logging features .)", "title": " Example Tests"}, {"location": "examples/behave_bdd/ReadMe/", "text": "\ud83d\udc1d Behave test runner for SeleniumBase \ud83d\udc1d \u00b6 \ud83d\udc1d (Utilizes the Behave BDD Python library . For more info, see the Behave tutorial and read about Behave's Gherkin model .) \ud83d\udc1d Behave examples with SeleniumBase: SeleniumBase/examples/behave_bdd > cd examples/behave_bdd/ > behave features/realworld.feature -T -D dashboard -k Dashboard: /Users/michael/github/SeleniumBase/examples/behave_bdd/dashboard.html ******************************************************************************** Feature: SeleniumBase scenarios for the RealWorld App # features/realworld.feature:1 Scenario: Verify RealWorld App ( log in / sign out ) # features/realworld.feature:3 Given Open \"seleniumbase.io/realworld/login\" # ../../sbase/steps.py:10 And Clear Session Storage # ../../sbase/steps.py:391 When Type \"demo_user\" into \"#username\" # ../../sbase/steps.py:28 And Type \"secret_pass\" into \"#password\" # ../../sbase/steps.py:28 And Do MFA \"GAXG2MTEOR3DMMDG\" into \"#totpcode\" # ../../sbase/steps.py:194 Then Assert exact text \"Welcome!\" in \"h1\" # ../../sbase/steps.py:85 And Highlight \"img#image1\" # ../../sbase/steps.py:95 And Click 'a:contains(\"This Page\")' # ../../sbase/steps.py:19 And Save screenshot to logs # ../../sbase/steps.py:120 When Click link \"Sign out\" # ../../sbase/steps.py:104 Then Assert element 'a:contains(\"Sign in\")' # ../../sbase/steps.py:60 And Assert text \"You have been signed out!\" # ../../sbase/steps.py:77 \u2705 Scenario Passed! - Dashboard: /Users/michael/github/SeleniumBase/examples/behave_bdd/dashboard.html ================================================================================== 1 feature passed, 0 failed, 0 skipped 1 scenario passed, 0 failed, 0 skipped 12 steps passed, 0 failed, 0 skipped, 0 undefined Took 0m4.682s \ud83d\udc1d Another example, which uses higher-level Behave steps to simplify the .feature file: > cd examples/behave_bdd/ > behave features/calculator.feature:61 -T -D dashboard -k Dashboard: /Users/michael/github/SeleniumBase/examples/behave_bdd/dashboard.html ******************************************************************************** Feature: SeleniumBase scenarios for the Calculator App # features/calculator.feature:1 Background: # features/calculator.feature:3 Scenario: 7 .0 \u00d7 ( 3 + 3 ) = 42 # features/calculator.feature:49 Given Open the Calculator App # features/steps/calculator.py:4 When Press C # features/steps/calculator.py:9 And Press 7 # features/steps/calculator.py:79 And Press . # features/steps/calculator.py:104 And Press 0 # features/steps/calculator.py:94 And Press \u00d7 # features/steps/calculator.py:29 And Press ( # features/steps/calculator.py:14 And Press 3 # features/steps/calculator.py:59 And Press + # features/steps/calculator.py:39 And Press 3 # features/steps/calculator.py:59 And Press ) # features/steps/calculator.py:19 Then Verify output is \"7.0\u00d7(3+3)\" # features/steps/calculator.py:135 When Press = # features/steps/calculator.py:44 Then Verify output is \"42\" # features/steps/calculator.py:135 \u2705 Scenario Passed! - Dashboard: /Users/michael/github/SeleniumBase/examples/behave_bdd/dashboard.html ================================================================================== 1 feature passed, 0 failed, 0 skipped 1 scenario passed, 0 failed, 8 skipped 14 steps passed, 0 failed, 60 skipped, 0 undefined Took 0m1.672s \ud83d\udc1d\u26aa With the Dashboard enabled, you'll get one of these: \ud83d\udc1d Behave-Gherkin files \u00b6 \ud83d\udc1d The *.feature files can use any step seen from: behave --steps-catalog \ud83d\udc1d SeleniumBase includes several pre-made Behave steps, which you can use by creating a Python file with the following line in your features/steps/ directory: from seleniumbase.behave import steps # noqa \ud83d\udc1d Inside your features/environment.py file, you should have the following: from seleniumbase import BaseCase from seleniumbase.behave import behave_sb behave_sb . set_base_class ( BaseCase ) # Accepts a BaseCase subclass from seleniumbase.behave.behave_sb import before_all # noqa from seleniumbase.behave.behave_sb import before_feature # noqa from seleniumbase.behave.behave_sb import before_scenario # noqa from seleniumbase.behave.behave_sb import before_step # noqa from seleniumbase.behave.behave_sb import after_step # noqa from seleniumbase.behave.behave_sb import after_scenario # noqa from seleniumbase.behave.behave_sb import after_feature # noqa from seleniumbase.behave.behave_sb import after_all # noqa \ud83d\udc1d If you've already created a subclass of BaseCase with custom methods, you can swap BaseCase in with your own subclass, which will allow you to easily use your own custom methods in your Behave step definitions. \ud83d\udc1d Here's an example Python file in the features/steps/ folder: from behave import step @step ( \"Open the Swag Labs Login Page\" ) def go_to_swag_labs ( context ): sb = context . sb sb . open ( \"https://www.saucedemo.com\" ) sb . clear_local_storage () @step ( \"Login to Swag Labs with {user} \" ) def login_to_swag_labs ( context , user ): sb = context . sb sb . type ( \"#user-name\" , user ) sb . type ( \"#password\" , \"secret_sauce \\n \" ) @step ( \"Verify that the current user is logged in\" ) def verify_logged_in ( context ): sb = context . sb sb . assert_element ( \"#header_container\" ) sb . assert_element ( \"#react-burger-menu-btn\" ) sb . assert_element ( \"#shopping_cart_container\" ) @step ( 'Add \" {item} \" to cart' ) def add_item_to_cart ( context , item ): sb = context . sb sb . click ( 'div.inventory_item:contains(\" %s \") button[name*=\"add\"]' % item ) \ud83d\udc1d A *.feature file could look like this: Feature: SeleniumBase scenarios for the Swag Labs App Background: Given Open the Swag Labs Login Page Scenario: User can order a backpack from the store When Login to Swag Labs with standard_user Then Verify that the current user is logged in And Save price of \" Backpack \" to <item_price> When Add \" Backpack \" to Cart Then Verify shopping cart badge shows 1 item(s) When Click on shopping cart icon And Click Checkout And Enter checkout info: First, Last, 12345 And Click Continue Then Verify 1 \" Backpack \"(s) in cart And Verify cost of \" Backpack \" is <item_price> And Verify item total is $ 29.99 And Verify tax amount is $ 2.40 And Verify total cost is $ 32.39 When Click Finish Then Verify order complete When Logout from Swag Labs Then Verify on Login page \ud83d\udc1d Here's another example of a *.feature file: Feature: SeleniumBase scenarios for the RealWorld App Scenario: Verify RealWorld App (log in / sign out) Given Open \" seleniumbase.io/realworld/login \" And Clear Session Storage When Type \" demo_user \" into \" #username \" And Type \" secret_pass \" into \" #password \" And Do MFA \" GAXG2MTEOR3DMMDG \" into \" #totpcode \" Then Assert text \" Welcome! \" in \" h1 \" And Highlight element \" img#image1 \" And Click 'a:contains(\" This Page \")' And Save screenshot to logs When Click link \" Sign out \" Then Assert element 'a:contains(\" Sign in \")' And Assert text \" You have been signed out! \" \ud83d\udc1d If there's a test failure, that's easy to spot: Feature: SeleniumBase scenarios for the Fail Page # features/fail_page.feature:1 Scenario: Fail test on purpose to see what happens # features/fail_page.feature:3 When Open the Fail Page # features/steps/fail_page.py:4 Then Fail test on purpose # features/steps/fail_page.py:9 Assertion Failed: This test fails on purpose! Captured stdout: >>> STEP FAILED: ( #2) Fail test on purpose Class / Feature: SeleniumBase scenarios for the Fail Page Test / Scenario: Fail test on purpose to see what happens \u274c Scenario Failed! \ud83d\udc1d\ud83c\udf96\ufe0f For convenience, the SeleniumBase Behave GUI lets you run behave scripts from a Desktop app. \ud83d\udc1d\ud83c\udf96\ufe0f To launch it, call sbase behave-gui or sbase gui-behave : sbase behave-gui * Starting the SeleniumBase Behave Commander GUI App... \ud83d\udc1d\ud83c\udf96\ufe0f You can customize the tests that show up there: sbase behave-gui # all tests sbase behave-gui -i = calculator # tests with \"calculator\" in the name sbase behave-gui features/ # tests located in the \"features/\" folder sbase behave-gui features/calculator.feature # tests in that feature To learn more about SeleniumBase, check out the Docs Site: All the code is on GitHub:", "title": "Behave-BDD ReadMe"}, {"location": "examples/behave_bdd/ReadMe/#behave-test-runner-for-seleniumbase", "text": "\ud83d\udc1d (Utilizes the Behave BDD Python library . For more info, see the Behave tutorial and read about Behave's Gherkin model .) \ud83d\udc1d Behave examples with SeleniumBase: SeleniumBase/examples/behave_bdd > cd examples/behave_bdd/ > behave features/realworld.feature -T -D dashboard -k Dashboard: /Users/michael/github/SeleniumBase/examples/behave_bdd/dashboard.html ******************************************************************************** Feature: SeleniumBase scenarios for the RealWorld App # features/realworld.feature:1 Scenario: Verify RealWorld App ( log in / sign out ) # features/realworld.feature:3 Given Open \"seleniumbase.io/realworld/login\" # ../../sbase/steps.py:10 And Clear Session Storage # ../../sbase/steps.py:391 When Type \"demo_user\" into \"#username\" # ../../sbase/steps.py:28 And Type \"secret_pass\" into \"#password\" # ../../sbase/steps.py:28 And Do MFA \"GAXG2MTEOR3DMMDG\" into \"#totpcode\" # ../../sbase/steps.py:194 Then Assert exact text \"Welcome!\" in \"h1\" # ../../sbase/steps.py:85 And Highlight \"img#image1\" # ../../sbase/steps.py:95 And Click 'a:contains(\"This Page\")' # ../../sbase/steps.py:19 And Save screenshot to logs # ../../sbase/steps.py:120 When Click link \"Sign out\" # ../../sbase/steps.py:104 Then Assert element 'a:contains(\"Sign in\")' # ../../sbase/steps.py:60 And Assert text \"You have been signed out!\" # ../../sbase/steps.py:77 \u2705 Scenario Passed! - Dashboard: /Users/michael/github/SeleniumBase/examples/behave_bdd/dashboard.html ================================================================================== 1 feature passed, 0 failed, 0 skipped 1 scenario passed, 0 failed, 0 skipped 12 steps passed, 0 failed, 0 skipped, 0 undefined Took 0m4.682s \ud83d\udc1d Another example, which uses higher-level Behave steps to simplify the .feature file: > cd examples/behave_bdd/ > behave features/calculator.feature:61 -T -D dashboard -k Dashboard: /Users/michael/github/SeleniumBase/examples/behave_bdd/dashboard.html ******************************************************************************** Feature: SeleniumBase scenarios for the Calculator App # features/calculator.feature:1 Background: # features/calculator.feature:3 Scenario: 7 .0 \u00d7 ( 3 + 3 ) = 42 # features/calculator.feature:49 Given Open the Calculator App # features/steps/calculator.py:4 When Press C # features/steps/calculator.py:9 And Press 7 # features/steps/calculator.py:79 And Press . # features/steps/calculator.py:104 And Press 0 # features/steps/calculator.py:94 And Press \u00d7 # features/steps/calculator.py:29 And Press ( # features/steps/calculator.py:14 And Press 3 # features/steps/calculator.py:59 And Press + # features/steps/calculator.py:39 And Press 3 # features/steps/calculator.py:59 And Press ) # features/steps/calculator.py:19 Then Verify output is \"7.0\u00d7(3+3)\" # features/steps/calculator.py:135 When Press = # features/steps/calculator.py:44 Then Verify output is \"42\" # features/steps/calculator.py:135 \u2705 Scenario Passed! - Dashboard: /Users/michael/github/SeleniumBase/examples/behave_bdd/dashboard.html ================================================================================== 1 feature passed, 0 failed, 0 skipped 1 scenario passed, 0 failed, 8 skipped 14 steps passed, 0 failed, 60 skipped, 0 undefined Took 0m1.672s \ud83d\udc1d\u26aa With the Dashboard enabled, you'll get one of these:", "title": " \ud83d\udc1d Behave test runner for SeleniumBase \ud83d\udc1d"}, {"location": "examples/behave_bdd/ReadMe/#behave-gherkin-files", "text": "\ud83d\udc1d The *.feature files can use any step seen from: behave --steps-catalog \ud83d\udc1d SeleniumBase includes several pre-made Behave steps, which you can use by creating a Python file with the following line in your features/steps/ directory: from seleniumbase.behave import steps # noqa \ud83d\udc1d Inside your features/environment.py file, you should have the following: from seleniumbase import BaseCase from seleniumbase.behave import behave_sb behave_sb . set_base_class ( BaseCase ) # Accepts a BaseCase subclass from seleniumbase.behave.behave_sb import before_all # noqa from seleniumbase.behave.behave_sb import before_feature # noqa from seleniumbase.behave.behave_sb import before_scenario # noqa from seleniumbase.behave.behave_sb import before_step # noqa from seleniumbase.behave.behave_sb import after_step # noqa from seleniumbase.behave.behave_sb import after_scenario # noqa from seleniumbase.behave.behave_sb import after_feature # noqa from seleniumbase.behave.behave_sb import after_all # noqa \ud83d\udc1d If you've already created a subclass of BaseCase with custom methods, you can swap BaseCase in with your own subclass, which will allow you to easily use your own custom methods in your Behave step definitions. \ud83d\udc1d Here's an example Python file in the features/steps/ folder: from behave import step @step ( \"Open the Swag Labs Login Page\" ) def go_to_swag_labs ( context ): sb = context . sb sb . open ( \"https://www.saucedemo.com\" ) sb . clear_local_storage () @step ( \"Login to Swag Labs with {user} \" ) def login_to_swag_labs ( context , user ): sb = context . sb sb . type ( \"#user-name\" , user ) sb . type ( \"#password\" , \"secret_sauce \\n \" ) @step ( \"Verify that the current user is logged in\" ) def verify_logged_in ( context ): sb = context . sb sb . assert_element ( \"#header_container\" ) sb . assert_element ( \"#react-burger-menu-btn\" ) sb . assert_element ( \"#shopping_cart_container\" ) @step ( 'Add \" {item} \" to cart' ) def add_item_to_cart ( context , item ): sb = context . sb sb . click ( 'div.inventory_item:contains(\" %s \") button[name*=\"add\"]' % item ) \ud83d\udc1d A *.feature file could look like this: Feature: SeleniumBase scenarios for the Swag Labs App Background: Given Open the Swag Labs Login Page Scenario: User can order a backpack from the store When Login to Swag Labs with standard_user Then Verify that the current user is logged in And Save price of \" Backpack \" to <item_price> When Add \" Backpack \" to Cart Then Verify shopping cart badge shows 1 item(s) When Click on shopping cart icon And Click Checkout And Enter checkout info: First, Last, 12345 And Click Continue Then Verify 1 \" Backpack \"(s) in cart And Verify cost of \" Backpack \" is <item_price> And Verify item total is $ 29.99 And Verify tax amount is $ 2.40 And Verify total cost is $ 32.39 When Click Finish Then Verify order complete When Logout from Swag Labs Then Verify on Login page \ud83d\udc1d Here's another example of a *.feature file: Feature: SeleniumBase scenarios for the RealWorld App Scenario: Verify RealWorld App (log in / sign out) Given Open \" seleniumbase.io/realworld/login \" And Clear Session Storage When Type \" demo_user \" into \" #username \" And Type \" secret_pass \" into \" #password \" And Do MFA \" GAXG2MTEOR3DMMDG \" into \" #totpcode \" Then Assert text \" Welcome! \" in \" h1 \" And Highlight element \" img#image1 \" And Click 'a:contains(\" This Page \")' And Save screenshot to logs When Click link \" Sign out \" Then Assert element 'a:contains(\" Sign in \")' And Assert text \" You have been signed out! \" \ud83d\udc1d If there's a test failure, that's easy to spot: Feature: SeleniumBase scenarios for the Fail Page # features/fail_page.feature:1 Scenario: Fail test on purpose to see what happens # features/fail_page.feature:3 When Open the Fail Page # features/steps/fail_page.py:4 Then Fail test on purpose # features/steps/fail_page.py:9 Assertion Failed: This test fails on purpose! Captured stdout: >>> STEP FAILED: ( #2) Fail test on purpose Class / Feature: SeleniumBase scenarios for the Fail Page Test / Scenario: Fail test on purpose to see what happens \u274c Scenario Failed! \ud83d\udc1d\ud83c\udf96\ufe0f For convenience, the SeleniumBase Behave GUI lets you run behave scripts from a Desktop app. \ud83d\udc1d\ud83c\udf96\ufe0f To launch it, call sbase behave-gui or sbase gui-behave : sbase behave-gui * Starting the SeleniumBase Behave Commander GUI App... \ud83d\udc1d\ud83c\udf96\ufe0f You can customize the tests that show up there: sbase behave-gui # all tests sbase behave-gui -i = calculator # tests with \"calculator\" in the name sbase behave-gui features/ # tests located in the \"features/\" folder sbase behave-gui features/calculator.feature # tests in that feature To learn more about SeleniumBase, check out the Docs Site: All the code is on GitHub:", "title": "\ud83d\udc1d Behave-Gherkin files"}, {"location": "examples/chart_maker/ReadMe/", "text": "\ud83d\udcca ChartMaker \ud83d\udcf6 \u00b6 SeleniumBase ChartMaker lets you use Python to generate HTML charts. ( Click to see a presentation with multiple charts ) Here's how to run a simple pie chart presentation from GitHub => seleniumbase/SeleniumBase/examples/chart_maker : cd examples/chart_maker pytest my_chart.py Here's the code for that pie chart presentation ( GitHub => seleniumbase/SeleniumBase/examples/chart_maker/my_chart.py ): from seleniumbase import BaseCase class MyChartMakerClass ( BaseCase ): def test_chart_maker ( self ): self . create_presentation () self . create_pie_chart ( title = \"Automated Tests\" ) self . add_data_point ( \"Passed\" , 7 , color = \"#95d96f\" ) self . add_data_point ( \"Untested\" , 2 , color = \"#eaeaea\" ) self . add_data_point ( \"Failed\" , 1 , color = \"#f1888f\" ) self . add_slide ( \"<p>Pie Chart</p>\" + self . extract_chart ()) self . begin_presentation ( filename = \"my_chart.html\" ) Here's how to run an example presentation with multiple charts: cd examples/chart_maker pytest chart_presentation.py Here are screenshots from the examples: Here's a line chart example: from seleniumbase import BaseCase class MyChartMakerClass ( BaseCase ): def test_chart_maker ( self ): self . create_presentation () self . create_line_chart ( title = \"Time Outside\" , subtitle = \"Last Week\" , unit = \"Minutes\" ) self . add_data_point ( \"Sun\" , 5 ) self . add_data_point ( \"Mon\" , 10 ) self . add_data_point ( \"Tue\" , 20 ) self . add_data_point ( \"Wed\" , 40 ) self . add_data_point ( \"Thu\" , 80 ) self . add_data_point ( \"Fri\" , 65 ) self . add_data_point ( \"Sat\" , 50 ) self . add_slide ( \"<p>Line Chart</p>\" + self . extract_chart ()) self . begin_presentation ( filename = \"line_chart.html\" , interval = 8 ) This example is from test_line_chart.py , which you can run from the examples/chart_maker folder with the following command: pytest test_line_chart.py Because that presentation above has an interval set to 8 , it will automatically advance to the next slide after 8 seconds. (Or exit if there are no more slides.) For a more advanced example (multiple charts in a presentation): from seleniumbase import BaseCase class MyChartMakerClass ( BaseCase ): def test_chart_maker_presentation ( self ): self . create_presentation ( theme = \"sky\" ) self . create_pie_chart ( title = \"Automated Tests\" ) self . add_data_point ( \"Passed\" , 7 , color = \"#95d96f\" ) self . add_data_point ( \"Untested\" , 2 , color = \"#eaeaea\" ) self . add_data_point ( \"Failed\" , 1 , color = \"#f1888f\" ) self . add_slide ( \"<p>Pie Chart</p>\" + self . extract_chart ()) self . create_bar_chart ( title = \"Language\" ) self . add_data_point ( \"Python\" , 33 , color = \"Orange\" ) self . add_data_point ( \"JavaScript\" , 27 , color = \"Teal\" ) self . add_data_point ( \"HTML + CSS\" , 21 , color = \"Purple\" ) self . add_slide ( \"<p>Bar Chart</p>\" + self . extract_chart ()) self . create_column_chart ( title = \"Colors\" ) self . add_data_point ( \"Red\" , 10 , color = \"Red\" ) self . add_data_point ( \"Green\" , 25 , color = \"Green\" ) self . add_data_point ( \"Blue\" , 15 , color = \"Blue\" ) self . add_slide ( \"<p>Column Chart</p>\" + self . extract_chart ()) self . create_line_chart ( title = \"Last Week's Data\" ) self . add_data_point ( \"Sun\" , 5 ) self . add_data_point ( \"Mon\" , 10 ) self . add_data_point ( \"Tue\" , 20 ) self . add_data_point ( \"Wed\" , 40 ) self . add_data_point ( \"Thu\" , 80 ) self . add_data_point ( \"Fri\" , 65 ) self . add_data_point ( \"Sat\" , 50 ) self . add_slide ( \"<p>Line Chart</p>\" + self . extract_chart ()) self . begin_presentation ( filename = \"chart_presentation.html\" ) Here's how to run that example: cd examples/chart_maker pytest chart_presentation.py (Press the Right Arrow to advance to the next slide in that chart presentation) ( Click to see a live example of that presentation ) Multi-Series charts can also be created. Try the available examples to learn more. ChartMaker API self . create_pie_chart ( chart_name = None , title = None , subtitle = None , data_name = None , unit = None , libs = True ): \"\"\" Creates a JavaScript pie chart using \"HighCharts\". @Params chart_name - If creating multiple charts, use this to select which one. title - The title displayed for the chart. subtitle - The subtitle displayed for the chart. data_name - The series name. Useful for multi-series charts. If no data_name, will default to using \"Series 1\". unit - The description label given to the chart's y-axis values. libs - The option to include Chart libraries (JS and CSS files). Should be set to True (default) for the first time creating a chart on a web page. If creating multiple charts on the same web page, you won't need to re-import the libraries when creating additional charts. labels - If True, displays labels on the chart for data points. legend - If True, displays the data point legend on the chart. \"\"\" self . create_bar_chart ( chart_name = None , title = None , subtitle = None , data_name = None , unit = None , libs = True ): \"\"\" Creates a JavaScript bar chart using \"HighCharts\". @Params chart_name - If creating multiple charts, use this to select which one. title - The title displayed for the chart. subtitle - The subtitle displayed for the chart. data_name - The series name. Useful for multi-series charts. If no data_name, will default to using \"Series 1\". unit - The description label given to the chart's y-axis values. libs - The option to include Chart libraries (JS and CSS files). Should be set to True (default) for the first time creating a chart on a web page. If creating multiple charts on the same web page, you won't need to re-import the libraries when creating additional charts. labels - If True, displays labels on the chart for data points. legend - If True, displays the data point legend on the chart. \"\"\" self . create_column_chart ( chart_name = None , title = None , subtitle = None , data_name = None , unit = None , libs = True ): \"\"\" Creates a JavaScript column chart using \"HighCharts\". @Params chart_name - If creating multiple charts, use this to select which one. title - The title displayed for the chart. subtitle - The subtitle displayed for the chart. data_name - The series name. Useful for multi-series charts. If no data_name, will default to using \"Series 1\". unit - The description label given to the chart's y-axis values. libs - The option to include Chart libraries (JS and CSS files). Should be set to True (default) for the first time creating a chart on a web page. If creating multiple charts on the same web page, you won't need to re-import the libraries when creating additional charts. labels - If True, displays labels on the chart for data points. legend - If True, displays the data point legend on the chart. \"\"\" self . create_line_chart ( chart_name = None , title = None , subtitle = None , data_name = None , unit = None , zero = False , libs = True ): \"\"\" Creates a JavaScript line chart using \"HighCharts\". @Params chart_name - If creating multiple charts, use this to select which one. title - The title displayed for the chart. subtitle - The subtitle displayed for the chart. data_name - The series name. Useful for multi-series charts. If no data_name, will default to using \"Series 1\". unit - The description label given to the chart's y-axis values. zero - If True, the y-axis always starts at 0. (Default: False). libs - The option to include Chart libraries (JS and CSS files). Should be set to True (default) for the first time creating a chart on a web page. If creating multiple charts on the same web page, you won't need to re-import the libraries when creating additional charts. labels - If True, displays labels on the chart for data points. legend - If True, displays the data point legend on the chart. \"\"\" self . create_area_chart ( chart_name = None , title = None , subtitle = None , data_name = None , unit = None , zero = False , libs = True ): \"\"\" Creates a JavaScript area chart using \"HighCharts\". @Params chart_name - If creating multiple charts, use this to select which one. title - The title displayed for the chart. subtitle - The subtitle displayed for the chart. data_name - The series name. Useful for multi-series charts. If no data_name, will default to using \"Series 1\". unit - The description label given to the chart's y-axis values. zero - If True, the y-axis always starts at 0. (Default: False). libs - The option to include Chart libraries (JS and CSS files). Should be set to True (default) for the first time creating a chart on a web page. If creating multiple charts on the same web page, you won't need to re-import the libraries when creating additional charts. labels - If True, displays labels on the chart for data points. legend - If True, displays the data point legend on the chart. \"\"\" If creating multiple charts at the same time, you can pass the chart_name parameter to distinguish between different charts. Adding a data point to a chart: self . add_data_point ( label , value , color = None , chart_name = None ): \"\"\" Add a data point to a SeleniumBase-generated chart. @Params label - The label name for the data point. value - The numeric value of the data point. color - The HTML color of the data point. Can be an RGB color. Eg: \"#55ACDC\". Can also be a named color. Eg: \"Teal\". chart_name - If creating multiple charts, use this to select which one. \"\"\" Adding a new data series to an existing chart: self . add_series_to_chart ( self , data_name = None , chart_name = None ): \"\"\" Add a new data series to an existing chart. This allows charts to have multiple data sets. @Params data_name - Set the series name. Useful for multi-series charts. chart_name - If creating multiple charts, use this to select which one. \"\"\" Saving a chart to a file: self . save_chart ( chart_name = None , filename = None ): \"\"\" Saves a SeleniumBase-generated chart to a file for later use. @Params chart_name - If creating multiple charts at the same time, use this to select the one you wish to use. filename - The name of the HTML file that you wish to save the chart to. (filename must end in \".html\") \"\"\" The full HTML of the chart is saved to the saved_charts/ folder. Extracting the HTML of a chart: self . extract_chart ( chart_name = None ): \"\"\" Extracts the HTML from a SeleniumBase-generated chart. @Params chart_name - If creating multiple charts at the same time, use this to select the one you wish to use. \"\"\" Displaying a chart in the browser window: self . display_chart ( chart_name = None , filename = None ): \"\"\" Displays a SeleniumBase-generated chart in the browser window. @Params chart_name - If creating multiple charts at the same time, use this to select the one you wish to use. filename - The name of the HTML file that you wish to save the chart to. (filename must end in \".html\") interval - The delay time for auto-advancing charts. (in seconds) If set to 0 (default), auto-advancing is disabled. \"\"\" All methods have the optional chart_name argument, which is only needed when storing multiple charts at the same time.", "title": "HighCharts"}, {"location": "examples/chart_maker/ReadMe/#chartmaker", "text": "SeleniumBase ChartMaker lets you use Python to generate HTML charts. ( Click to see a presentation with multiple charts ) Here's how to run a simple pie chart presentation from GitHub => seleniumbase/SeleniumBase/examples/chart_maker : cd examples/chart_maker pytest my_chart.py Here's the code for that pie chart presentation ( GitHub => seleniumbase/SeleniumBase/examples/chart_maker/my_chart.py ): from seleniumbase import BaseCase class MyChartMakerClass ( BaseCase ): def test_chart_maker ( self ): self . create_presentation () self . create_pie_chart ( title = \"Automated Tests\" ) self . add_data_point ( \"Passed\" , 7 , color = \"#95d96f\" ) self . add_data_point ( \"Untested\" , 2 , color = \"#eaeaea\" ) self . add_data_point ( \"Failed\" , 1 , color = \"#f1888f\" ) self . add_slide ( \"<p>Pie Chart</p>\" + self . extract_chart ()) self . begin_presentation ( filename = \"my_chart.html\" ) Here's how to run an example presentation with multiple charts: cd examples/chart_maker pytest chart_presentation.py Here are screenshots from the examples:", "title": " \ud83d\udcca ChartMaker \ud83d\udcf6"}, {"location": "examples/dialog_boxes/ReadMe/", "text": "\ud83d\udec2 Dialog Boxes \ud83d\udec2 \u00b6 SeleniumBase Dialog Boxes let your users provide input in the middle of automation scripts. This feature utilizes the jquery-confirm library. A Python API is used to call the JavaScript API. \u2195\ufe0f ( Example: dialog_box_tour.py ) \u2195\ufe0f Here's how to run that example: cd examples/dialog_boxes pytest test_dialog_boxes.py Here's a code snippet from that: self . open ( \"https://xkcd.com/1920/\" ) skip_button = [ \"SKIP\" , \"red\" ] # Can be a [text, color] list or tuple. buttons = [ \"Fencing\" , \"Football\" , \"Metaball\" , \"Go/Chess\" , skip_button ] message = \"Choose a sport:\" choice = self . get_jqc_button_input ( message , buttons ) if choice == \"Fencing\" : self . open ( \"https://xkcd.com/1424/\" ) You can create forms that include buttons and input fields. Here's a simple form with only buttons as input: choice = self . get_jqc_button_input ( \"Ready?\" , [ \"YES\" , \"NO\" ]) print ( choice ) # This prints \"YES\" or \"NO\" # You may want to customize the color of buttons buttons = [( \"YES\" , \"green\" ), ( \"NO\" , \"red\" )] choice = self . get_jqc_button_input ( \"Ready?\" , buttons ) Here's a simple form with an input field: text = self . get_jqc_text_input ( \"Enter text:\" , [ \"Search\" ]) print ( text ) # This prints the text entered This form has an input field and buttons: message = \"Type your name and choose a language:\" buttons = [ \"Python\" , \"JavaScript\" ] text , choice = self . get_jqc_form_inputs ( message , buttons ) print ( \"Your name is: %s \" % text ) print ( \"You picked %s !\" % choice ) You can customize options if you want: # Themes: bootstrap, modern, material, supervan, light, dark, seamless options = [( \"theme\" , \"modern\" ), ( \"width\" , \"50%\" )] self . get_jqc_text_input ( \"You Won!\" , [ \"OK\" ], options ) Default options can be set with set_jqc_theme() : self . set_jqc_theme ( \"light\" , color = \"green\" , width = \"38%\" ) # To reset jqc theme settings to factory defaults self . reset_jqc_theme () All methods for Dialog Boxes: self . get_jqc_button_input ( message , buttons , options = None ) self . get_jqc_text_input ( message , button = None , options = None ) self . get_jqc_form_inputs ( message , buttons , options = None ) self . set_jqc_theme ( theme , color = None , width = None ) self . reset_jqc_theme () self . activate_jquery_confirm () # Automatic for jqc methods Detailed method summaries for Dialog Boxes: self . get_jqc_button_input ( message , buttons , options = None ) \"\"\" Pop up a jquery-confirm box and return the text of the button clicked. If running in headless mode, the last button text is returned. @Params message: The message to display in the jquery-confirm dialog. buttons: A list of tuples for text and color. Example: [(\"Yes!\", \"green\"), (\"No!\", \"red\")] Available colors: blue, green, red, orange, purple, default, dark. A simple text string also works: \"My Button\". (Uses default color.) options: A list of tuples for options to set. Example: [(\"theme\", \"bootstrap\"), (\"width\", \"450px\")] Available theme options: bootstrap, modern, material, supervan, light, dark, and seamless. Available colors: (For the BORDER color, NOT the button color.) \"blue\", \"default\", \"green\", \"red\", \"purple\", \"orange\", \"dark\". Example option for changing the border color: (\"color\", \"default\") Width can be set using percent or pixels. Eg: \"36.0%\", \"450px\". \"\"\" self . get_jqc_text_input ( message , button = None , options = None ) \"\"\" Pop up a jquery-confirm box and return the text submitted by the input. If running in headless mode, the text returned is \"\" by default. @Params message: The message to display in the jquery-confirm dialog. button: A 2-item list or tuple for text and color. Or just the text. Example: [\"Submit\", \"blue\"] -> (default button if not specified) Available colors: blue, green, red, orange, purple, default, dark. A simple text string also works: \"My Button\". (Uses default color.) options: A list of tuples for options to set. Example: [(\"theme\", \"bootstrap\"), (\"width\", \"450px\")] Available theme options: bootstrap, modern, material, supervan, light, dark, and seamless. Available colors: (For the BORDER color, NOT the button color.) \"blue\", \"default\", \"green\", \"red\", \"purple\", \"orange\", \"dark\". Example option for changing the border color: (\"color\", \"default\") Width can be set using percent or pixels. Eg: \"36.0%\", \"450px\". \"\"\" self . get_jqc_form_inputs ( message , buttons , options = None ) \"\"\" Pop up a jquery-confirm box and return the input/button texts as tuple. If running in headless mode, returns the (\"\", buttons[-1][0]) tuple. @Params message: The message to display in the jquery-confirm dialog. buttons: A list of tuples for text and color. Example: [(\"Yes!\", \"green\"), (\"No!\", \"red\")] Available colors: blue, green, red, orange, purple, default, dark. A simple text string also works: \"My Button\". (Uses default color.) options: A list of tuples for options to set. Example: [(\"theme\", \"bootstrap\"), (\"width\", \"450px\")] Available theme options: bootstrap, modern, material, supervan, light, dark, and seamless. Available colors: (For the BORDER color, NOT the button color.) \"blue\", \"default\", \"green\", \"red\", \"purple\", \"orange\", \"dark\". Example option for changing the border color: (\"color\", \"default\") Width can be set using percent or pixels. Eg: \"36.0%\", \"450px\". \"\"\" self . set_jqc_theme ( theme , color = None , width = None ) \"\"\" Sets the default jquery-confirm theme and width (optional). Available themes: \"bootstrap\", \"modern\", \"material\", \"supervan\", \"light\", \"dark\", and \"seamless\". Available colors: (This sets the BORDER color, NOT the button color.) \"blue\", \"default\", \"green\", \"red\", \"purple\", \"orange\", \"dark\". Width can be set using percent or pixels. Eg: \"36.0%\", \"450px\". \"\"\" self . reset_jqc_theme () \"\"\" Resets the jqc theme settings to factory defaults. \"\"\" self . activate_jquery_confirm () # Automatic for jqc methods \"\"\" See https://craftpip.github.io/jquery-confirm/ for usage. \"\"\" \u2705 \ud83d\udec2 Automated/Manual Hybrid Mode (MasterQA) MasterQA uses SeleniumBase Dialog Boxes to speed up manual testing by having automation perform all the browser actions while the manual tester handles validation. See the MasterQA GitHub page for examples.", "title": "Dialog Boxes"}, {"location": "examples/dialog_boxes/ReadMe/#dialog-boxes", "text": "SeleniumBase Dialog Boxes let your users provide input in the middle of automation scripts. This feature utilizes the jquery-confirm library. A Python API is used to call the JavaScript API.", "title": " \ud83d\udec2 Dialog Boxes \ud83d\udec2"}, {"location": "examples/example_logs/ReadMe/", "text": "Logs, The Dashboard, and Reports \u00b6 \ud83d\udd35 During test failures, logs and screenshots from the most recent test run will get saved to the latest_logs/ folder. If --archive-logs is specified (or if ARCHIVE_EXISTING_LOGS is set to True in settings.py ), test logs will also get archived to the archived_logs/ folder. Otherwise, the log files will be cleaned out when the next test run begins (by default). pytest test_fail.py (Log files in SeleniumBase/examples/example_logs were generated when test_fail.py ran and failed.) Examples of expected log files generated during failures: basic_test_info.txt page_source.html screenshot.png In addition to log files, you can also generate dashboards and test reports. The SeleniumBase Dashboard: \ud83d\udd35 The --dashboard option for pytest generates a SeleniumBase Dashboard located at dashboard.html , which updates automatically as tests run and produce results. Example: pytest --dashboard --rs --headless \ud83d\udd35 Additionally, you can host your own SeleniumBase Dashboard Server on a port of your choice. Here's an example of that using Python 3's http.server : python -m http.server 1948 \ud83d\udd35 Now you can navigate to http://localhost:1948/dashboard.html in order to view the dashboard as a web app. This requires two different terminal windows: one for running the server, and another for running the tests, which should be run from the same directory. (Use CTRL+C to stop the http server.) \ud83d\udd35 Here's a full example of what the SeleniumBase Dashboard may look like: pytest test_suite.py --dashboard --rs --headless Pytest Reports: \ud83d\udd35 Using --html=report.html gives you a fancy report of the name specified after your test suite completes. pytest test_suite.py --html = report.html \ud83d\udd35 When combining pytest html reports with SeleniumBase Dashboard usage, the pie chart from the Dashboard will get added to the html report. Additionally, if you set the html report URL to be the same as the Dashboard URL when also using the dashboard, (example: --dashboard --html=dashboard.html ), then the Dashboard will become an advanced html report when all the tests complete. \ud83d\udd35 Here's an example of an upgraded html report: pytest test_suite.py --dashboard --html = report.html If viewing pytest-html reports in Jenkins , you may need to configure Jenkins settings for the HTML to render correctly. This is due to Jenkins CSP changes . That setting can be changed from Manage Jenkins > Script Console by running: System.setProperty(\"hudson.model.DirectoryBrowserSupport.CSP\", \"\") You can also use --junit-xml=report.xml to get an xml report instead. Jenkins can use this file to display better reporting for your tests. pytest test_suite.py --junit-xml = report.xml Nosetest Reports: The nosetests --report option gives you a fancy report after your tests complete. nosetests test_suite.py --report (NOTE: You can add --show-report to immediately display Nosetest reports after the test suite completes. Only use --show-report when running tests locally because it pauses the test run.) \ud83d\udc1d\u26aa Behave Dashboard & Reports: (The behave_bdd/ folder can be found in the examples/ folder.) behave behave_bdd/features/ -D dashboard -D headless You can also use --junit to get .xml reports for each Behave feature. Jenkins can use these files to display better reporting for your tests. behave behave_bdd/features/ --junit -D rs -D headless", "title": "Dashboard / Reports"}, {"location": "examples/example_logs/ReadMe/#logs-the-dashboard-and-reports", "text": "\ud83d\udd35 During test failures, logs and screenshots from the most recent test run will get saved to the latest_logs/ folder. If --archive-logs is specified (or if ARCHIVE_EXISTING_LOGS is set to True in settings.py ), test logs will also get archived to the archived_logs/ folder. Otherwise, the log files will be cleaned out when the next test run begins (by default). pytest test_fail.py (Log files in SeleniumBase/examples/example_logs were generated when test_fail.py ran and failed.) Examples of expected log files generated during failures: basic_test_info.txt page_source.html screenshot.png In addition to log files, you can also generate dashboards and test reports.", "title": " Logs, The Dashboard, and Reports"}, {"location": "examples/master_qa/ReadMe/", "text": "MasterQA combines automation with manual verification steps. Here's code from basic_masterqa_test_0.py : from seleniumbase import MasterQA class MasterQATests ( MasterQA ): def test_masterqa ( self ): self . open ( \"https://xkcd.com/1700/\" ) self . verify ( \"Do you see a webcomic?\" ) self . open ( \"https://seleniumbase.io/demo_page\" ) self . highlight ( 'table' ) self . verify ( \"Do you see elements in a table?\" ) self . open ( \"https://seleniumbase.io/devices/\" ) self . highlight ( \"div.mockup-wrapper\" ) self . verify ( \"Do you see 4 computer devices?\" ) After each automation checkpoint, a pop-up window will ask the user questions for each verification command. When the test run completes, as seen from this longer example , you'll reach the results page that appears after answering all the verification questions. (Failed verifications generate links to screenshots and log files.) You may have noticed the Incomplete Test Runs row on the results page. If the value for that is not zero, it means that one of the automated steps failed. This could happen if you tell your script to perform an action on an element that doesn't exist. Now that we're mixing automation with manual QA, it's good to tell apart the failures from each. The results_table CSV file contains a spreadsheet with the details of each failure (if any) for both manual and automated steps. How to run the example tests from scratch \u00b6 git clone https://github.com/seleniumbase/SeleniumBase.git cd SeleniumBase pip install . cd examples/master_qa pytest basic_masterqa_test_0.py pytest masterqa_test_1.py At the end of your test run, you'll receive a report with results, screenshots, and log files. Close the Results Page window when you're done. Check out masterqa_test_1.py to learn how to write your own MasterQA tests \u00b6 You'll notice that tests are written the same way as regular SeleniumBase tests, with the key difference being a different import: from seleniumbase import MasterQA rather than from seleniumbase import BaseCase . Now your Python test class will import MasterQA instead of BaseCase . To add a manual verification step, use self.verify() in the code after each part of your test that needs a manual verification step. If you want to include a custom question, add text inside that call (in quotes). Example: self . verify () self . verify ( \"Can you find the moon?\" ) MasterQA is powered by SeleniumBase , the most advanced open-source automation framework on the Planet .", "title": "MasterQA"}, {"location": "examples/master_qa/ReadMe/#how-to-run-the-example-tests-from-scratch", "text": "git clone https://github.com/seleniumbase/SeleniumBase.git cd SeleniumBase pip install . cd examples/master_qa pytest basic_masterqa_test_0.py pytest masterqa_test_1.py At the end of your test run, you'll receive a report with results, screenshots, and log files. Close the Results Page window when you're done.", "title": "How to run the example tests from scratch"}, {"location": "examples/master_qa/ReadMe/#check-out-masterqa_test_1py-to-learn-how-to-write-your-own-masterqa-tests", "text": "You'll notice that tests are written the same way as regular SeleniumBase tests, with the key difference being a different import: from seleniumbase import MasterQA rather than from seleniumbase import BaseCase . Now your Python test class will import MasterQA instead of BaseCase . To add a manual verification step, use self.verify() in the code after each part of your test that needs a manual verification step. If you want to include a custom question, add text inside that call (in quotes). Example: self . verify () self . verify ( \"Can you find the moon?\" ) MasterQA is powered by SeleniumBase , the most advanced open-source automation framework on the Planet .", "title": "Check out masterqa_test_1.py to learn how to write your own MasterQA tests"}, {"location": "examples/presenter/ReadMe/", "text": "\ud83d\udcd1 Presenter \ud83c\udf9e\ufe0f \u00b6 SeleniumBase Presenter (slide-maker) lets you use Python to generate HTML presentations. Here's a sample presentation: ( Click on the image/GIF for the actual presentation ) ( Here's the code for that presentation ) Slides can include HTML, code, images, and iframes. Here's how to run the example presentation: cd examples/presenter pytest my_presentation.py Here's a presentation with a chart: ( Click on the image/GIF for the actual presentation ) ( Here's the code for that presentation ) Here's how to run that example: cd examples/presenter pytest core_presentation.py Creating a new presentation: self . create_presentation ( name = None , theme = \"serif\" , transition = \"default\" ) \"\"\" Creates a Reveal-JS presentation that you can add slides to. @Params name - If creating multiple presentations at the same time, use this to specify the name of the current presentation. theme - Set a theme with a unique style for the presentation. Valid themes: \"serif\" (default), \"sky\", \"white\", \"black\", \"simple\", \"league\", \"moon\", \"night\", \"beige\", \"blood\", and \"solarized\". transition - Set a transition between slides. Valid transitions: \"none\" (default), \"slide\", \"fade\", \"zoom\", \"convex\", and \"concave\". \"\"\" If creating multiple presentations at the same time, you can pass the name parameter to distinguish between different presentations. Notes are disabled by default. You can enable notes by specifying: show_notes=True Adding a slide to a presentation: self . add_slide ( content = None , image = None , code = None , iframe = None , content2 = None , notes = None , transition = None , name = None ) \"\"\" Allows the user to add slides to a presentation. @Params content - The HTML content to display on the presentation slide. image - Attach an image (from a URL link) to the slide. code - Attach code of any programming language to the slide. Language-detection will be used to add syntax formatting. iframe - Attach an iFrame (from a URL link) to the slide. content2 - HTML content to display after adding an image or code. notes - Additional notes to include with the slide. ONLY SEEN if show_notes is set for the presentation. transition - Set a transition between slides. (overrides previous) Valid transitions: \"none\" (default), \"slide\", \"fade\", \"zoom\", \"convex\", and \"concave\". name - If creating multiple presentations at the same time, use this to select the presentation to add slides to. \"\"\" Running a presentation: self . begin_presentation ( filename = \"my_presentation.html\" , show_notes = False , interval = 0 ) \"\"\" Begin a Reveal-JS Presentation in the web browser. @Params name - If creating multiple presentations at the same time, use this to select the one you wish to add slides to. filename - The name of the HTML file that you wish to save the presentation to. (filename must end in \".html\") show_notes - When set to True, the Notes feature becomes enabled, which allows presenters to see notes next to slides. interval - The delay time between autoplaying slides. (in seconds) If set to 0 (default), autoplay is disabled. \"\"\" Before the presentation is run, the full HTML is saved to the saved_presentations/ folder. All methods have the optional name argument, which is only needed if you're creating multiple presentations at once. Here's an example of using SeleniumBase Presenter: from seleniumbase import BaseCase class MyPresenterClass ( BaseCase ): def test_presenter ( self ): self . create_presentation ( theme = \"serif\" ) self . add_slide ( '<h1>Welcome</h1><br /> \\n ' '<h3>Press the <b>Right Arrow</b></h3>' ) self . add_slide ( '<h3>SeleniumBase Presenter</h3><br /> \\n ' '<img width=\"240\" src=\"https://seleniumbase.io/img/logo3a.png\" />' '<span style=\"margin:144px;\" />' '<img src=\"https://seleniumbase.io/other/python_3d_logo.png\" />' '<br /><br /> \\n <h4>Create presentations with <b>Python</b></h4>' ) self . add_slide ( '<h3>Make slides using <b>HTML</b>:</h3><br /> \\n ' '<table style=\"padding:10px;border:4px solid black;font-size:50;\">' ' \\n <tr style=\"background-color:CDFFFF;\"> \\n ' '<th>Row ABC</th><th>Row XYZ</th></tr> \\n ' '<tr style=\"background-color:DCFDDC;\">' '<td>Value ONE</td><td>Value TWO</td></tr> \\n ' '<tr style=\"background-color:DFDFFB;\"> \\n ' '<td>Value THREE</td><td>Value FOUR</td></tr> \\n ' '</table><br /> \\n <h4>(HTML <b>table</b> example)</h4>' ) self . add_slide ( '<h3>Keyboard Shortcuts:</h3> \\n ' '<table style=\"padding:10px;border:4px solid black;font-size:30;' 'background-color:FFFFDD;\"> \\n ' '<tr><th>Key</th><th>Action</th></tr> \\n ' '<tr><td><b>=></b></td><td>Next Slide (N also works)</td></tr> \\n ' '<tr><td><b><=</b></td><td>Previous Slide (P also works)</td></tr>' ' \\n <tr><td>F</td><td>Full Screen Mode</td></tr> \\n ' '<tr><td>O</td><td>Overview Mode Toggle</td></tr> \\n ' '<tr><td>esc</td><td>Exit Full Screen / Overview Mode</td></tr> \\n ' '<tr><td><b>.</b></td><td>Pause/Resume Toggle</td></tr> \\n ' '<tr><td>space</td><td>Next Slide (alternative)</td></tr></table>' ) self . add_slide ( '<h3>Add <b>images</b> to slides:</h3>' , image = \"https://seleniumbase.io/other/seagulls.jpg\" ) self . add_slide ( '<h3>Add <b>code</b> to slides:</h3>' , code = ( 'from seleniumbase import BaseCase \\n\\n ' 'class MyTestClass(BaseCase): \\n\\n ' ' def test_basics(self): \\n ' ' self.open(\"https://store.xkcd.com/search\") \\n ' ' self.type( \\' input[name=\"q\"] \\' , \"xkcd book \\\\ n\") \\n ' ' self.assert_text(\"xkcd: volume 0\", \"h3\") \\n ' ' self.open(\"https://xkcd.com/353/\") \\n ' ' self.assert_title(\"xkcd: Python\") \\n ' ' self.assert_element( \\' img[alt=\"Python\"] \\' ) \\n ' ' self.click( \\' a[rel=\"license\"] \\' ) \\n ' ' self.assert_text(\"free to copy and reuse\") \\n ' ' self.go_back() \\n ' ' self.click_link(\"About\") \\n ' ' self.assert_exact_text(\"xkcd.com\", \"h2\")' )) self . add_slide ( \"<h3>Highlight <b>code</b> in slides:</h3>\" , code = ( 'from seleniumbase import BaseCase \\n\\n ' '<mark>class MyTestClass(BaseCase):</mark> \\n\\n ' ' def test_basics(self): \\n ' ' self.open(\"https://store.xkcd.com/search\") \\n ' ' self.type( \\' input[name=\"q\"] \\' , \"xkcd book \\\\ n\") \\n ' ' self.assert_text(\"xkcd: volume 0\", \"h3\")' )) self . add_slide ( '<h3>Add <b>iFrames</b> to slides:</h3>' , iframe = \"https://seleniumbase.io/demo_page\" ) self . add_slide ( '<h3>Getting started is <b>easy</b>:</h3>' , code = ( 'from seleniumbase import BaseCase \\n\\n ' 'class MyPresenterClass(BaseCase): \\n\\n ' ' def test_presenter(self): \\n ' ' self.create_presentation(theme=\"serif\") \\n ' ' self.add_slide(\"Welcome to Presenter!\") \\n ' ' self.add_slide( \\n ' ' \"Add code to slides:\", \\n ' ' code=( \\n ' ' \"from seleniumbase import BaseCase \\\\ n \\\\ n\" \\n ' ' \"class MyPresenterClass(BaseCase): \\\\ n \\\\ n\" \\n ' ' \" def test_presenter(self): \\\\ n\" \\n ' ' \" self.create_presentation() \\\\ n\")) \\n ' ' self.begin_presentation( \\n ' ' filename=\"demo.html\", show_notes=True)' )) self . add_slide ( '<h3>Include <b>notes</b> with slides:</h3><br />' , code = ( 'self.add_slide(\"[Your HTML goes here]\", \\n ' ' code=\"[Your software code goes here]\", \\n ' ' content2=\"[Additional HTML goes here]\", \\n ' ' notes=\"[Attached speaker notes go here]\" \\n ' ' \"[Note A! -- Note B! -- Note C! ]\")' ), notes = '<h2><ul><li>Note A!<li>Note B!<li>Note C!<li>Note D!</h2>' , content2 = \"<h4>(Notes can include HTML tags)</h4>\" ) self . add_slide ( '<h3>Multiple <b>themes</b> available:</h3>' , code = ( 'self.create_presentation(theme=\"serif\") \\n\\n ' 'self.create_presentation(theme=\"sky\") \\n\\n ' 'self.create_presentation(theme=\"simple\") \\n\\n ' 'self.create_presentation(theme=\"white\") \\n\\n ' 'self.create_presentation(theme=\"moon\") \\n\\n ' 'self.create_presentation(theme=\"black\") \\n\\n ' 'self.create_presentation(theme=\"night\") \\n\\n ' 'self.create_presentation(theme=\"beige\") \\n\\n ' 'self.create_presentation(theme=\"league\")' )) self . add_slide ( '<h2><b>The End</b></h2>' , image = \"https://seleniumbase.io/img/sb_logo_10.png\" ) self . begin_presentation ( filename = \"presenter.html\" , show_notes = True , interval = 0 ) That example is from my_presentation.py , which you can run from the examples/presenter folder with the following command: pytest my_presentation.py Saving a presentation: If you want to save the presentation you created as an HTML file, use: self . save_presentation ( filename = \"my_presentation.html\" , show_notes = True ) Presentations automatically get saved when calling: self . begin_presentation ( show_notes = True )", "title": "Presentation Maker"}, {"location": "examples/presenter/ReadMe/#presenter", "text": "SeleniumBase Presenter (slide-maker) lets you use Python to generate HTML presentations. Here's a sample presentation: ( Click on the image/GIF for the actual presentation ) ( Here's the code for that presentation ) Slides can include HTML, code, images, and iframes. Here's how to run the example presentation: cd examples/presenter pytest my_presentation.py Here's a presentation with a chart: ( Click on the image/GIF for the actual presentation ) ( Here's the code for that presentation ) Here's how to run that example: cd examples/presenter pytest core_presentation.py", "title": " \ud83d\udcd1 Presenter \ud83c\udf9e\ufe0f"}, {"location": "examples/tour_examples/ReadMe/", "text": "Interactive Product Tours \u00b6 Increase SaaS Product Adoption by 10x or more. SeleniumBase Tours utilize 5 JavaScript libraries for creating interactive walkthroughs on any website : IntroJS , Bootstrap Tour , DriverJS , Shepherd , and Hopscotch . A tour demo: (with autoplay) SeleniumBase maps_introjs_tour.py cd examples/tour_examples pytest maps_introjs_tour.py --interval = 1 Here's a longer version: SeleniumBase google_tour.py cd examples/tour_examples pytest google_tour.py (From GitHub => SeleniumBase/examples/tour_examples ) Creating a new tour \u00b6 To create a tour utilizing the Shepherd Library, use one of the following \u00b6 self.create_shepherd_tour() OR self.create_tour(theme=\"shepherd\") You can pass a custom theme to change the look & feel of Shepherd tours. Valid themes for Shepherd Tours are dark , light / arrows , default , square , and square-dark . To create a tour utilizing the Bootstrap Tour Library, use one of the following \u00b6 self.create_bootstrap_tour() OR self.create_tour(theme=\"bootstrap\") To create a tour utilizing the IntroJS Library, use one of the following \u00b6 self.create_introjs_tour() OR self.create_tour(theme=\"introjs\") To create a tour utilizing the DriverJS Library, use one of the following \u00b6 self.create_driverjs_tour() OR self.create_tour(theme=\"driverjs\") To create a tour utilizing the Hopscotch Library, use one of the following \u00b6 self.create_hopscotch_tour() OR self.create_tour(theme=\"hopscotch\") Adding a step to a tour \u00b6 To add a tour step, use the following \u00b6 self.add_tour_step(message, css_selector, title, alignment, theme) With the self.add_tour_step() method, you must first pass a message to display. You can then specify a web element to attach to (by using CSS selectors ). If no element is specified, the tour step will tether to the top of the screen by default. You can also add an optional title above the message to display with the tour step, as well as change the theme for that step (Shepherd tours only), and even specify the alignment (which is the side of the element that you want the tour message to tether to). Playing a tour \u00b6 You can play a tour by calling: self.play_tour(interval) If you specify an interval (optional), the tour will automatically walk through each step after that many seconds have passed. All methods have the optional name argument, which is only needed if you're creating multiple tours at once. Then, when you're adding a step or playing a tour, SeleniumBase knows which tour you're referring too. You can avoid using the name arg for multiple tours if you play a tour before creating a new one. Here's how the code looks \u00b6 from seleniumbase import BaseCase class MyTourClass ( BaseCase ): def test_google_tour ( self ): self . open ( 'https://google.com/ncr' ) self . wait_for_element ( 'input[title=\"Search\"]' ) self . create_tour ( theme = \"dark\" ) self . add_tour_step ( \"Welcome to Google!\" , title = \"SeleniumBase Tours\" ) self . add_tour_step ( \"Type in your query here.\" , 'input[title=\"Search\"]' ) self . play_tour () self . highlight_type ( 'input[title=\"Search\"]' , \"Google\" ) self . wait_for_element ( '[role=\"listbox\"]' ) # Wait for autocomplete self . create_tour ( theme = \"light\" ) self . add_tour_step ( \"Then click to search.\" , '[value=\"Google Search\"]' ) self . add_tour_step ( \"Or press [ENTER] after entry.\" , '[title=\"Search\"]' ) self . play_tour () That code is from google_tour.py , which you can run from the tour_examples/ folder with the following command \u00b6 pytest google_tour.py Exporting a Tour \u00b6 If you want to save the tour you created as a JavaScript file, use: self.export_tour() OR self.export_tour(name=None, filename=\"my_tour.js\") ( name is optional unless you gave custom names to your tours when you created them. filename is the name of the file to save the JavaScript to.) Once you've exported your tour, you can use it outside of SeleniumBase. You can even copy the tour's JavaScript code to the Console of your web browser to play the tour from there (you need to be on the correct web page for it to work).", "title": "Tour Maker"}, {"location": "examples/tour_examples/ReadMe/#interactive-product-tours", "text": "Increase SaaS Product Adoption by 10x or more. SeleniumBase Tours utilize 5 JavaScript libraries for creating interactive walkthroughs on any website : IntroJS , Bootstrap Tour , DriverJS , Shepherd , and Hopscotch . A tour demo: (with autoplay) SeleniumBase maps_introjs_tour.py cd examples/tour_examples pytest maps_introjs_tour.py --interval = 1 Here's a longer version: SeleniumBase google_tour.py cd examples/tour_examples pytest google_tour.py (From GitHub => SeleniumBase/examples/tour_examples )", "title": " Interactive Product Tours"}, {"location": "examples/tour_examples/ReadMe/#creating-a-new-tour", "text": "", "title": "Creating a new tour"}, {"location": "examples/tour_examples/ReadMe/#to-create-a-tour-utilizing-the-shepherd-library-use-one-of-the-following", "text": "self.create_shepherd_tour() OR self.create_tour(theme=\"shepherd\") You can pass a custom theme to change the look & feel of Shepherd tours. Valid themes for Shepherd Tours are dark , light / arrows , default , square , and square-dark .", "title": "To create a tour utilizing the Shepherd Library, use one of the following"}, {"location": "examples/tour_examples/ReadMe/#to-create-a-tour-utilizing-the-bootstrap-tour-library-use-one-of-the-following", "text": "self.create_bootstrap_tour() OR self.create_tour(theme=\"bootstrap\")", "title": "To create a tour utilizing the Bootstrap Tour Library, use one of the following"}, {"location": "examples/tour_examples/ReadMe/#to-create-a-tour-utilizing-the-introjs-library-use-one-of-the-following", "text": "self.create_introjs_tour() OR self.create_tour(theme=\"introjs\")", "title": "To create a tour utilizing the IntroJS Library, use one of the following"}, {"location": "examples/tour_examples/ReadMe/#to-create-a-tour-utilizing-the-driverjs-library-use-one-of-the-following", "text": "self.create_driverjs_tour() OR self.create_tour(theme=\"driverjs\")", "title": "To create a tour utilizing the DriverJS Library, use one of the following"}, {"location": "examples/tour_examples/ReadMe/#to-create-a-tour-utilizing-the-hopscotch-library-use-one-of-the-following", "text": "self.create_hopscotch_tour() OR self.create_tour(theme=\"hopscotch\")", "title": "To create a tour utilizing the Hopscotch Library, use one of the following"}, {"location": "examples/tour_examples/ReadMe/#adding-a-step-to-a-tour", "text": "", "title": "Adding a step to a tour"}, {"location": "examples/tour_examples/ReadMe/#to-add-a-tour-step-use-the-following", "text": "self.add_tour_step(message, css_selector, title, alignment, theme) With the self.add_tour_step() method, you must first pass a message to display. You can then specify a web element to attach to (by using CSS selectors ). If no element is specified, the tour step will tether to the top of the screen by default. You can also add an optional title above the message to display with the tour step, as well as change the theme for that step (Shepherd tours only), and even specify the alignment (which is the side of the element that you want the tour message to tether to).", "title": "To add a tour step, use the following"}, {"location": "examples/tour_examples/ReadMe/#playing-a-tour", "text": "You can play a tour by calling: self.play_tour(interval) If you specify an interval (optional), the tour will automatically walk through each step after that many seconds have passed. All methods have the optional name argument, which is only needed if you're creating multiple tours at once. Then, when you're adding a step or playing a tour, SeleniumBase knows which tour you're referring too. You can avoid using the name arg for multiple tours if you play a tour before creating a new one.", "title": "Playing a tour"}, {"location": "examples/tour_examples/ReadMe/#heres-how-the-code-looks", "text": "from seleniumbase import BaseCase class MyTourClass ( BaseCase ): def test_google_tour ( self ): self . open ( 'https://google.com/ncr' ) self . wait_for_element ( 'input[title=\"Search\"]' ) self . create_tour ( theme = \"dark\" ) self . add_tour_step ( \"Welcome to Google!\" , title = \"SeleniumBase Tours\" ) self . add_tour_step ( \"Type in your query here.\" , 'input[title=\"Search\"]' ) self . play_tour () self . highlight_type ( 'input[title=\"Search\"]' , \"Google\" ) self . wait_for_element ( '[role=\"listbox\"]' ) # Wait for autocomplete self . create_tour ( theme = \"light\" ) self . add_tour_step ( \"Then click to search.\" , '[value=\"Google Search\"]' ) self . add_tour_step ( \"Or press [ENTER] after entry.\" , '[title=\"Search\"]' ) self . play_tour ()", "title": "Here's how the code looks"}, {"location": "examples/tour_examples/ReadMe/#that-code-is-from-google_tourpy-which-you-can-run-from-the-tour_examples-folder-with-the-following-command", "text": "pytest google_tour.py", "title": "That code is from google_tour.py, which you can run from the tour_examples/ folder with the following command"}, {"location": "examples/tour_examples/ReadMe/#exporting-a-tour", "text": "If you want to save the tour you created as a JavaScript file, use: self.export_tour() OR self.export_tour(name=None, filename=\"my_tour.js\") ( name is optional unless you gave custom names to your tours when you created them. filename is the name of the file to save the JavaScript to.) Once you've exported your tour, you can use it outside of SeleniumBase. You can even copy the tour's JavaScript code to the Console of your web browser to play the tour from there (you need to be on the correct web page for it to work).", "title": "Exporting a Tour"}, {"location": "examples/visual_testing/ReadMe/", "text": "Automated Visual Regression Testing \u00b6 Automated Visual Regression Testing can help you detect when the layout of a web page has changed. Instead of comparing pixels from screenshots, layout differences can be detected by comparing HTML tags and attributes with a baseline. If a change is detected, it could mean that something broke, the web page was redesigned, or dynamic content changed. To handle automated visual testing, SeleniumBase uses the self.check_window() method, which can set visual baselines for comparison and then compare the latest versions of web pages to the existing baseline. The first time a test calls self.check_window() with a unique name parameter, the visual baseline is set, which means a folder is created with the following files: page_url.txt -> The URL of the current window baseline.png -> The baseline screenshot (PNG) tags_level1.txt -> HTML tags from the window tags_level2.txt -> HTML tags + attribute names tags_level3.txt -> HTML tags + attribute names+values After the first time self.check_window() is called, later calls will compare the HTML tags and attributes of the latest window to the ones from the first call ( or to the ones from the call when the baseline was last reset ). Additionally, a latest.png screenshot is saved in the same folder, which can help you determine if/when the existing baseline needs to be reset. Here's an example call: self . check_window ( name = \"first_test)\" , level = 3 ) On the first run ( or if the baseline is being set/reset ) the \"level\" doesn't matter because that's only used for comparing the current layout to the existing baseline. Here's how the level system works: level=0 -> DRY RUN ONLY - Will perform a comparison to the baseline, and print out any differences that are found, but won't fail the test even if differences exist. level=1 -> HTML tags are compared to tags_level1.txt level=2 -> HTML tags and attribute names are compared to tags_level2.txt level=3 -> HTML tags and attribute names+values are compared to tags_level3.txt As shown, Level-3 is the most strict, Level-1 is the least strict. If the comparisons from the latest window to the existing baseline don't match, the current test will fail, except for Level-0 checks, which print Level-3 results without failing the test. You can reset the visual baseline on the command line by adding the following parameter at runtime: --visual_baseline As long as --visual_baseline is used on the command line while running tests, the self.check_window() method cannot fail because it will rebuild the visual baseline rather than comparing the html tags of the latest run to the existing baseline. If there are any expected layout changes to a website that you're testing, you'll need to reset the baseline to prevent unnecessary failures. self.check_window() will fail with \"Page Domain Mismatch Failure\" if the domain of the current URL doesn't match the domain of the baseline URL. If you want to use self.check_window() to compare a web page to a later version of itself in the same test, add the baseline=True parameter to your first self.check_window() call to use that as the baseline. ( This only makes sense if you're calling self.check_window() more than once with the same \"name\" parameter in the same test. ) Automated Visual Testing with self.check_window() is not very effective for websites that have dynamic content because that changes the layout and structure of web pages. For those pages, you're much better off using regular SeleniumBase functional testing, unless you can remove the dynamic content before performing the comparison, (such as by using self.ad_block() to remove dynamic ad content on a web page). Example usage of self.check_window() with different levels: self . check_window ( name = \"testing\" , level = 0 ) self . check_window ( name = \"xkcd_home\" , level = 1 ) self . check_window ( name = \"github_page\" , level = 2 ) self . check_window ( name = \"wikipedia_page\" , level = 3 ) self . check_window ( name = \"helloworld\" , baseline = True ) ### Do something that may change the web page self . check_window ( name = \"helloworld\" , level = 3 ) Here's an example where clicking a button makes a hidden element visible: from seleniumbase import BaseCase class VisualLayoutTest ( BaseCase ): def test_applitools_layout_change_failure ( self ): self . open ( 'https://applitools.com/helloworld?diff1' ) print ( ' \\n Creating baseline in \"visual_baseline\" folder.' ) self . check_window ( name = \"helloworld\" , baseline = True ) # Click a button that changes the text of an element self . click ( 'a[href=\"?diff1\"]' ) # Click a button that makes a hidden element visible self . click ( \"button\" ) self . check_window ( name = \"helloworld\" , level = 3 ) Here's the output of that: ( Text changes do not impact visual comparisons ) AssertionError: First differing element 39: ['div', [['class', ['section', 'hidden-section', 'image-section']]]] ['div', [['class', ['section', 'image-section']]]] - ['div', [['class', ['section', 'hidden-section', 'image-section']]]], ? ------------------ + ['div', [['class', ['section', 'image-section']]]], * *** Exception: <Level 3> Visual Diff Failure: * HTML tag attribute values don't match the baseline! Here's an example where a button is removed from a web page: from seleniumbase import BaseCase class VisualLayoutTest ( BaseCase ): def test_python_home_layout_change_failure ( self ): self . open ( 'https://python.org/' ) print ( ' \\n Creating baseline in \"visual_baseline\" folder.' ) self . check_window ( name = \"python_home\" , baseline = True ) # Remove the \"Donate\" button self . remove_element ( 'a.donate-button' ) self . check_window ( name = \"python_home\" , level = 3 ) Here's the output of that: AssertionError: First differing element 33: ['a', [['class', ['donate-button']], ['href', '/psf/donations/']]] ['div', [['class', ['options-bar']]]] - ['a', [['class', ['donate-button']], ['href', '/psf/donations/']]], - 'display: list-item; opacity: 0.995722;']]], ? ------------------- + 'display: list-item;']]], * *** Exception: <Level 3> Visual Diff Failure: * HTML tag attribute values don't match the baseline! Here's the side_by_side.html file for that, (from the ./latest_logs/ folder), which shows a visual comparison of the two screenshots as a result of the missing \"Donate\" button: Here's another example, where a web site logo is resized: from seleniumbase import BaseCase class VisualLayoutTest ( BaseCase ): def test_xkcd_layout_change_failure ( self ): self . open ( 'https://xkcd.com/554/' ) print ( ' \\n Creating baseline in \"visual_baseline\" folder.' ) self . check_window ( name = \"xkcd_554\" , baseline = True ) # Change height: (83 -> 130) , Change width: (185 -> 120) self . set_attribute ( '[alt=\"xkcd.com logo\"]' , \"height\" , \"130\" ) self . set_attribute ( '[alt=\"xkcd.com logo\"]' , \"width\" , \"120\" ) self . check_window ( name = \"xkcd_554\" , level = 3 ) Here's the output of that: AssertionError: First differing element 22: ['img[30 chars]['height', '83'], ['src', '/s/0b7742.png'], ['width', '185']]] ['img[30 chars]['height', '130'], ['src', '/s/0b7742.png'], ['width', '120']]] - ['height', '83'], ? ^ + ['height', '130'], ? ^ + - ['width', '185']]], ? ^^ + ['width', '120']]], ? ^^ * *** Exception: <Level 3> Visual Diff Failure: * HTML tag attribute values don't match the baseline! To run the example (from examples/visual_testing/ ) with a pytest HTML Report, use: pytest test_layout_fail.py --html = report.html Here's what the pytest HTML Report looks like: In conclusion, open source automated visual testing tools are being built directly into test frameworks, and this trend is growing. Just like many years ago when free Wi-Fi at coffee shops replaced Internet cafes that charged money for Internet access, open source tools for visual testing will replace their paid counterparts in time. You'll remember this next time you're sipping your Starbucks\u00ae Pumpkin Spice Latte with your free Internet access, instead of paying for Internet at cybercafes.", "title": "Visual Testing"}, {"location": "examples/visual_testing/ReadMe/#automated-visual-regression-testing", "text": "Automated Visual Regression Testing can help you detect when the layout of a web page has changed. Instead of comparing pixels from screenshots, layout differences can be detected by comparing HTML tags and attributes with a baseline. If a change is detected, it could mean that something broke, the web page was redesigned, or dynamic content changed. To handle automated visual testing, SeleniumBase uses the self.check_window() method, which can set visual baselines for comparison and then compare the latest versions of web pages to the existing baseline. The first time a test calls self.check_window() with a unique name parameter, the visual baseline is set, which means a folder is created with the following files: page_url.txt -> The URL of the current window baseline.png -> The baseline screenshot (PNG) tags_level1.txt -> HTML tags from the window tags_level2.txt -> HTML tags + attribute names tags_level3.txt -> HTML tags + attribute names+values After the first time self.check_window() is called, later calls will compare the HTML tags and attributes of the latest window to the ones from the first call ( or to the ones from the call when the baseline was last reset ). Additionally, a latest.png screenshot is saved in the same folder, which can help you determine if/when the existing baseline needs to be reset. Here's an example call: self . check_window ( name = \"first_test)\" , level = 3 ) On the first run ( or if the baseline is being set/reset ) the \"level\" doesn't matter because that's only used for comparing the current layout to the existing baseline. Here's how the level system works: level=0 -> DRY RUN ONLY - Will perform a comparison to the baseline, and print out any differences that are found, but won't fail the test even if differences exist. level=1 -> HTML tags are compared to tags_level1.txt level=2 -> HTML tags and attribute names are compared to tags_level2.txt level=3 -> HTML tags and attribute names+values are compared to tags_level3.txt As shown, Level-3 is the most strict, Level-1 is the least strict. If the comparisons from the latest window to the existing baseline don't match, the current test will fail, except for Level-0 checks, which print Level-3 results without failing the test. You can reset the visual baseline on the command line by adding the following parameter at runtime: --visual_baseline As long as --visual_baseline is used on the command line while running tests, the self.check_window() method cannot fail because it will rebuild the visual baseline rather than comparing the html tags of the latest run to the existing baseline. If there are any expected layout changes to a website that you're testing, you'll need to reset the baseline to prevent unnecessary failures. self.check_window() will fail with \"Page Domain Mismatch Failure\" if the domain of the current URL doesn't match the domain of the baseline URL. If you want to use self.check_window() to compare a web page to a later version of itself in the same test, add the baseline=True parameter to your first self.check_window() call to use that as the baseline. ( This only makes sense if you're calling self.check_window() more than once with the same \"name\" parameter in the same test. ) Automated Visual Testing with self.check_window() is not very effective for websites that have dynamic content because that changes the layout and structure of web pages. For those pages, you're much better off using regular SeleniumBase functional testing, unless you can remove the dynamic content before performing the comparison, (such as by using self.ad_block() to remove dynamic ad content on a web page). Example usage of self.check_window() with different levels: self . check_window ( name = \"testing\" , level = 0 ) self . check_window ( name = \"xkcd_home\" , level = 1 ) self . check_window ( name = \"github_page\" , level = 2 ) self . check_window ( name = \"wikipedia_page\" , level = 3 ) self . check_window ( name = \"helloworld\" , baseline = True ) ### Do something that may change the web page self . check_window ( name = \"helloworld\" , level = 3 ) Here's an example where clicking a button makes a hidden element visible: from seleniumbase import BaseCase class VisualLayoutTest ( BaseCase ): def test_applitools_layout_change_failure ( self ): self . open ( 'https://applitools.com/helloworld?diff1' ) print ( ' \\n Creating baseline in \"visual_baseline\" folder.' ) self . check_window ( name = \"helloworld\" , baseline = True ) # Click a button that changes the text of an element self . click ( 'a[href=\"?diff1\"]' ) # Click a button that makes a hidden element visible self . click ( \"button\" ) self . check_window ( name = \"helloworld\" , level = 3 ) Here's the output of that: ( Text changes do not impact visual comparisons ) AssertionError: First differing element 39: ['div', [['class', ['section', 'hidden-section', 'image-section']]]] ['div', [['class', ['section', 'image-section']]]] - ['div', [['class', ['section', 'hidden-section', 'image-section']]]], ? ------------------ + ['div', [['class', ['section', 'image-section']]]], * *** Exception: <Level 3> Visual Diff Failure: * HTML tag attribute values don't match the baseline! Here's an example where a button is removed from a web page: from seleniumbase import BaseCase class VisualLayoutTest ( BaseCase ): def test_python_home_layout_change_failure ( self ): self . open ( 'https://python.org/' ) print ( ' \\n Creating baseline in \"visual_baseline\" folder.' ) self . check_window ( name = \"python_home\" , baseline = True ) # Remove the \"Donate\" button self . remove_element ( 'a.donate-button' ) self . check_window ( name = \"python_home\" , level = 3 ) Here's the output of that: AssertionError: First differing element 33: ['a', [['class', ['donate-button']], ['href', '/psf/donations/']]] ['div', [['class', ['options-bar']]]] - ['a', [['class', ['donate-button']], ['href', '/psf/donations/']]], - 'display: list-item; opacity: 0.995722;']]], ? ------------------- + 'display: list-item;']]], * *** Exception: <Level 3> Visual Diff Failure: * HTML tag attribute values don't match the baseline! Here's the side_by_side.html file for that, (from the ./latest_logs/ folder), which shows a visual comparison of the two screenshots as a result of the missing \"Donate\" button: Here's another example, where a web site logo is resized: from seleniumbase import BaseCase class VisualLayoutTest ( BaseCase ): def test_xkcd_layout_change_failure ( self ): self . open ( 'https://xkcd.com/554/' ) print ( ' \\n Creating baseline in \"visual_baseline\" folder.' ) self . check_window ( name = \"xkcd_554\" , baseline = True ) # Change height: (83 -> 130) , Change width: (185 -> 120) self . set_attribute ( '[alt=\"xkcd.com logo\"]' , \"height\" , \"130\" ) self . set_attribute ( '[alt=\"xkcd.com logo\"]' , \"width\" , \"120\" ) self . check_window ( name = \"xkcd_554\" , level = 3 ) Here's the output of that: AssertionError: First differing element 22: ['img[30 chars]['height', '83'], ['src', '/s/0b7742.png'], ['width', '185']]] ['img[30 chars]['height', '130'], ['src', '/s/0b7742.png'], ['width', '120']]] - ['height', '83'], ? ^ + ['height', '130'], ? ^ + - ['width', '185']]], ? ^^ + ['width', '120']]], ? ^^ * *** Exception: <Level 3> Visual Diff Failure: * HTML tag attribute values don't match the baseline! To run the example (from examples/visual_testing/ ) with a pytest HTML Report, use: pytest test_layout_fail.py --html = report.html Here's what the pytest HTML Report looks like: In conclusion, open source automated visual testing tools are being built directly into test frameworks, and this trend is growing. Just like many years ago when free Wi-Fi at coffee shops replaced Internet cafes that charged money for Internet access, open source tools for visual testing will replace their paid counterparts in time. You'll remember this next time you're sipping your Starbucks\u00ae Pumpkin Spice Latte with your free Internet access, instead of paying for Internet at cybercafes.", "title": " Automated Visual Regression Testing"}, {"location": "help_docs/ReadMe/", "text": "Help Docs \u00b6 \ud83d\ude81 Start | \ud83d\udcca Dashboard \ud83c\udff0 Features | \ud83c\udf9b\ufe0f Options \ud83d\udcd6 Examples | \ud83d\udcf1 Mobile \ud83d\udcdd Syntax Formats | \ud83e\udd16 CI/CD \ud83d\udcd9 APIs | \ud83d\udcca Reports | \ud83d\ude8e Tours \ud83d\udd2e Console Scripts | \ud83c\udf10 Grid \u267b\ufe0f Boilerplates | \ud83d\uddfe Locale Codes \ud83d\udd79\ufe0f JS Manager | \ud83d\uddbc\ufe0f Visual Testing \ud83d\udd34 Recorder | \ud83d\ude89 Node GUI \ud83c\ude3a Translator | \ud83d\udec2 Dialog Boxes \ud83c\udf9e\ufe0f Slides | \ud83d\udcca Charts Table of Contents ( seleniumbase.io ) Features List Command Line Tutorial Usage Examples Demo Page for Tests How SeleniumBase Works Installing Python, Pip, & Git Python Virtual Env Tutorial SeleniumBase Installation Webdriver Installation Verify Webdriver Works Console Scripts Tutorial The Dashboard Recorder Mode pytest Commander Syntax Formats Behave BDD Behave Commander Mobile Device Testing Method Summary (API Ref) Case Plans Language Translations Language Locale Codes JS Package Manager Tour Examples Presentation Maker Chart Maker MySQL Installation Overview Using the Selenium Grid Browser Desired Capabilities Safari Driver Detailed Info Seeing Hidden Files on macOS Case Studies Demo Pages / Web Examples Demo Page (Test Page) MFA Login (Test Page) TinyMCE (Test Page) Error Page (Test Page) Drag-&-Drop (Test Page) Device Farm (Virtual) HTML Playground Page SeleniumBase in iframe Page with broken links Shadow DOM/Root W3Schools iframes W3Schools file upload W3Schools doubleclick W3Schools drag & drop W3Schools checkboxes W3Schools radio buttons Presentations Presenter Demo Core Presentation Chart Maker Demo Python Virtual Envs GitHub Pages ( seleniumbase.dev ) Features List Command Line Tutorial Usage Examples How SeleniumBase Works Installing Python, Pip, & Git Python Virtual Env Tutorial SeleniumBase Installation Webdriver Installation Verify Webdriver Works Console Scripts Tutorial The Dashboard Recorder Mode pytest Commander Syntax Formats Behave BDD Behave Commander Mobile Device Testing Method Summary (API Ref) Case Plans Language Translations Language Locale Codes JS Package Manager Tour Examples Presentation Maker Chart Maker MySQL Installation Overview Using the Selenium Grid Browser Desired Capabilities Safari Driver Detailed Info Seeing Hidden Files on macOS Case Studies", "title": "Table of Contents"}, {"location": "help_docs/ReadMe/#help-docs", "text": "\ud83d\ude81 Start | \ud83d\udcca Dashboard \ud83c\udff0 Features | \ud83c\udf9b\ufe0f Options \ud83d\udcd6 Examples | \ud83d\udcf1 Mobile \ud83d\udcdd Syntax Formats | \ud83e\udd16 CI/CD \ud83d\udcd9 APIs | \ud83d\udcca Reports | \ud83d\ude8e Tours \ud83d\udd2e Console Scripts | \ud83c\udf10 Grid \u267b\ufe0f Boilerplates | \ud83d\uddfe Locale Codes \ud83d\udd79\ufe0f JS Manager | \ud83d\uddbc\ufe0f Visual Testing \ud83d\udd34 Recorder | \ud83d\ude89 Node GUI \ud83c\ude3a Translator | \ud83d\udec2 Dialog Boxes \ud83c\udf9e\ufe0f Slides | \ud83d\udcca Charts", "title": " Help Docs"}, {"location": "help_docs/behave_gui/", "text": "SeleniumBase Behave GUI / Commander \ud83d\udc1d\ud83c\udf96\ufe0f \u00b6 \ud83d\udc1d\ud83c\udf96\ufe0f The SeleniumBase Behave GUI lets you run behave scripts from a Desktop GUI. \ud83d\udc1d\ud83c\udf96\ufe0f To launch it, call sbase behave-gui or sbase gui-behave : > sbase behave-gui * Starting the SeleniumBase Behave Commander GUI App... \ud83d\udc1d\ud83c\udf96\ufe0f SeleniumBase Behave GUI loads the same tests that are found by: behave -d \ud83d\udc1d\ud83c\udf96\ufe0f You can customize which tests are loaded by passing additional args: sbase behave-gui [ OPTIONAL PATH or TEST FILE ] \ud83d\udc1d\ud83c\udf96\ufe0f Here are examples of customizing test collection: sbase behave-gui # all tests sbase behave-gui -i = calculator # tests with \"calculator\" in the name sbase behave-gui features/ # tests located in the \"features/\" folder sbase behave-gui features/calculator.feature # tests in that feature \ud83d\udc1d\ud83c\udf96\ufe0f Once launched, you can further customize which tests to run and what settings to use. There are various controls for changing settings, modes, and other \"behave\" command line options that are specific to SeleniumBase. You can also set additional options that don't have a visible toggle. When you're ready to run the selected tests with the specified options, click on the Run Selected Tests button. \ud83d\udc1d\u26aa With the Dashboard enabled, you'll get one of these: To learn more about SeleniumBase, check out the Docs Site: All the code is on GitHub:", "title": "Behave-BDD GUI App"}, {"location": "help_docs/behave_gui/#seleniumbase-behave-gui-commander", "text": "\ud83d\udc1d\ud83c\udf96\ufe0f The SeleniumBase Behave GUI lets you run behave scripts from a Desktop GUI. \ud83d\udc1d\ud83c\udf96\ufe0f To launch it, call sbase behave-gui or sbase gui-behave : > sbase behave-gui * Starting the SeleniumBase Behave Commander GUI App... \ud83d\udc1d\ud83c\udf96\ufe0f SeleniumBase Behave GUI loads the same tests that are found by: behave -d \ud83d\udc1d\ud83c\udf96\ufe0f You can customize which tests are loaded by passing additional args: sbase behave-gui [ OPTIONAL PATH or TEST FILE ] \ud83d\udc1d\ud83c\udf96\ufe0f Here are examples of customizing test collection: sbase behave-gui # all tests sbase behave-gui -i = calculator # tests with \"calculator\" in the name sbase behave-gui features/ # tests located in the \"features/\" folder sbase behave-gui features/calculator.feature # tests in that feature \ud83d\udc1d\ud83c\udf96\ufe0f Once launched, you can further customize which tests to run and what settings to use. There are various controls for changing settings, modes, and other \"behave\" command line options that are specific to SeleniumBase. You can also set additional options that don't have a visible toggle. When you're ready to run the selected tests with the specified options, click on the Run Selected Tests button. \ud83d\udc1d\u26aa With the Dashboard enabled, you'll get one of these: To learn more about SeleniumBase, check out the Docs Site: All the code is on GitHub:", "title": " SeleniumBase Behave GUI / Commander \ud83d\udc1d\ud83c\udf96\ufe0f"}, {"location": "help_docs/case_plans/", "text": "SeleniumBase Case Plans \ud83d\uddc2\ufe0f \u00b6 \ud83d\uddc2\ufe0f SeleniumBase Case Plans is Test Case Management Software that uses Markdown tables for displaying test plans directly in GitHub (and other source code management systems that support Markdown format). \ud83d\uddc2\ufe0f The case_summary.md file is generated from individual Case Plans that exist in the case_plans/ folders of your repository. (See the example below to learn how the Case Summary file may look.) Example of a case_summary.md file: Summary of existing Case Plans \ud83d\udd35 8 Case Plans with customized tables \u2b55 2 Case Plans using boilerplate code \ud83d\udea7 1 Case Plan that is missing a table \ud83d\udd0e (Click rows to expand) \ud83d\udd0d \ud83d\udd35 basic_test.py::MyTestClass::test_basics | # | Step Description | Expected Result | | - | ---------------- | --------------- | | 1 | Log in to https://www.saucedemo.com with ``standard_user``. | Login was successful. | | 2 | Click on the ``Backpack`` ``ADD TO CART`` button. | The button text changed to ``REMOVE``. | | 3 | Click on the cart icon. | The ``Backpack`` is seen in the cart. | | 4 | Remove the ``Backpack`` from the cart. | The ``Backpack`` is no longer in the cart. | | 5 | Log out from the website. | Logout was successful. | \ud83d\udd35 list_assert_test.py::MyTestClass::test_assert_list_of_elements | # | Step Description | Expected Result | | - | ---------------- | --------------- | | 1 | Open https://seleniumbase.io/demo_page. | | | 2 | Use ``self.assert_elements_present(\"head\", \"style\", \"script\")`` to verify that multiple elements are present in the HTML. | The assertion is successful. | | 3 | Use ``self.assert_elements(\"h1\", \"h2\", \"h3\")`` to verify that multiple elements are visible. | The assertion is successful. | | 4 | Use ``self.assert_elements([\"#myDropdown\", \"#myButton\", \"#svgRect\"])`` to verify that multiple elements are visible. | The assertion is successful. | \u2b55 locale_code_test.py::LocaleCodeTests::test_locale_code | # | Step Description | Expected Result | | - | ---------------- | --------------- | | 1 | Perform Action 1 | Verify Action 1 | | 2 | Perform Action 2 | Verify Action 2 | \ud83d\udd35 my_first_test.py::MyTestClass::test_swag_labs | # | Step Description | Expected Result | | - | ---------------- | --------------- | | 1 | Log in to https://www.saucedemo.com with ``standard_user``. | Login was successful. | | 2 | Click on the ``Backpack`` ``ADD TO CART`` button. | The button text changed to ``REMOVE``. | | 3 | Click on the cart icon. | The ``Backpack`` is seen in the cart. | | 4 | Click on the ``CHECKOUT`` button. Enter user details and click ``CONTINUE``. | The ``Backpack`` is seen in the cart on the ``CHECKOUT: OVERVIEW`` page. | | 5 | Click on the ``FINISH`` button. | There is a ``Thank You`` message and a ``Pony Express`` delivery logo. | | 6 | Log out from the website. | Logout was successful. | \u2b55 proxy_test.py::ProxyTests::test_proxy | # | Step Description | Expected Result | | - | ---------------- | --------------- | | 1 | Perform Action 1 | Verify Action 1 | | 2 | Perform Action 2 | Verify Action 2 | \ud83d\udd35 shadow_root_test.py::ShadowRootTest::test_shadow_root | # | Step Description | Expected Result | | - | ---------------- | --------------- | | 1 | Open https://seleniumbase.io/other/shadow_dom. Click each tab and verify the text contained within the Shadow Root sections. | Tab 1 text: ``Content Panel 1`` Tab 2 text: ``Content Panel 2`` Tab 3 text: ``Content Panel 3`` | \ud83d\udea7 test_agent.py::UserAgentTests::test_user_agent \ud83d\udd35 test_calculator.py::CalculatorTests::test_6_times_7_plus_12_equals_54 | # | Step Description | Expected Result | | - | ---------------- | --------------- | | 1 | Open https://seleniumbase.io/apps/calculator. Perform the following calculation: ``6 \u00d7 7 + 12`` | The output is ``54`` after pressing ``=`` | \ud83d\udd35 test_demo_site.py::DemoSiteTests::test_demo_site | # | Step Description | Expected Result | | - | ---------------- | --------------- | | 1 | Open https://seleniumbase.io/demo_page | | | 2 | Assert the title of the current web page. Assert that a given element is visible on the page. Assert that a text substring appears in an element's text. | The assertions were successful. | | 3 | Type text into various text fields and then verify. | The assertions were successful. | | 4 | Verify that a hover dropdown link changes page text. | The assertion was successful. | | 5 | Verify that a button click changes text on the page. | The assertion was successful. | | 6 | Verify that an SVG element is located on the page. | The assertion was successful. | | 7 | Verify that a slider control updates a progress bar. | The assertion was successful. | | 8 | Verify that a \"select\" option updates a meter bar. | The assertion was successful. | | 9 | Assert an element located inside an iFrame. | The assertion was successful. | | 10 | Assert text located inside an iFrame. | The assertion was successful. | | 11 | Verify that clicking a radio button selects it. | The assertion was successful. | | 12 | Verify that clicking an empty checkbox makes it selected. | The assertion was successful. | | 13 | Verify clicking on multiple elements with one call. | The assertions were successful. | | 14 | Verify that clicking an iFrame checkbox selects it. | The assertions were successful. | | 15 | Verify that Drag and Drop works. | The assertion was successful. | | 16 | Assert link text. | The assertion was successful. | | 17 | Verify clicking on link text. | The action was successful. | | 18 | Assert exact text in an element. | The assertion was successful. | | 19 | Highlight a page element. | The action was successful. | | 20 | Verify that Demo Mode works. | The assertion was successful. | \ud83d\udd35 test_login.py::SwagLabsLoginTests::test_swag_labs_login | # | Step Description | Expected Result | | - | ---------------- | --------------- | | 1 | Log in to https://www.saucedemo.com with ``standard_user``. | Login was successful. | | 2 | Log out from the website. | Logout was successful. | \ud83d\udd35 test_mfa_login.py::TestMFALogin::test_mfa_login | # | Step Description | Expected Result | | - | ---------------- | --------------- | | 1 | Open https://seleniumbase.io/realworld/login Enter credentials and Sign In. | Sign In was successful. | | 2 | Click the ``This Page`` button. Save a screenshot to the logs. | | | 3 | Click to Sign Out | Sign Out was successful. | \ud83d\uddc2\ufe0f Before you can generate a case_summary.md file that includes your existing Case Plans, first you'll need to select which existing tests you want to create boilerplate Case Plans from. For that, you can use the SeleniumBase Case Plans GUI: sbase caseplans \ud83d\uddc2\ufe0f Once you are running the Case Plans GUI, select the existing tests that need Case Plans, and then click: Generate boilerplate Case Plans for selected tests missing them . For each selected test that didn't already have a Case Plan file, one will be generated. Each new Case Plan file starts with default boilerplate code with a Markdown table. Eg: `` proxy_test.py::ProxyTests::test_proxy `` --- | # | Step Description | Expected Result | | - | ---------------- | --------------- | | 1 | Perform Action 1 | Verify Action 1 | | 2 | Perform Action 2 | Verify Action 2 | \ud83d\uddc2\ufe0f When rendered as a Markdown table, the result looks like this: proxy_test.py::ProxyTests::test_proxy \u00b6 # Step Description Expected Result 1 Perform Action 1 Verify Action 1 2 Perform Action 2 Verify Action 2 \ud83d\uddc2\ufe0f Markdown tables are flexible, but must be constructed correctly to be displayed. For a Markdown table to render, it's important that you place pipes ( | ), dashes ( - ), and spaces in the correct locations. If you want a line break in a step, use <br /> . If you want an empty step, put a space between pipes, eg: | | . \ud83d\uddc2\ufe0f Here's an example of a Case Plan for my_first_test.py : my_first_test.py::MyTestClass::test_swag_labs \u00b6 # Step Description Expected Result 1 Log in to https://www.saucedemo.com with standard_user . Login was successful. 2 Click on the Backpack ADD TO CART button. The button text changed to REMOVE . 3 Click on the cart icon. The Backpack is seen in the cart. 4 Click on the CHECKOUT button. Enter user details and click CONTINUE . The Backpack is seen in the cart on the CHECKOUT: OVERVIEW page. 5 Click on the FINISH button. There is a Thank You message and a Pony Express delivery logo. 6 Log out from the website. Logout was successful. \ud83d\uddc2\ufe0f After you've created some Case Plans, you can use the Generate Summary of existing Case Plans button in the Case Plans GUI to generate the Case Plans Summary file. \ud83d\uddc2\ufe0f The generated Case Plans summary file, case_summary.md , gets created in the same location where the Case Plans GUI was launched. This is NOT the same location where individual Case Plan boilerplates are generated, which is in the case_plans/ folders. The case_plans/ folders are generated where individual tests live, which means that if you have your tests in multiple folders, then you could also have multiple case_plans/ folders. A case_summary.md file may look like this when rendered: \ud83d\uddc2\ufe0f When calling sbase caseplans , you can provide additional arguments to limit the tests that appear in the list. The same discovery rules apply as when using pytest . Eg: sbase caseplans sbase caseplans -k agent sbase caseplans -m marker2 sbase caseplans test_suite.py sbase caseplans offline_examples/ To learn more about SeleniumBase, check out the Docs Site: All the code is on GitHub:", "title": "Case Plans"}, {"location": "help_docs/case_plans/#seleniumbase-case-plans", "text": "\ud83d\uddc2\ufe0f SeleniumBase Case Plans is Test Case Management Software that uses Markdown tables for displaying test plans directly in GitHub (and other source code management systems that support Markdown format). \ud83d\uddc2\ufe0f The case_summary.md file is generated from individual Case Plans that exist in the case_plans/ folders of your repository. (See the example below to learn how the Case Summary file may look.) Example of a case_summary.md file:", "title": " SeleniumBase Case Plans \ud83d\uddc2\ufe0f"}, {"location": "help_docs/case_plans/#proxy_testpyproxyteststest_proxy", "text": "# Step Description Expected Result 1 Perform Action 1 Verify Action 1 2 Perform Action 2 Verify Action 2 \ud83d\uddc2\ufe0f Markdown tables are flexible, but must be constructed correctly to be displayed. For a Markdown table to render, it's important that you place pipes ( | ), dashes ( - ), and spaces in the correct locations. If you want a line break in a step, use <br /> . If you want an empty step, put a space between pipes, eg: | | . \ud83d\uddc2\ufe0f Here's an example of a Case Plan for my_first_test.py :", "title": "proxy_test.py::ProxyTests::test_proxy"}, {"location": "help_docs/case_plans/#my_first_testpymytestclasstest_swag_labs", "text": "# Step Description Expected Result 1 Log in to https://www.saucedemo.com with standard_user . Login was successful. 2 Click on the Backpack ADD TO CART button. The button text changed to REMOVE . 3 Click on the cart icon. The Backpack is seen in the cart. 4 Click on the CHECKOUT button. Enter user details and click CONTINUE . The Backpack is seen in the cart on the CHECKOUT: OVERVIEW page. 5 Click on the FINISH button. There is a Thank You message and a Pony Express delivery logo. 6 Log out from the website. Logout was successful. \ud83d\uddc2\ufe0f After you've created some Case Plans, you can use the Generate Summary of existing Case Plans button in the Case Plans GUI to generate the Case Plans Summary file. \ud83d\uddc2\ufe0f The generated Case Plans summary file, case_summary.md , gets created in the same location where the Case Plans GUI was launched. This is NOT the same location where individual Case Plan boilerplates are generated, which is in the case_plans/ folders. The case_plans/ folders are generated where individual tests live, which means that if you have your tests in multiple folders, then you could also have multiple case_plans/ folders. A case_summary.md file may look like this when rendered: \ud83d\uddc2\ufe0f When calling sbase caseplans , you can provide additional arguments to limit the tests that appear in the list. The same discovery rules apply as when using pytest . Eg: sbase caseplans sbase caseplans -k agent sbase caseplans -m marker2 sbase caseplans test_suite.py sbase caseplans offline_examples/ To learn more about SeleniumBase, check out the Docs Site: All the code is on GitHub:", "title": "my_first_test.py::MyTestClass::test_swag_labs"}, {"location": "help_docs/chart_maker/", "text": "\ud83d\udcca ChartMaker \ud83d\udcf6 \u00b6 SeleniumBase ChartMaker lets you use Python to generate HTML charts. ( Click to see a presentation with multiple charts ) Here's how to run a simple pie chart presentation from GitHub => seleniumbase/SeleniumBase/examples/chart_maker : cd examples/chart_maker pytest my_chart.py Here's the code for that pie chart presentation ( GitHub => seleniumbase/SeleniumBase/examples/chart_maker/my_chart.py ): from seleniumbase import BaseCase class MyChartMakerClass ( BaseCase ): def test_chart_maker ( self ): self . create_presentation () self . create_pie_chart ( title = \"Automated Tests\" ) self . add_data_point ( \"Passed\" , 7 , color = \"#95d96f\" ) self . add_data_point ( \"Untested\" , 2 , color = \"#eaeaea\" ) self . add_data_point ( \"Failed\" , 1 , color = \"#f1888f\" ) self . add_slide ( \"<p>Pie Chart</p>\" + self . extract_chart ()) self . begin_presentation ( filename = \"my_chart.html\" ) Here's how to run an example presentation with multiple charts: cd examples/chart_maker pytest chart_presentation.py Here are screenshots from the examples: Here's a line chart example: from seleniumbase import BaseCase class MyChartMakerClass ( BaseCase ): def test_chart_maker ( self ): self . create_presentation () self . create_line_chart ( title = \"Time Outside\" , subtitle = \"Last Week\" , unit = \"Minutes\" ) self . add_data_point ( \"Sun\" , 5 ) self . add_data_point ( \"Mon\" , 10 ) self . add_data_point ( \"Tue\" , 20 ) self . add_data_point ( \"Wed\" , 40 ) self . add_data_point ( \"Thu\" , 80 ) self . add_data_point ( \"Fri\" , 65 ) self . add_data_point ( \"Sat\" , 50 ) self . add_slide ( \"<p>Line Chart</p>\" + self . extract_chart ()) self . begin_presentation ( filename = \"line_chart.html\" , interval = 8 ) This example is from test_line_chart.py , which you can run from the examples/chart_maker folder with the following command: pytest test_line_chart.py Because that presentation above has an interval set to 8 , it will automatically advance to the next slide after 8 seconds. (Or exit if there are no more slides.) For a more advanced example (multiple charts in a presentation): from seleniumbase import BaseCase class MyChartMakerClass ( BaseCase ): def test_chart_maker_presentation ( self ): self . create_presentation ( theme = \"sky\" ) self . create_pie_chart ( title = \"Automated Tests\" ) self . add_data_point ( \"Passed\" , 7 , color = \"#95d96f\" ) self . add_data_point ( \"Untested\" , 2 , color = \"#eaeaea\" ) self . add_data_point ( \"Failed\" , 1 , color = \"#f1888f\" ) self . add_slide ( \"<p>Pie Chart</p>\" + self . extract_chart ()) self . create_bar_chart ( title = \"Language\" ) self . add_data_point ( \"Python\" , 33 , color = \"Orange\" ) self . add_data_point ( \"JavaScript\" , 27 , color = \"Teal\" ) self . add_data_point ( \"HTML + CSS\" , 21 , color = \"Purple\" ) self . add_slide ( \"<p>Bar Chart</p>\" + self . extract_chart ()) self . create_column_chart ( title = \"Colors\" ) self . add_data_point ( \"Red\" , 10 , color = \"Red\" ) self . add_data_point ( \"Green\" , 25 , color = \"Green\" ) self . add_data_point ( \"Blue\" , 15 , color = \"Blue\" ) self . add_slide ( \"<p>Column Chart</p>\" + self . extract_chart ()) self . create_line_chart ( title = \"Last Week's Data\" ) self . add_data_point ( \"Sun\" , 5 ) self . add_data_point ( \"Mon\" , 10 ) self . add_data_point ( \"Tue\" , 20 ) self . add_data_point ( \"Wed\" , 40 ) self . add_data_point ( \"Thu\" , 80 ) self . add_data_point ( \"Fri\" , 65 ) self . add_data_point ( \"Sat\" , 50 ) self . add_slide ( \"<p>Line Chart</p>\" + self . extract_chart ()) self . begin_presentation ( filename = \"chart_presentation.html\" ) Here's how to run that example: cd examples/chart_maker pytest chart_presentation.py (Press the Right Arrow to advance to the next slide in that chart presentation) ( Click to see a live example of that presentation ) Multi-Series charts can also be created. Try the available examples to learn more. ChartMaker API self . create_pie_chart ( chart_name = None , title = None , subtitle = None , data_name = None , unit = None , libs = True ): \"\"\" Creates a JavaScript pie chart using \"HighCharts\". @Params chart_name - If creating multiple charts, use this to select which one. title - The title displayed for the chart. subtitle - The subtitle displayed for the chart. data_name - The series name. Useful for multi-series charts. If no data_name, will default to using \"Series 1\". unit - The description label given to the chart's y-axis values. libs - The option to include Chart libraries (JS and CSS files). Should be set to True (default) for the first time creating a chart on a web page. If creating multiple charts on the same web page, you won't need to re-import the libraries when creating additional charts. labels - If True, displays labels on the chart for data points. legend - If True, displays the data point legend on the chart. \"\"\" self . create_bar_chart ( chart_name = None , title = None , subtitle = None , data_name = None , unit = None , libs = True ): \"\"\" Creates a JavaScript bar chart using \"HighCharts\". @Params chart_name - If creating multiple charts, use this to select which one. title - The title displayed for the chart. subtitle - The subtitle displayed for the chart. data_name - The series name. Useful for multi-series charts. If no data_name, will default to using \"Series 1\". unit - The description label given to the chart's y-axis values. libs - The option to include Chart libraries (JS and CSS files). Should be set to True (default) for the first time creating a chart on a web page. If creating multiple charts on the same web page, you won't need to re-import the libraries when creating additional charts. labels - If True, displays labels on the chart for data points. legend - If True, displays the data point legend on the chart. \"\"\" self . create_column_chart ( chart_name = None , title = None , subtitle = None , data_name = None , unit = None , libs = True ): \"\"\" Creates a JavaScript column chart using \"HighCharts\". @Params chart_name - If creating multiple charts, use this to select which one. title - The title displayed for the chart. subtitle - The subtitle displayed for the chart. data_name - The series name. Useful for multi-series charts. If no data_name, will default to using \"Series 1\". unit - The description label given to the chart's y-axis values. libs - The option to include Chart libraries (JS and CSS files). Should be set to True (default) for the first time creating a chart on a web page. If creating multiple charts on the same web page, you won't need to re-import the libraries when creating additional charts. labels - If True, displays labels on the chart for data points. legend - If True, displays the data point legend on the chart. \"\"\" self . create_line_chart ( chart_name = None , title = None , subtitle = None , data_name = None , unit = None , zero = False , libs = True ): \"\"\" Creates a JavaScript line chart using \"HighCharts\". @Params chart_name - If creating multiple charts, use this to select which one. title - The title displayed for the chart. subtitle - The subtitle displayed for the chart. data_name - The series name. Useful for multi-series charts. If no data_name, will default to using \"Series 1\". unit - The description label given to the chart's y-axis values. zero - If True, the y-axis always starts at 0. (Default: False). libs - The option to include Chart libraries (JS and CSS files). Should be set to True (default) for the first time creating a chart on a web page. If creating multiple charts on the same web page, you won't need to re-import the libraries when creating additional charts. labels - If True, displays labels on the chart for data points. legend - If True, displays the data point legend on the chart. \"\"\" self . create_area_chart ( chart_name = None , title = None , subtitle = None , data_name = None , unit = None , zero = False , libs = True ): \"\"\" Creates a JavaScript area chart using \"HighCharts\". @Params chart_name - If creating multiple charts, use this to select which one. title - The title displayed for the chart. subtitle - The subtitle displayed for the chart. data_name - The series name. Useful for multi-series charts. If no data_name, will default to using \"Series 1\". unit - The description label given to the chart's y-axis values. zero - If True, the y-axis always starts at 0. (Default: False). libs - The option to include Chart libraries (JS and CSS files). Should be set to True (default) for the first time creating a chart on a web page. If creating multiple charts on the same web page, you won't need to re-import the libraries when creating additional charts. labels - If True, displays labels on the chart for data points. legend - If True, displays the data point legend on the chart. \"\"\" If creating multiple charts at the same time, you can pass the chart_name parameter to distinguish between different charts. Adding a data point to a chart: self . add_data_point ( label , value , color = None , chart_name = None ): \"\"\" Add a data point to a SeleniumBase-generated chart. @Params label - The label name for the data point. value - The numeric value of the data point. color - The HTML color of the data point. Can be an RGB color. Eg: \"#55ACDC\". Can also be a named color. Eg: \"Teal\". chart_name - If creating multiple charts, use this to select which one. \"\"\" Adding a new data series to an existing chart: self . add_series_to_chart ( self , data_name = None , chart_name = None ): \"\"\" Add a new data series to an existing chart. This allows charts to have multiple data sets. @Params data_name - Set the series name. Useful for multi-series charts. chart_name - If creating multiple charts, use this to select which one. \"\"\" Saving a chart to a file: self . save_chart ( chart_name = None , filename = None ): \"\"\" Saves a SeleniumBase-generated chart to a file for later use. @Params chart_name - If creating multiple charts at the same time, use this to select the one you wish to use. filename - The name of the HTML file that you wish to save the chart to. (filename must end in \".html\") \"\"\" The full HTML of the chart is saved to the saved_charts/ folder. Extracting the HTML of a chart: self . extract_chart ( chart_name = None ): \"\"\" Extracts the HTML from a SeleniumBase-generated chart. @Params chart_name - If creating multiple charts at the same time, use this to select the one you wish to use. \"\"\" Displaying a chart in the browser window: self . display_chart ( chart_name = None , filename = None ): \"\"\" Displays a SeleniumBase-generated chart in the browser window. @Params chart_name - If creating multiple charts at the same time, use this to select the one you wish to use. filename - The name of the HTML file that you wish to save the chart to. (filename must end in \".html\") interval - The delay time for auto-advancing charts. (in seconds) If set to 0 (default), auto-advancing is disabled. \"\"\" All methods have the optional chart_name argument, which is only needed when storing multiple charts at the same time.", "title": "Chart Maker"}, {"location": "help_docs/chart_maker/#chartmaker", "text": "SeleniumBase ChartMaker lets you use Python to generate HTML charts. ( Click to see a presentation with multiple charts ) Here's how to run a simple pie chart presentation from GitHub => seleniumbase/SeleniumBase/examples/chart_maker : cd examples/chart_maker pytest my_chart.py Here's the code for that pie chart presentation ( GitHub => seleniumbase/SeleniumBase/examples/chart_maker/my_chart.py ): from seleniumbase import BaseCase class MyChartMakerClass ( BaseCase ): def test_chart_maker ( self ): self . create_presentation () self . create_pie_chart ( title = \"Automated Tests\" ) self . add_data_point ( \"Passed\" , 7 , color = \"#95d96f\" ) self . add_data_point ( \"Untested\" , 2 , color = \"#eaeaea\" ) self . add_data_point ( \"Failed\" , 1 , color = \"#f1888f\" ) self . add_slide ( \"<p>Pie Chart</p>\" + self . extract_chart ()) self . begin_presentation ( filename = \"my_chart.html\" ) Here's how to run an example presentation with multiple charts: cd examples/chart_maker pytest chart_presentation.py Here are screenshots from the examples:", "title": " \ud83d\udcca ChartMaker \ud83d\udcf6"}, {"location": "help_docs/commander/", "text": "SeleniumBase Commander \ud83c\udf96\ufe0f \u00b6 \ud83c\udf96\ufe0f SeleniumBase Commander lets you run pytest scripts from a Desktop GUI. \ud83c\udf96\ufe0f To launch it, call sbase commander or sbase gui : sbase gui * Starting the SeleniumBase Commander Desktop App... \ud83c\udf96\ufe0f SeleniumBase Commander loads the same tests that are found by: pytest --co -q \ud83c\udf96\ufe0f You can customize which tests are loaded by passing additional args: sbase commander [ OPTIONAL PATH or TEST FILE ] sbase gui [ OPTIONAL PATH or TEST FILE ] \ud83c\udf96\ufe0f Here are examples of customizing test collection: sbase gui sbase gui -k agent sbase gui -m marker2 sbase gui test_suite.py sbase gui offline_examples/ \ud83c\udf96\ufe0f Once launched, you can further customize which tests to run and what settings to use. There are various controls for changing settings, modes, and other pytest command line options that are specific to SeleniumBase. You can also set additional options that don't have a visible toggle. When you're ready to run the selected tests with the specified options, click on the Run Selected Tests button. Other SeleniumBase Commanders: \ud83d\udc1d\ud83c\udf96\ufe0f SeleniumBase Behave GUI / Commander To learn more about SeleniumBase, check out the Docs Site: All the code is on GitHub:", "title": "GUI / Commander"}, {"location": "help_docs/commander/#seleniumbase-commander", "text": "\ud83c\udf96\ufe0f SeleniumBase Commander lets you run pytest scripts from a Desktop GUI. \ud83c\udf96\ufe0f To launch it, call sbase commander or sbase gui : sbase gui * Starting the SeleniumBase Commander Desktop App... \ud83c\udf96\ufe0f SeleniumBase Commander loads the same tests that are found by: pytest --co -q \ud83c\udf96\ufe0f You can customize which tests are loaded by passing additional args: sbase commander [ OPTIONAL PATH or TEST FILE ] sbase gui [ OPTIONAL PATH or TEST FILE ] \ud83c\udf96\ufe0f Here are examples of customizing test collection: sbase gui sbase gui -k agent sbase gui -m marker2 sbase gui test_suite.py sbase gui offline_examples/ \ud83c\udf96\ufe0f Once launched, you can further customize which tests to run and what settings to use. There are various controls for changing settings, modes, and other pytest command line options that are specific to SeleniumBase. You can also set additional options that don't have a visible toggle. When you're ready to run the selected tests with the specified options, click on the Run Selected Tests button.", "title": " SeleniumBase Commander \ud83c\udf96\ufe0f"}, {"location": "help_docs/customizing_test_runs/", "text": "pytest options for SeleniumBase \u00b6 \ud83c\udf9b\ufe0f SeleniumBase's pytest plugin lets you customize test runs from the CLI (Command-Line Interface), which adds options for setting/enabling the browser type, Dashboard Mode, Demo Mode, Headless Mode, Mobile Mode, Multi-threading Mode, Recorder Mode, reuse-session mode, proxy config, user agent config, browser extensions, html-report mode, and more. \ud83c\udf9b\ufe0f Here are some examples of configuring tests, which can be run from the examples/ folder: # Run a test in Chrome (default browser) pytest my_first_test.py # Run a test in Firefox pytest test_swag_labs.py --browser = firefox # Run a test in Demo Mode (highlight assertions) pytest test_demo_site.py --demo # Run a test in Headless Mode (invisible browser) pytest test_demo_site.py --headless # Run tests multi-threaded using [n] threads pytest test_suite.py -n = 4 # Reuse the browser session for all tests (\"--rs\") pytest test_suite.py --reuse-session # Reuse the browser session, but erase cookies between tests pytest test_suite.py --reuse-session --crumbs # Create a real-time dashboard for test results pytest test_suite.py --dashboard # Create a pytest html report after tests are done pytest test_suite.py --html = report.html # Activate Debug Mode on failures (\"c\" to continue) pytest test_fail.py --pdb -s # Rerun failing tests more times pytest test_suite.py --reruns = 1 # Activate Debug Mode as the test begins (\"n\": next. \"c\": continue) pytest test_null.py --trace -s # Activate Recorder/Debug Mode as the test begins (\"c\" to continue) pytest test_null.py --recorder --trace -s # Pass extra data into tests (retrieve by calling self.data) pytest my_first_test.py --data = \"ABC,DEF\" # Run tests on a local Selenium Grid pytest test_suite.py --server = \"127.0.0.1\" # Run tests on a remote Selenium Grid pytest test_suite.py --server = IP_ADDRESS --port = 4444 # Run tests on a remote Selenium Grid with authentication pytest test_suite.py --server = USERNAME:KEY@IP_ADDRESS --port = 80 # Run tests through a proxy server pytest proxy_test.py --proxy = IP_ADDRESS:PORT # Run tests through a proxy server with authentication pytest proxy_test.py --proxy = USERNAME:PASSWORD@IP_ADDRESS:PORT # Run tests while setting the web browser's User Agent pytest user_agent_test.py --agent = \"USER-AGENT-STRING\" # Run tests using Chrome's mobile device emulator (default settings) pytest test_swag_labs.py --mobile # Run mobile tests specifying CSS Width, CSS Height, and Pixel-Ratio pytest test_swag_labs.py --mobile --metrics = \"360,640,2\" # Run tests while changing SeleniumBase default settings pytest my_first_test.py --settings-file = custom_settings.py \ud83c\udf9b\ufe0f You can interchange pytest with nosetests for most tests, but using pytest is recommended. ( chrome is the default browser if not specified.) \ud83c\udf9b\ufe0f If you're using pytest for running tests outside of the SeleniumBase repo, you'll want a copy of pytest.ini at the base of the new folder structure. If using nosetests , the same applies for setup.cfg . \ud83c\udf9b\ufe0f Here are some useful command-line options that come with pytest : -v # Verbose mode. Prints the full name of each test run. -q # Quiet mode. Print fewer details in the console output when running tests. -x # Stop running the tests after the first failure is reached. --html = report.html # Creates a detailed pytest-html report after tests finish. --collect-only | --co # Show what tests would get run. (Without running them) -n = NUM # Multithread the tests using that many threads. (Speed up test runs!) -s # See print statements. (Should be on by default with pytest.ini present.) --junit-xml = report.xml # Creates a junit-xml report after tests finish. --pdb # If a test fails, enter Post Mortem Debug Mode. (Don't use with CI!) --trace # Enter Debug Mode at the beginning of each test. (Don't use with CI!) -m = MARKER # Run tests with the specified pytest marker. \ud83c\udf9b\ufe0f SeleniumBase provides additional pytest command-line options for tests: --browser = BROWSER # (The web browser to use. Default: \"chrome\".) --chrome # (Shortcut for \"--browser=chrome\". On by default.) --edge # (Shortcut for \"--browser=edge\".) --firefox # (Shortcut for \"--browser=firefox\".) --ie # (Shortcut for \"--browser=ie\".) --opera # (Shortcut for \"--browser=opera\".) --safari # (Shortcut for \"--browser=safari\".) --cap-file = FILE # (The web browser's desired capabilities to use.) --cap-string = STRING # (The web browser's desired capabilities to use.) --settings-file = FILE # (Override default SeleniumBase settings.) --env = ENV # (Set the test env. Access with \"self.env\" in tests.) --account = STR # (Set account. Access with \"self.account\" in tests.) --data = STRING # (Extra test data. Access with \"self.data\" in tests.) --var1 = STRING # (Extra test data. Access with \"self.var1\" in tests.) --var2 = STRING # (Extra test data. Access with \"self.var2\" in tests.) --var3 = STRING # (Extra test data. Access with \"self.var3\" in tests.) --variables = DICT # (Extra test data. Access with \"self.variables\".) --user-data-dir = DIR # (Set the Chrome user data directory to use.) --protocol = PROTOCOL # (The Selenium Grid protocol: http|https.) --server = SERVER # (The Selenium Grid server/IP used for tests.) --port = PORT # (The Selenium Grid port used by the test server.) --proxy = SERVER:PORT # (Connect to a proxy server:port for tests.) --proxy = USERNAME:PASSWORD@SERVER:PORT # (Use authenticated proxy server.) --proxy-bypass-list = STRING # (\";\"-separated hosts to bypass, Eg \"*.foo.com\") --proxy-pac-url = URL # (Connect to a proxy server using a PAC_URL.pac file.) --proxy-pac-url = USERNAME:PASSWORD@URL # (Authenticated proxy with PAC URL.) --agent = STRING # (Modify the web browser's User-Agent string.) --mobile # (Use the mobile device emulator while running tests.) --metrics = STRING # (Set mobile metrics: \"CSSWidth,CSSHeight,PixelRatio\".) --chromium-arg = \"ARG=N,ARG2\" # (Set Chromium args, \",\"-separated, no spaces.) --firefox-arg = \"ARG=N,ARG2\" # (Set Firefox args, comma-separated, no spaces.) --firefox-pref = SET # (Set a Firefox preference:value set, comma-separated.) --extension-zip = ZIP # (Load a Chrome Extension .zip|.crx, comma-separated.) --extension-dir = DIR # (Load a Chrome Extension directory, comma-separated.) --pls = PLS # (Set pageLoadStrategy on Chrome: \"normal\", \"eager\", or \"none\".) --headless # (Run tests in headless mode. The default arg on Linux OS.) --headed # (Run tests in headed/GUI mode on Linux OS.) --xvfb # (Run tests using the Xvfb virtual display server on Linux OS.) --locale = LOCALE_CODE # (Set the Language Locale Code for the web browser.) --interval = SECONDS # (The autoplay interval for presentations & tour steps) --start-page = URL # (The starting URL for the web browser when tests begin.) --archive-logs # (Archive existing log files instead of deleting them.) --archive-downloads # (Archive old downloads instead of deleting them.) --skip-js-waits # (Skip waiting for readyState to be complete or Angular.) --time-limit = SECONDS # (Safely fail any test that exceeds the time limit.) --slow # (Slow down the automation. Faster than using Demo Mode.) --demo # (Slow down and visually see test actions as they occur.) --demo-sleep = SECONDS # (Set the wait time after Slow & Demo Mode actions.) --highlights = NUM # (Number of highlight animations for Demo Mode actions.) --message-duration = SECONDS # (The time length for Messenger alerts.) --check-js # (Check for JavaScript errors after page loads.) --ad-block # (Block some types of display ads from loading.) --block-images # (Block images from loading during tests.) --do-not-track # (Indicate to websites that you don't want to be tracked.) --verify-delay = SECONDS # (The delay before MasterQA verification checks.) --recorder # (Enables the Recorder for turning browser actions into code.) --rec-behave # (Same as Recorder Mode, but also generates behave-gherkin.) --rec-sleep # (If the Recorder is enabled, also records self.sleep calls.) --rec-print # (If the Recorder is enabled, prints output after tests end.) --disable-csp # (Disable the Content Security Policy of websites.) --disable-ws # (Disable Web Security on Chromium-based browsers.) --enable-ws # (Enable Web Security on Chromium-based browsers.) --enable-sync # (Enable \"Chrome Sync\".) --use-auto-ext # (Use Chrome's automation extension.) --undetected # (Use an undetectable chromedriver to evade bot-detection.) --remote-debug # (Enable Chrome's Remote Debugger on http://localhost:9222) --final-debug # (Enter Debug Mode after each test ends. Don't use with CI!) --dashboard # (Enable the SeleniumBase Dashboard. Saved at: dashboard.html) --dash-title = STRING # (Set the title shown for the generated dashboard.) --swiftshader # (Use Chrome's \"--use-gl=swiftshader\" feature.) --incognito # (Enable Chrome's Incognito mode.) --guest # (Enable Chrome's Guest mode.) --devtools # (Open Chrome's DevTools when the browser opens.) --reuse-session | --rs # (Reuse the browser session between tests.) --crumbs # (Delete all cookies between tests reusing a session.) --disable-beforeunload # (Disable the \"beforeunload\" event on Chrome.) --window-size = WIDTH,HEIGHT # (Set the browser's starting window size.) --maximize # (Start tests with the browser window maximized.) --screenshot # (Save a screenshot at the end of each test.) --visual-baseline # (Set the visual baseline for Visual/Layout tests.) --external-pdf # (Set Chrome \"plugins.always_open_pdf_externally\": True.) --timeout-multiplier = MULTIPLIER # (Multiplies the default timeout values.) --list-fail-page # (After each failing test, list the URL of the failure.) (For more details, see the full list of command-line options here .) \ud83c\udf9b\ufe0f You can also view a list of popular pytest options for SeleniumBase by typing: seleniumbase options Or the short form: sbase options Example tests using Logging: To see logging abilities, you can run a test suite that includes tests that fail on purpose: pytest test_suite.py \ud83d\udd35 During test failures, logs and screenshots from the most recent test run will get saved to the latest_logs/ folder. If --archive-logs is specified (or if ARCHIVE_EXISTING_LOGS is set to True in settings.py ), test logs will also get archived to the archived_logs/ folder. Otherwise, the log files will be cleaned out when the next test run begins (by default). Demo Mode: If any test is moving too fast for your eyes to see what's going on, you can run it in Demo Mode by adding --demo on the command line, which pauses the browser briefly between actions, highlights page elements being acted on, and lets you know what test assertions are happening in real time: pytest my_first_test.py --demo You can override the default wait time by either updating settings.py or by using --demo-sleep={NUM} when using Demo Mode. (NOTE: If you use --demo-sleep={NUM} without using --demo , nothing will happen.) pytest my_first_test.py --demo --demo-sleep = 1 .2 Passing additional data to tests: If you want to pass additional data from the command line to your tests, you can use --data=STRING . Now inside your tests, you can use self.data to access that. Running tests multithreaded: To run pytest tests using multiple processes, add -n=NUM or -n NUM on the command line, where NUM is the number of CPUs you want to use. Retrying failing tests automatically: You can use --reruns=NUM to retry failing tests that many times. Use --reruns-delay=SECONDS to wait that many seconds between retries. Example: pytest --reruns = 1 --reruns-delay = 1 Debugging tests: You can use the following calls in your scripts to help you debug issues: import time ; time . sleep ( 5 ) # Makes the test wait and do nothing for 5 seconds. import ipdb ; ipdb . set_trace () # Enter debugging mode. n = next, c = continue, s = step. import pytest ; pytest . set_trace () # Enter debugging mode. n = next, c = continue, s = step. To pause an active test that throws an exception or error, add --pdb -s : pytest my_first_test.py --pdb -s The code above will leave your browser window open in case there's a failure. (ipdb commands: 'c', 's', 'n' => continue, step, next). Combinations of options: \ud83c\udf9b\ufe0f There are times when you'll want to combine various command-line options for added effect. For instance, the multi-process option, -n=4 , can be customized by adding: --dist=loadscope or --dist=loadfile to it. Here's more info on that, as taken from pytest-xdist : -n=4 --dist=loadscope : Tests are grouped by module for test functions and by class for test methods. Groups are distributed to available workers as whole units. This guarantees that all tests in a group run in the same process. This can be useful if you have expensive module-level or class-level fixtures. Grouping by class takes priority over grouping by module. -n=4 --dist=loadfile : Tests are grouped by their containing file. Groups are distributed to available workers as whole units. This guarantees that all tests in a file run in the same worker. \ud83c\udf9b\ufe0f You might also want to combine multiple options at once. For example: pytest --headless --rs -n = 4 -v --dashboard --html = report.html The above not only runs tests in parallel processes, but it also tells tests in the same process to share the same browser session, runs the tests in headless mode, displays the full name of each test on a separate line, creates a realtime dashboard of the test results, and creates a full report after all tests complete. The SeleniumBase Dashboard: \ud83d\udd35 The --dashboard option for pytest generates a SeleniumBase Dashboard located at dashboard.html , which updates automatically as tests run and produce results. Example: pytest --dashboard --rs --headless \ud83d\udd35 Additionally, you can host your own SeleniumBase Dashboard Server on a port of your choice. Here's an example of that using Python 3's http.server : python -m http.server 1948 \ud83d\udd35 Now you can navigate to http://localhost:1948/dashboard.html in order to view the dashboard as a web app. This requires two different terminal windows: one for running the server, and another for running the tests, which should be run from the same directory. (Use CTRL+C to stop the http server.) \ud83d\udd35 Here's a full example of what the SeleniumBase Dashboard may look like: pytest test_suite.py --dashboard --rs --headless Pytest Reports: \ud83d\udd35 Using --html=report.html gives you a fancy report of the name specified after your test suite completes. pytest test_suite.py --html = report.html \ud83d\udd35 When combining pytest html reports with SeleniumBase Dashboard usage, the pie chart from the Dashboard will get added to the html report. Additionally, if you set the html report URL to be the same as the Dashboard URL when also using the dashboard, (example: --dashboard --html=dashboard.html ), then the Dashboard will become an advanced html report when all the tests complete. \ud83d\udd35 Here's an example of an upgraded html report: pytest test_suite.py --dashboard --html = report.html If viewing pytest html reports in Jenkins , you may need to configure Jenkins settings for the html to render correctly. This is due to Jenkins CSP changes . You can also use --junit-xml=report.xml to get an xml report instead. Jenkins can use this file to display better reporting for your tests. pytest test_suite.py --junit-xml = report.xml Nosetest Reports: The --report option gives you a fancy report after your test suite completes. nosetests test_suite.py --report (NOTE: You can add --show_report to immediately display Nosetest reports after the test suite completes. Only use --show_report when running tests locally because it pauses the test run.) Language Locale Codes You can specify a Language Locale Code to customize web pages on supported websites. With SeleniumBase, you can change the web browser's Locale on the command line by doing this: pytest --locale = CODE # Example: --locale=ru Visit \ud83d\uddfe Locales for a full list of codes. Customizing default settings: \ud83c\udf9b\ufe0f An easy way to override seleniumbase/config/settings.py is by using a custom settings file. Here's the command-line option to add to tests: (See examples/custom_settings.py ) pytest --settings-file = custom_settings.py (Settings include default timeout values, a two-factor auth key, DB credentials, S3 credentials, and other important settings used by tests.) Running tests on a remote Selenium Grid: \ud83c\udf10 SeleniumBase lets you run tests on remote Selenium Grids such as BrowserStack 's Selenium Grid, LambdaTest 's Selenium Grid, Sauce Labs 's Selenium Grid, other Grids, and even your own Grid: \ud83c\udf10 For setting browser desired capabilities while running Selenium remotely, see the ReadMe located here: https://github.com/seleniumbase/SeleniumBase/tree/master/examples/capabilities Here's how to connect to a BrowserStack Selenium Grid server for running tests: pytest test_demo_site.py --server = USERNAME:KEY@hub.browserstack.com --port = 80 Here's how to connect to a Sauce Labs Selenium Grid server for running tests: pytest test_demo_site.py --server = USERNAME:KEY@ondemand.us-east-1.saucelabs.com --port = 443 --protocol = https Here's how to connect to a Perfecto Selenium Grid server for running tests: pytest test_demo_site.py --server = USERNAME:KEY@demo.perfectomobile.com/nexperience/perfectomobile --port = 443 Here's how to connect to a TestingBot Selenium Grid server for running tests: pytest test_demo_site.py --server = USERNAME:KEY@hub.testingbot.com --port = 80 Here's how to connect to a LambdaTest Selenium Grid server for running tests: pytest test_demo_site.py --server = USERNAME:KEY@hub.lambdatest.com --port = 80 Here's how to connect to a CrossBrowserTesting Selenium Grid server for running tests: pytest test_demo_site.py --server = USERNAME:KEY@hub.crossbrowsertesting.com --port = 80 \ud83c\udf10 Or you can create your own Selenium Grid for test distribution. ( See this ReadMe for details ) \ud83c\udf10 To use a server on the https protocol, add --protocol=https : ( Now automatic if the port is 443. ) pytest test_demo_site.py --protocol = https --server = IP_ADDRESS --port = PORT Using a Proxy Server: \ud83c\udf10 If you wish to use a proxy server for your browser tests (Chromium or Firefox), you can add --proxy=IP_ADDRESS:PORT as an argument on the command line. pytest proxy_test.py --proxy = IP_ADDRESS:PORT \ud83c\udf10 If the proxy server that you wish to use requires authentication, you can do the following (Chromium only): pytest proxy_test.py --proxy = USERNAME:PASSWORD@IP_ADDRESS:PORT \ud83c\udf10 SeleniumBase also supports SOCKS4 and SOCKS5 proxies: pytest proxy_test.py --proxy = \"socks4://IP_ADDRESS:PORT\" pytest proxy_test.py --proxy = \"socks5://IP_ADDRESS:PORT\" To make things easier, you can add your frequently-used proxies to PROXY_LIST in proxy_list.py , and then use --proxy=KEY_FROM_PROXY_LIST to use the IP_ADDRESS:PORT of that key. pytest proxy_test.py --proxy = proxy1 Changing the User-Agent: \ud83d\udd24 If you wish to change the User-Agent for your browser tests (Chrome and Firefox only), you can add --agent=\"USER-AGENT-STRING\" as an argument on the command line. pytest user_agent_test.py --agent = \"Mozilla/5.0 (Nintendo 3DS; U; ; en) Version/1.7412.EU\" Mobile Device Testing: \ud83d\udcf1 Use --mobile to quickly run your tests using Chrome's mobile device emulator with default values for device metrics (CSS Width, CSS Height, Pixel-Ratio) and a default value set for the user agent. To configure the mobile device metrics, use --metrics=\"CSS_Width,CSS_Height,Pixel_Ratio\" to set those values. You'll also be able to set the user agent with --agent=\"USER-AGENT-STRING\" (a default user agent will be used if not specified). To find real values for device metrics, see this GitHub Gist . For a list of available user agent strings, check out this page . # Run tests using Chrome's mobile device emulator (default settings) pytest test_swag_labs.py --mobile # Run mobile tests specifying CSS Width, CSS Height, and Pixel-Ratio pytest test_swag_labs.py --mobile --metrics = \"411,731,3\" # Run mobile tests specifying the user agent pytest test_swag_labs.py --mobile --agent = \"Mozilla/5.0 (Linux; Android 9; Pixel 3 XL)\"", "title": "Command Line Options"}, {"location": "help_docs/customizing_test_runs/#pytest-options-for-seleniumbase", "text": "\ud83c\udf9b\ufe0f SeleniumBase's pytest plugin lets you customize test runs from the CLI (Command-Line Interface), which adds options for setting/enabling the browser type, Dashboard Mode, Demo Mode, Headless Mode, Mobile Mode, Multi-threading Mode, Recorder Mode, reuse-session mode, proxy config, user agent config, browser extensions, html-report mode, and more. \ud83c\udf9b\ufe0f Here are some examples of configuring tests, which can be run from the examples/ folder: # Run a test in Chrome (default browser) pytest my_first_test.py # Run a test in Firefox pytest test_swag_labs.py --browser = firefox # Run a test in Demo Mode (highlight assertions) pytest test_demo_site.py --demo # Run a test in Headless Mode (invisible browser) pytest test_demo_site.py --headless # Run tests multi-threaded using [n] threads pytest test_suite.py -n = 4 # Reuse the browser session for all tests (\"--rs\") pytest test_suite.py --reuse-session # Reuse the browser session, but erase cookies between tests pytest test_suite.py --reuse-session --crumbs # Create a real-time dashboard for test results pytest test_suite.py --dashboard # Create a pytest html report after tests are done pytest test_suite.py --html = report.html # Activate Debug Mode on failures (\"c\" to continue) pytest test_fail.py --pdb -s # Rerun failing tests more times pytest test_suite.py --reruns = 1 # Activate Debug Mode as the test begins (\"n\": next. \"c\": continue) pytest test_null.py --trace -s # Activate Recorder/Debug Mode as the test begins (\"c\" to continue) pytest test_null.py --recorder --trace -s # Pass extra data into tests (retrieve by calling self.data) pytest my_first_test.py --data = \"ABC,DEF\" # Run tests on a local Selenium Grid pytest test_suite.py --server = \"127.0.0.1\" # Run tests on a remote Selenium Grid pytest test_suite.py --server = IP_ADDRESS --port = 4444 # Run tests on a remote Selenium Grid with authentication pytest test_suite.py --server = USERNAME:KEY@IP_ADDRESS --port = 80 # Run tests through a proxy server pytest proxy_test.py --proxy = IP_ADDRESS:PORT # Run tests through a proxy server with authentication pytest proxy_test.py --proxy = USERNAME:PASSWORD@IP_ADDRESS:PORT # Run tests while setting the web browser's User Agent pytest user_agent_test.py --agent = \"USER-AGENT-STRING\" # Run tests using Chrome's mobile device emulator (default settings) pytest test_swag_labs.py --mobile # Run mobile tests specifying CSS Width, CSS Height, and Pixel-Ratio pytest test_swag_labs.py --mobile --metrics = \"360,640,2\" # Run tests while changing SeleniumBase default settings pytest my_first_test.py --settings-file = custom_settings.py \ud83c\udf9b\ufe0f You can interchange pytest with nosetests for most tests, but using pytest is recommended. ( chrome is the default browser if not specified.) \ud83c\udf9b\ufe0f If you're using pytest for running tests outside of the SeleniumBase repo, you'll want a copy of pytest.ini at the base of the new folder structure. If using nosetests , the same applies for setup.cfg . \ud83c\udf9b\ufe0f Here are some useful command-line options that come with pytest : -v # Verbose mode. Prints the full name of each test run. -q # Quiet mode. Print fewer details in the console output when running tests. -x # Stop running the tests after the first failure is reached. --html = report.html # Creates a detailed pytest-html report after tests finish. --collect-only | --co # Show what tests would get run. (Without running them) -n = NUM # Multithread the tests using that many threads. (Speed up test runs!) -s # See print statements. (Should be on by default with pytest.ini present.) --junit-xml = report.xml # Creates a junit-xml report after tests finish. --pdb # If a test fails, enter Post Mortem Debug Mode. (Don't use with CI!) --trace # Enter Debug Mode at the beginning of each test. (Don't use with CI!) -m = MARKER # Run tests with the specified pytest marker. \ud83c\udf9b\ufe0f SeleniumBase provides additional pytest command-line options for tests: --browser = BROWSER # (The web browser to use. Default: \"chrome\".) --chrome # (Shortcut for \"--browser=chrome\". On by default.) --edge # (Shortcut for \"--browser=edge\".) --firefox # (Shortcut for \"--browser=firefox\".) --ie # (Shortcut for \"--browser=ie\".) --opera # (Shortcut for \"--browser=opera\".) --safari # (Shortcut for \"--browser=safari\".) --cap-file = FILE # (The web browser's desired capabilities to use.) --cap-string = STRING # (The web browser's desired capabilities to use.) --settings-file = FILE # (Override default SeleniumBase settings.) --env = ENV # (Set the test env. Access with \"self.env\" in tests.) --account = STR # (Set account. Access with \"self.account\" in tests.) --data = STRING # (Extra test data. Access with \"self.data\" in tests.) --var1 = STRING # (Extra test data. Access with \"self.var1\" in tests.) --var2 = STRING # (Extra test data. Access with \"self.var2\" in tests.) --var3 = STRING # (Extra test data. Access with \"self.var3\" in tests.) --variables = DICT # (Extra test data. Access with \"self.variables\".) --user-data-dir = DIR # (Set the Chrome user data directory to use.) --protocol = PROTOCOL # (The Selenium Grid protocol: http|https.) --server = SERVER # (The Selenium Grid server/IP used for tests.) --port = PORT # (The Selenium Grid port used by the test server.) --proxy = SERVER:PORT # (Connect to a proxy server:port for tests.) --proxy = USERNAME:PASSWORD@SERVER:PORT # (Use authenticated proxy server.) --proxy-bypass-list = STRING # (\";\"-separated hosts to bypass, Eg \"*.foo.com\") --proxy-pac-url = URL # (Connect to a proxy server using a PAC_URL.pac file.) --proxy-pac-url = USERNAME:PASSWORD@URL # (Authenticated proxy with PAC URL.) --agent = STRING # (Modify the web browser's User-Agent string.) --mobile # (Use the mobile device emulator while running tests.) --metrics = STRING # (Set mobile metrics: \"CSSWidth,CSSHeight,PixelRatio\".) --chromium-arg = \"ARG=N,ARG2\" # (Set Chromium args, \",\"-separated, no spaces.) --firefox-arg = \"ARG=N,ARG2\" # (Set Firefox args, comma-separated, no spaces.) --firefox-pref = SET # (Set a Firefox preference:value set, comma-separated.) --extension-zip = ZIP # (Load a Chrome Extension .zip|.crx, comma-separated.) --extension-dir = DIR # (Load a Chrome Extension directory, comma-separated.) --pls = PLS # (Set pageLoadStrategy on Chrome: \"normal\", \"eager\", or \"none\".) --headless # (Run tests in headless mode. The default arg on Linux OS.) --headed # (Run tests in headed/GUI mode on Linux OS.) --xvfb # (Run tests using the Xvfb virtual display server on Linux OS.) --locale = LOCALE_CODE # (Set the Language Locale Code for the web browser.) --interval = SECONDS # (The autoplay interval for presentations & tour steps) --start-page = URL # (The starting URL for the web browser when tests begin.) --archive-logs # (Archive existing log files instead of deleting them.) --archive-downloads # (Archive old downloads instead of deleting them.) --skip-js-waits # (Skip waiting for readyState to be complete or Angular.) --time-limit = SECONDS # (Safely fail any test that exceeds the time limit.) --slow # (Slow down the automation. Faster than using Demo Mode.) --demo # (Slow down and visually see test actions as they occur.) --demo-sleep = SECONDS # (Set the wait time after Slow & Demo Mode actions.) --highlights = NUM # (Number of highlight animations for Demo Mode actions.) --message-duration = SECONDS # (The time length for Messenger alerts.) --check-js # (Check for JavaScript errors after page loads.) --ad-block # (Block some types of display ads from loading.) --block-images # (Block images from loading during tests.) --do-not-track # (Indicate to websites that you don't want to be tracked.) --verify-delay = SECONDS # (The delay before MasterQA verification checks.) --recorder # (Enables the Recorder for turning browser actions into code.) --rec-behave # (Same as Recorder Mode, but also generates behave-gherkin.) --rec-sleep # (If the Recorder is enabled, also records self.sleep calls.) --rec-print # (If the Recorder is enabled, prints output after tests end.) --disable-csp # (Disable the Content Security Policy of websites.) --disable-ws # (Disable Web Security on Chromium-based browsers.) --enable-ws # (Enable Web Security on Chromium-based browsers.) --enable-sync # (Enable \"Chrome Sync\".) --use-auto-ext # (Use Chrome's automation extension.) --undetected # (Use an undetectable chromedriver to evade bot-detection.) --remote-debug # (Enable Chrome's Remote Debugger on http://localhost:9222) --final-debug # (Enter Debug Mode after each test ends. Don't use with CI!) --dashboard # (Enable the SeleniumBase Dashboard. Saved at: dashboard.html) --dash-title = STRING # (Set the title shown for the generated dashboard.) --swiftshader # (Use Chrome's \"--use-gl=swiftshader\" feature.) --incognito # (Enable Chrome's Incognito mode.) --guest # (Enable Chrome's Guest mode.) --devtools # (Open Chrome's DevTools when the browser opens.) --reuse-session | --rs # (Reuse the browser session between tests.) --crumbs # (Delete all cookies between tests reusing a session.) --disable-beforeunload # (Disable the \"beforeunload\" event on Chrome.) --window-size = WIDTH,HEIGHT # (Set the browser's starting window size.) --maximize # (Start tests with the browser window maximized.) --screenshot # (Save a screenshot at the end of each test.) --visual-baseline # (Set the visual baseline for Visual/Layout tests.) --external-pdf # (Set Chrome \"plugins.always_open_pdf_externally\": True.) --timeout-multiplier = MULTIPLIER # (Multiplies the default timeout values.) --list-fail-page # (After each failing test, list the URL of the failure.) (For more details, see the full list of command-line options here .) \ud83c\udf9b\ufe0f You can also view a list of popular pytest options for SeleniumBase by typing: seleniumbase options Or the short form: sbase options", "title": " pytest options for SeleniumBase"}, {"location": "help_docs/desired_capabilities/", "text": "Using Desired Capabilities \u00b6 You can specify browser capabilities when running SeleniumBase tests on a remote Selenium Grid server such as BrowserStack , LambdaTest , or Sauce Labs . Sample run commands may look like this when run from the SeleniumBase/examples/ folder: (The browser is now specified in the capabilities file.) pytest test_demo_site.py --browser = remote --server = USERNAME:KEY@hub.browserstack.com --port = 80 --cap_file = capabilities/sample_cap_file_BS.py pytest test_demo_site.py --browser = remote --server = USERNAME:KEY@https://@hub.lambdatest.com --port = 80 --protocol = https --cap_file = capabilities/sample_cap_file_LT.py pytest test_demo_site.py --browser = remote --server = USERNAME:KEY@ondemand.us-east-1.saucelabs.com --port = 443 --protocol = https --cap_file = capabilities/sample_cap_file_SL.py (Parameters: --browser=remote , --server=SERVER , --port=PORT , and --cap_file=CAP_FILE.py ) Here's an example desired capabilities file for BrowserStack: desired_cap = { \"os\" : \"Windows\" , \"os_version\" : \"11\" , \"browser\" : \"Chrome\" , \"browser_version\" : \"101.0\" , \"browserstack.local\" : \"false\" , \"browserstack.debug\" : \"true\" , \"browserstack.selenium_version\" : \"4.1.2\" , } Here's an example desired capabilities file for LambdaTest: capabilities = { \"build\" : \"your build name\" , \"name\" : \"your test name\" , \"platform\" : \"Windows 11\" , \"browserName\" : \"Chrome\" , \"version\" : \"101.0\" , \"timezone\" : \"UTC+05:30\" , \"geoLocation\" : \"IN\" , } Here's an example desired capabilities file for Sauce Labs: capabilities = { \"browserName\" : \"chrome\" , \"browserVersion\" : \"latest\" , \"platformName\" : \"macOS 10.14\" , \"sauce:options\" : {}, } (Note that the browser is now being specified in the capabilities file, rather than with --browser=BROWSER when using a remote Selenium Grid. If using a local Selenium Grid, specify the browser, eg: --browser=chrome or --browser=firefox .) You can generate specific desired capabilities using: BrowserStack desired capabilities LambdaTest desired capabilities Sauce Labs desired capabilities Parsing desired capabilities: SeleniumBase has a desired capabilities parser that can capture all lines from the specified file in the following formats: 'KEY' : 'VALUE' 'KEY' : True 'KEY' : False caps [ 'KEY' ] = \"VALUE\" caps [ 'KEY' ] = True caps [ 'KEY' ] = False (Each pair must be on a separate line. You can interchange single and double quotes.) You can also swap --browser=remote with an actual browser, eg --browser=chrome , which will combine the default SeleniumBase desired capabilities with those that were specified in the capabilities file when using --cap_file=FILE.py . Capabilities will override other parameters, so if you set the browser to one thing and the capabilities browser to another, SeleniumBase will use the capabilities browser as the browser. You'll need default SeleniumBase capabilities for: * Using a proxy server (not the same as a Selenium Grid server) * Downloading files to a desired folder * Disabling some warnings on Chrome * Overriding a website's Content Security Policy on Chrome * Other possible reasons You can also set browser desired capabilities from a command line string: Example: pytest test_swag_labs.py --cap-string = '{\"browserName\":\"chrome\",\"name\":\"test1\"}' --server = \"127.0.0.1\" --browser = remote (Enclose cap-string in single quotes. Enclose parameter keys in double quotes.) If you pass \"*\" into the \"name\" field of --cap-string , the name will become the test identifier. Example: pytest my_first_test.py --cap-string = '{\"browserName\":\"chrome\",\"name\":\"*\"}' --server = \"127.0.0.1\" --browser = chrome Example name: \"my_first_test.MyTestClass.test_basics\" Using a local Selenium Grid If using a local Selenium Grid with SeleniumBase, start up the Grid Hub and nodes first: sbase grid-hub start sbase grid-node start (The Selenium Server JAR file will be automatically downloaded for first-time Grid users. You'll also need Java installed to start up the Grid.)", "title": "Desired Capabilities"}, {"location": "help_docs/desired_capabilities/#using-desired-capabilities", "text": "You can specify browser capabilities when running SeleniumBase tests on a remote Selenium Grid server such as BrowserStack , LambdaTest , or Sauce Labs . Sample run commands may look like this when run from the SeleniumBase/examples/ folder: (The browser is now specified in the capabilities file.) pytest test_demo_site.py --browser = remote --server = USERNAME:KEY@hub.browserstack.com --port = 80 --cap_file = capabilities/sample_cap_file_BS.py pytest test_demo_site.py --browser = remote --server = USERNAME:KEY@https://@hub.lambdatest.com --port = 80 --protocol = https --cap_file = capabilities/sample_cap_file_LT.py pytest test_demo_site.py --browser = remote --server = USERNAME:KEY@ondemand.us-east-1.saucelabs.com --port = 443 --protocol = https --cap_file = capabilities/sample_cap_file_SL.py (Parameters: --browser=remote , --server=SERVER , --port=PORT , and --cap_file=CAP_FILE.py ) Here's an example desired capabilities file for BrowserStack: desired_cap = { \"os\" : \"Windows\" , \"os_version\" : \"11\" , \"browser\" : \"Chrome\" , \"browser_version\" : \"101.0\" , \"browserstack.local\" : \"false\" , \"browserstack.debug\" : \"true\" , \"browserstack.selenium_version\" : \"4.1.2\" , } Here's an example desired capabilities file for LambdaTest: capabilities = { \"build\" : \"your build name\" , \"name\" : \"your test name\" , \"platform\" : \"Windows 11\" , \"browserName\" : \"Chrome\" , \"version\" : \"101.0\" , \"timezone\" : \"UTC+05:30\" , \"geoLocation\" : \"IN\" , } Here's an example desired capabilities file for Sauce Labs: capabilities = { \"browserName\" : \"chrome\" , \"browserVersion\" : \"latest\" , \"platformName\" : \"macOS 10.14\" , \"sauce:options\" : {}, } (Note that the browser is now being specified in the capabilities file, rather than with --browser=BROWSER when using a remote Selenium Grid. If using a local Selenium Grid, specify the browser, eg: --browser=chrome or --browser=firefox .) You can generate specific desired capabilities using: BrowserStack desired capabilities LambdaTest desired capabilities Sauce Labs desired capabilities Parsing desired capabilities: SeleniumBase has a desired capabilities parser that can capture all lines from the specified file in the following formats: 'KEY' : 'VALUE' 'KEY' : True 'KEY' : False caps [ 'KEY' ] = \"VALUE\" caps [ 'KEY' ] = True caps [ 'KEY' ] = False (Each pair must be on a separate line. You can interchange single and double quotes.) You can also swap --browser=remote with an actual browser, eg --browser=chrome , which will combine the default SeleniumBase desired capabilities with those that were specified in the capabilities file when using --cap_file=FILE.py . Capabilities will override other parameters, so if you set the browser to one thing and the capabilities browser to another, SeleniumBase will use the capabilities browser as the browser. You'll need default SeleniumBase capabilities for: * Using a proxy server (not the same as a Selenium Grid server) * Downloading files to a desired folder * Disabling some warnings on Chrome * Overriding a website's Content Security Policy on Chrome * Other possible reasons You can also set browser desired capabilities from a command line string: Example: pytest test_swag_labs.py --cap-string = '{\"browserName\":\"chrome\",\"name\":\"test1\"}' --server = \"127.0.0.1\" --browser = remote (Enclose cap-string in single quotes. Enclose parameter keys in double quotes.) If you pass \"*\" into the \"name\" field of --cap-string , the name will become the test identifier. Example: pytest my_first_test.py --cap-string = '{\"browserName\":\"chrome\",\"name\":\"*\"}' --server = \"127.0.0.1\" --browser = chrome Example name: \"my_first_test.MyTestClass.test_basics\"", "title": " Using Desired Capabilities"}, {"location": "help_docs/features_list/", "text": "SeleniumBase Features: \ud83c\udfaf \u00b6 A powerful Python framework for browser automation and E2E UI testing. Includes Recorder Mode for instantly generating browser tests in Python. Supports multiple browsers, tabs, iframes, and proxies in the same test. Includes Test Case Management Software with Markdown technology. Automatic smart-waiting improves reliability and prevents flaky tests. Supports pytest , unittest , nose , and behave for finding/running tests. All the code is open source. Look inside to learn about any feature. Powerful logging tools for dashboards, reports, and screenshots . Can run tests in Headless Mode to hide the browser. ( --headless ) Can run tests multithreaded from parallel browsers. ( -n NUM_THREADS ) Can run tests from a shared browser session. ( --reuse-session / --rs ) Can run tests using Chromium's mobile device emulator. ( --mobile ) Can run tests through a proxy server. ( --proxy=IP_ADDRESS:PORT ) Can run tests with proxy settings via PAC URL. ( --proxy-pac-url=URL.pac ) Can run tests through an authenticated proxy server. ( --proxy=USER:PASS@HOST:PORT ) Can run tests with proxy+auth via PAC URL. ( --proxy-pac-url=USER:PASS@URL.pac ) Can run tests with a customized browser user agent. ( --agent=USER_AGENT_STRING ) Can set a Chromium User Data Directory/Profile to load. ( --user-data-dir=DIR ) Can load Chrome Extension ZIP files. ( --extension-zip=ZIP ) Can load Chrome Extension folders. ( --extension-dir=DIR ) Powerful console scripts . (Type seleniumbase or sbase to use.) Has the ability to translate tests into multiple spoken languages . Has a flexible command-line interface for customizing test runs. Has a global config file for configuring settings as needed. Includes a tool for creating interactive web presentations . Includes Chart Maker , a tool for creating interactive charts. Includes a dialog box builder to allow user-input during automation. Includes a website tour builder for creating interactive walkthroughs. Includes a GUI for running pytest scripts: SeleniumBase Commander . Includes integrations for GitHub Actions , Google Cloud , Azure , S3 , and Docker . Can handle Google Authenticator logins with Python's one-time password library . Can load and make assertions on PDF files from websites or the local file system. Can inspect HTML to find issues and points of interest with the HTML Inspector . Is backwards-compatible with Python WebDriver methods. (Use: self.driver ) Can execute JavaScript code from Python calls. (Use: self.execute_script() ) Can pierce through Shadow DOM selectors. (Add ::shadow to CSS fragments.) Includes a hybrid-automation solution, MasterQA , to speed up manual testing. Includes useful Python decorators and password obfuscation methods .", "title": "List of Features"}, {"location": "help_docs/features_list/#seleniumbase-features", "text": "A powerful Python framework for browser automation and E2E UI testing. Includes Recorder Mode for instantly generating browser tests in Python. Supports multiple browsers, tabs, iframes, and proxies in the same test. Includes Test Case Management Software with Markdown technology. Automatic smart-waiting improves reliability and prevents flaky tests. Supports pytest , unittest , nose , and behave for finding/running tests. All the code is open source. Look inside to learn about any feature. Powerful logging tools for dashboards, reports, and screenshots . Can run tests in Headless Mode to hide the browser. ( --headless ) Can run tests multithreaded from parallel browsers. ( -n NUM_THREADS ) Can run tests from a shared browser session. ( --reuse-session / --rs ) Can run tests using Chromium's mobile device emulator. ( --mobile ) Can run tests through a proxy server. ( --proxy=IP_ADDRESS:PORT ) Can run tests with proxy settings via PAC URL. ( --proxy-pac-url=URL.pac ) Can run tests through an authenticated proxy server. ( --proxy=USER:PASS@HOST:PORT ) Can run tests with proxy+auth via PAC URL. ( --proxy-pac-url=USER:PASS@URL.pac ) Can run tests with a customized browser user agent. ( --agent=USER_AGENT_STRING ) Can set a Chromium User Data Directory/Profile to load. ( --user-data-dir=DIR ) Can load Chrome Extension ZIP files. ( --extension-zip=ZIP ) Can load Chrome Extension folders. ( --extension-dir=DIR ) Powerful console scripts . (Type seleniumbase or sbase to use.) Has the ability to translate tests into multiple spoken languages . Has a flexible command-line interface for customizing test runs. Has a global config file for configuring settings as needed. Includes a tool for creating interactive web presentations . Includes Chart Maker , a tool for creating interactive charts. Includes a dialog box builder to allow user-input during automation. Includes a website tour builder for creating interactive walkthroughs. Includes a GUI for running pytest scripts: SeleniumBase Commander . Includes integrations for GitHub Actions , Google Cloud , Azure , S3 , and Docker . Can handle Google Authenticator logins with Python's one-time password library . Can load and make assertions on PDF files from websites or the local file system. Can inspect HTML to find issues and points of interest with the HTML Inspector . Is backwards-compatible with Python WebDriver methods. (Use: self.driver ) Can execute JavaScript code from Python calls. (Use: self.execute_script() ) Can pierce through Shadow DOM selectors. (Add ::shadow to CSS fragments.) Includes a hybrid-automation solution, MasterQA , to speed up manual testing. Includes useful Python decorators and password obfuscation methods .", "title": " SeleniumBase Features: \ud83c\udfaf"}, {"location": "help_docs/happy_customers/", "text": "Here are some organizations that have grown their automation with SeleniumBase: MIT iboss Akamai HubSpot Veracode Autodesk Broadcom FortressIQ Thoma Bravo ASICS Digital Expedia Group Texture Health ActiveCampaign Harvard Medical School Singapore Institute of Tech Mississippi State University Queen's University L1NNA Laboratory Thomson Reuters CA Technologies Raid The Room First American Origin Energy Develop Soft InterSystems StreamSets NerdVision SenseTime Aeturnum Cellebrite Ben Fatto GeoNode Streamlit VMware Rakuten Nagarro Ark PES Evereve WPILib Yandex netLex Alokin Cubic Baidu HqO PDS Pico Iver And more... Case Study: ( HubSpot ) In addition to using SeleniumBase for testing the UI of their content management system, HubSpot used SeleniumBase to automate the migration of website pages from their old CMS to their new one, which saved them over one million USD and a significant amount of time. Learn how HubSpot uses SeleniumBase for website testing by reading: Automated Testing with Selenium For more reading about automation at HubSpot, see: The Classic \"QA Team\" is Obsolete", "title": "Case Studies"}, {"location": "help_docs/hidden_files_info/", "text": "Info about hidden files on macOS \u00b6 Depending on your macOS settings, some files may be hidden from view in your Finder window, such as .gitignore . To view all files, run the following command and then reopen the Finder window: defaults write com.apple.finder AppleShowAllFiles -bool true More info on that can be found here: https://www.defaults-write.com/show-hidden-files-in-os-x-finder/ https://www.macworld.co.uk/how-to/mac-software/hidden-files-mac-3520878/ https://setapp.com/how-to/show-hidden-files-on-mac", "title": "macOS Hidden Files"}, {"location": "help_docs/hidden_files_info/#info-about-hidden-files-on-macos", "text": "Depending on your macOS settings, some files may be hidden from view in your Finder window, such as .gitignore . To view all files, run the following command and then reopen the Finder window: defaults write com.apple.finder AppleShowAllFiles -bool true More info on that can be found here: https://www.defaults-write.com/show-hidden-files-in-os-x-finder/ https://www.macworld.co.uk/how-to/mac-software/hidden-files-mac-3520878/ https://setapp.com/how-to/show-hidden-files-on-mac", "title": "Info about hidden files on macOS"}, {"location": "help_docs/how_it_works/", "text": "How SeleniumBase Works \ud83d\udc41\ufe0f \u00b6 At the core, SeleniumBase works by extending pytest as a direct plugin. SeleniumBase automatically spins up web browsers for tests (using Selenium WebDriver), and then gives those tests access to the SeleniumBase libraries through the BaseCase class . Tests are also given access to SeleniumBase command-line arguments and SeleniumBase methods , which provide additional functionality. (NOTE: pytest uses a feature called test discovery to automatically find and run Python methods that start with test_ from the file that you specified on the command line.) The most common way of using SeleniumBase is by inheriting BaseCase: from seleniumbase import BaseCase Then have your test classes inherit BaseCase: class MyTestClass ( BaseCase ): Here's what a full test might look like: from seleniumbase import BaseCase class TestMFALogin ( BaseCase ): def test_mfa_login ( self ): self . open ( \"https://seleniumbase.io/realworld/login\" ) self . type ( \"#username\" , \"demo_user\" ) self . type ( \"#password\" , \"secret_pass\" ) self . enter_mfa_code ( \"#totpcode\" , \"GAXG2MTEOR3DMMDG\" ) # 6-digit self . assert_text ( \"Welcome!\" , \"h1\" ) self . highlight ( \"img#image1\" ) # A fancier assert_element() call self . click ( 'a:contains(\"This Page\")' ) self . save_screenshot_to_logs () # In \"./latest_logs/\" folder. self . click_link ( \"Sign out\" ) # Must be \"a\" tag. Not \"button\". self . assert_element ( 'a:contains(\"Sign in\")' ) self . assert_exact_text ( \"You have been signed out!\" , \"#top_message\" ) (See the example, test_mfa_login.py , for reference.) The most common way of running SeleniumBase tests is with pytest : pytest --headless --rs --dashboard --html = report.html -v -n = 4 pytest test_mfa_login.py pytest -m marker2 pytest offline_examples/ pytest -k agent (See SyntaxFormats for more ways of using SeleniumBase.) \u2705 No More Flaky Tests! \u00b6 SeleniumBase methods automatically wait for page elements to finish loading before interacting with them ( up to a timeout limit ). This means you no longer need random time.sleep() statements in your scripts. There are three layers of protection that provide reliability for tests using SeleniumBase: (1) : Selenium's default pageLoadStrategy is normal : This strategy causes Selenium to wait for the full page to load, with HTML content and sub-resources downloaded and parsed. (2) : SeleniumBase includes methods such as wait_for_ready_state_complete() and wait_for_angularjs() , which run inside other SeleniumBase methods to ensure that it's safe to proceed with the next command. (3) : SeleniumBase methods automatically wait for elements to be visible and interactable before interacting with those elements. If you want to speed up your tests and you think the third level of protection is enough on it's own, you can use command-line options to remove the first, the second, or both of those first two levels of protection: --pls=none --> Set pageLoadStrategy to \"none\" : This strategy causes Selenium to return immediately after the initial HTML content is fully received by the browser. --sjw --> Skip JS Waits, which include wait_for_ready_state_complete() and wait_for_angularjs() . (NOTE: Those command-line options were added in SeleniumBase 4.2.0 . Using both could lead to a 15% increase in test speed, but it could also lead to flaky tests, so use with caution.)", "title": "How it Works"}, {"location": "help_docs/how_it_works/#how-seleniumbase-works", "text": "At the core, SeleniumBase works by extending pytest as a direct plugin. SeleniumBase automatically spins up web browsers for tests (using Selenium WebDriver), and then gives those tests access to the SeleniumBase libraries through the BaseCase class . Tests are also given access to SeleniumBase command-line arguments and SeleniumBase methods , which provide additional functionality. (NOTE: pytest uses a feature called test discovery to automatically find and run Python methods that start with test_ from the file that you specified on the command line.) The most common way of using SeleniumBase is by inheriting BaseCase: from seleniumbase import BaseCase Then have your test classes inherit BaseCase: class MyTestClass ( BaseCase ): Here's what a full test might look like: from seleniumbase import BaseCase class TestMFALogin ( BaseCase ): def test_mfa_login ( self ): self . open ( \"https://seleniumbase.io/realworld/login\" ) self . type ( \"#username\" , \"demo_user\" ) self . type ( \"#password\" , \"secret_pass\" ) self . enter_mfa_code ( \"#totpcode\" , \"GAXG2MTEOR3DMMDG\" ) # 6-digit self . assert_text ( \"Welcome!\" , \"h1\" ) self . highlight ( \"img#image1\" ) # A fancier assert_element() call self . click ( 'a:contains(\"This Page\")' ) self . save_screenshot_to_logs () # In \"./latest_logs/\" folder. self . click_link ( \"Sign out\" ) # Must be \"a\" tag. Not \"button\". self . assert_element ( 'a:contains(\"Sign in\")' ) self . assert_exact_text ( \"You have been signed out!\" , \"#top_message\" ) (See the example, test_mfa_login.py , for reference.) The most common way of running SeleniumBase tests is with pytest : pytest --headless --rs --dashboard --html = report.html -v -n = 4 pytest test_mfa_login.py pytest -m marker2 pytest offline_examples/ pytest -k agent (See SyntaxFormats for more ways of using SeleniumBase.)", "title": " How SeleniumBase Works \ud83d\udc41\ufe0f"}, {"location": "help_docs/how_it_works/#no-more-flaky-tests", "text": "SeleniumBase methods automatically wait for page elements to finish loading before interacting with them ( up to a timeout limit ). This means you no longer need random time.sleep() statements in your scripts. There are three layers of protection that provide reliability for tests using SeleniumBase: (1) : Selenium's default pageLoadStrategy is normal : This strategy causes Selenium to wait for the full page to load, with HTML content and sub-resources downloaded and parsed. (2) : SeleniumBase includes methods such as wait_for_ready_state_complete() and wait_for_angularjs() , which run inside other SeleniumBase methods to ensure that it's safe to proceed with the next command. (3) : SeleniumBase methods automatically wait for elements to be visible and interactable before interacting with those elements. If you want to speed up your tests and you think the third level of protection is enough on it's own, you can use command-line options to remove the first, the second, or both of those first two levels of protection: --pls=none --> Set pageLoadStrategy to \"none\" : This strategy causes Selenium to return immediately after the initial HTML content is fully received by the browser. --sjw --> Skip JS Waits, which include wait_for_ready_state_complete() and wait_for_angularjs() . (NOTE: Those command-line options were added in SeleniumBase 4.2.0 . Using both could lead to a 15% increase in test speed, but it could also lead to flaky tests, so use with caution.)", "title": "\u2705 No More Flaky Tests!"}, {"location": "help_docs/html_inspector/", "text": "The HTML Inspector \ud83d\udd0e \u00b6 \ud83d\udd0e HTML Inspector provides useful info about a web page. \ud83d\udd0e ( Based on: github.com/philipwalton/html-inspector ) \ud83d\udd0e Example: examples/test_inspect_html.py (Chromium-only) from seleniumbase import BaseCase class HtmlInspectorTests ( BaseCase ): def test_html_inspector ( self ): self . open ( \"https://xkcd.com/1144/\" ) self . inspect_html () pytest test_inspect_html.py ============== test session starts ============== * HTML Inspection Results: https://xkcd.com/1144/ \u26a0\ufe0f 'property' is not a valid attribute of the <meta> element. \u26a0\ufe0f Do not use <div> or <span> elements without any attributes. \u26a0\ufe0f The 'alt' attribute is required for <img> elements. \u26a0\ufe0f The 'border' attribute is no longer valid on the <img> element and should not be used. \u26a0\ufe0f 'srcset' is not a valid attribute of the <img> element. \u26a0\ufe0f The <center> element is obsolete and should not be used. \u26a0\ufe0f <script> elements should appear right before the closing </body> tag for optimal performance. \u26a0\ufe0f The id 'comicLinks' appears more than once in the document. * ( See the Console output for details! )", "title": "The HTML Inspector"}, {"location": "help_docs/html_inspector/#the-html-inspector", "text": "\ud83d\udd0e HTML Inspector provides useful info about a web page. \ud83d\udd0e ( Based on: github.com/philipwalton/html-inspector ) \ud83d\udd0e Example: examples/test_inspect_html.py (Chromium-only) from seleniumbase import BaseCase class HtmlInspectorTests ( BaseCase ): def test_html_inspector ( self ): self . open ( \"https://xkcd.com/1144/\" ) self . inspect_html () pytest test_inspect_html.py ============== test session starts ============== * HTML Inspection Results: https://xkcd.com/1144/ \u26a0\ufe0f 'property' is not a valid attribute of the <meta> element. \u26a0\ufe0f Do not use <div> or <span> elements without any attributes. \u26a0\ufe0f The 'alt' attribute is required for <img> elements. \u26a0\ufe0f The 'border' attribute is no longer valid on the <img> element and should not be used. \u26a0\ufe0f 'srcset' is not a valid attribute of the <img> element. \u26a0\ufe0f The <center> element is obsolete and should not be used. \u26a0\ufe0f <script> elements should appear right before the closing </body> tag for optimal performance. \u26a0\ufe0f The id 'comicLinks' appears more than once in the document. * ( See the Console output for details! )", "title": " The HTML Inspector \ud83d\udd0e"}, {"location": "help_docs/install/", "text": "SeleniumBase Installation \u00b6 If installing SeleniumBase directly from PyPI , (the Python Package Index), use: pip install seleniumbase To upgrade an existing seleniumbase install from PyPI: pip install -U seleniumbase If installing SeleniumBase from a Git clone, use: git clone https://github.com/seleniumbase/SeleniumBase.git cd SeleniumBase/ pip install . For a development mode install in editable mode, use: git clone https://github.com/seleniumbase/SeleniumBase.git cd SeleniumBase/ pip install -e . To upgrade an existing seleniumbase install from GitHub: git pull # To pull the latest version pip install -e . # Or \"pip install .\" If installing SeleniumBase from a GitHub branch , use: pip install git+https://github.com/seleniumbase/SeleniumBase.git@master#egg = seleniumbase pip install can be customized: (Add --upgrade OR -U to upgrade SeleniumBase.) (Add --force-reinstall to upgrade dependencies.) (Add --index-url=http://pypi.python.org/simple/ if blocked by a VPN.) (Use pip3 if multiple versions of Python are present.) (If you're not using a virtual environment, you may need to add --user to your pip command if you're seeing errors during installation.)", "title": "Install SeleniumBase"}, {"location": "help_docs/install/#seleniumbase-installation", "text": "", "title": " SeleniumBase Installation"}, {"location": "help_docs/install_python_pip_git/", "text": "Installation instructions for Git, Python, and Pip \u00b6 Git \u00b6 You can download Git from here . ( A Git GUI tool like SourceTree or GitHub Desktop can help you with Git commands. ) (You can also download SeleniumBase from GitHub without using git-related commands.) Python \u00b6 You can download Python from https://www.python.org/downloads/ if it's not already preinstalled on your machine. Pip \u00b6 You probably already have pip and setuptools installed. If not: python -m easy_install -U pip pip install -U setuptools If that didn't work, here are some more commands you can try: On macOS / Windows / Linux, run the following command: python -m ensurepip --default-pip If your existing version of pip is old, upgrade to the latest version: python -m pip install --upgrade pip setuptools On CentOS 7 and some versions of Linux, you may need to install pip with yum : yum -y update yum -y install python-pip If you're having any trouble getting pip, you can GET PIP HERE . When done, make sure the location of pip is on your path, which is $PATH for macOS/Linux. (On Windows, it's the System Variables Path within System Environment Variables.) You can also get pip (or fix pip) by using: curl https://bootstrap.pypa.io/get-pip.py | python (If you get SSL errors while trying to install packages with pip, see this Stackoverflow post , which tells you to run the above command.) Keep Pip and Setuptools up-to-date: python -m pip install -U pip setuptools (Depending on your user permissions, you may need to add --user to the command if you're not inside a Python virtual environment , or use \" sudo \" on a UNIX-based OS if you're getting errors during installation.)", "title": "Install Python, pip, git"}, {"location": "help_docs/install_python_pip_git/#installation-instructions-for-git-python-and-pip", "text": "", "title": "Installation instructions for Git, Python, and Pip"}, {"location": "help_docs/install_python_pip_git/#git", "text": "You can download Git from here . ( A Git GUI tool like SourceTree or GitHub Desktop can help you with Git commands. ) (You can also download SeleniumBase from GitHub without using git-related commands.)", "title": "Git"}, {"location": "help_docs/install_python_pip_git/#python", "text": "You can download Python from https://www.python.org/downloads/ if it's not already preinstalled on your machine.", "title": "Python"}, {"location": "help_docs/install_python_pip_git/#pip", "text": "You probably already have pip and setuptools installed. If not: python -m easy_install -U pip pip install -U setuptools If that didn't work, here are some more commands you can try: On macOS / Windows / Linux, run the following command: python -m ensurepip --default-pip If your existing version of pip is old, upgrade to the latest version: python -m pip install --upgrade pip setuptools On CentOS 7 and some versions of Linux, you may need to install pip with yum : yum -y update yum -y install python-pip If you're having any trouble getting pip, you can GET PIP HERE . When done, make sure the location of pip is on your path, which is $PATH for macOS/Linux. (On Windows, it's the System Variables Path within System Environment Variables.) You can also get pip (or fix pip) by using: curl https://bootstrap.pypa.io/get-pip.py | python (If you get SSL errors while trying to install packages with pip, see this Stackoverflow post , which tells you to run the above command.) Keep Pip and Setuptools up-to-date: python -m pip install -U pip setuptools (Depending on your user permissions, you may need to add --user to the command if you're not inside a Python virtual environment , or use \" sudo \" on a UNIX-based OS if you're getting errors during installation.)", "title": "Pip"}, {"location": "help_docs/js_package_manager/", "text": "JS Package Manager and Code Generators \u00b6 \ud83d\udd79\ufe0f SeleniumBase lets you load JavaScript packages from any CDN link into any website. \ud83c\udfa8 The following SeleniumBase solutions utilize this feature: \ud83d\uddfa\ufe0f Website Tours - \ud83c\udf9e\ufe0f Presenter - \ud83d\udcca Chart Maker - \ud83d\udec2 Dialog Boxes \ud83d\udd79\ufe0f In addition to loading JS packages, SeleniumBase also lets you generate JS code from Python so that you can use these packages more easily. \ud83d\uddfa\ufe0f Here's an example of loading a website-tour library into the browser for a Google Maps tour: \ud83d\uddfa\ufe0f This example is from maps_introjs_tour.py . (The --interval=1 makes the tour go automatically to the next step after 1 second.) cd examples/tour_examples pytest maps_introjs_tour.py --interval = 1 \ud83d\udd79\ufe0f SeleniumBase includes powerful JS code generators for converting Python into JavaScript for using the supported JS packages. A few lines of Python in your tests might generate hundreds of lines of JavaScript. \ud83d\uddfa\ufe0f Here is some tour code in Python from maps_introjs_tour.py that expands into a lot of JavaScript. self . open ( \"https://www.google.com/maps/@42.3591234,-71.0915634,15z\" ) self . create_tour ( theme = \"introjs\" ) self . add_tour_step ( \"Welcome to Google Maps!\" , title = \"SeleniumBase Tours\" ) self . add_tour_step ( \"Enter Location\" , \"#searchboxinput\" , title = \"Search Box\" ) self . add_tour_step ( \"See it\" , \"#searchbox-searchbutton\" , alignment = \"bottom\" ) self . add_tour_step ( \"Thanks for using Tours!\" , title = \"End of Guided Tour\" ) self . export_tour ( filename = \"maps_introjs_tour.js\" ) self . play_tour () \ud83d\udd79\ufe0f For existing features, SeleniumBase already takes care of loading all the necessary JS and CSS files into the web browser. To load other packages, here are a few useful methods that you should know about: self . add_js_link ( js_link ) \ud83d\udd79\ufe0f This example loads the IntroJS JavaScript library: self . add_js_link ( \"https://cdnjs.cloudflare.com/ajax/libs/intro.js/2.9.3/intro.min.js\" ) \ud83d\udd79\ufe0f You can load any JS package this way as long as you know the URL. \ud83d\udd79\ufe0f If you're wondering how SeleniumBase does this, here's the full Python code from js_utils.py , which uses WebDriver's execute_script() method for making JS calls after escaping quotes with backslashes as needed: def add_js_link ( driver , js_link ): script_to_add_js = ( \"\"\"function injectJS(link) { var body = document.getElementsByTagName(\"body\")[0]; var script = document.createElement(\"script\"); script.src = link; script.defer; script.type=\"text/javascript\"; script.crossorigin = \"anonymous\"; script.onload = function() { null }; body.appendChild(script); } injectJS(\"%s\");\"\"\" ) js_link = escape_quotes_if_needed ( js_link ) driver . execute_script ( script_to_add_js % js_link ) \ud83d\udd79\ufe0f Now that you've loaded JavaScript into the browser, you may also want to load some CSS to go along with it: self . add_css_link ( css_link ) \ud83d\udd79\ufe0f Here's code that loads the IntroJS CSS: self . add_css_link ( \"https://cdnjs.cloudflare.com/ajax/libs/intro.js/2.9.3/introjs.css\" ) \ud83d\udd79\ufe0f And here's the Python WebDriver code that makes this possible: def add_css_link ( driver , css_link ): script_to_add_css = ( \"\"\"function injectCSS(css) { var head = document.getElementsByTagName(\"head\")[0]; var link = document.createElement(\"link\"); link.rel = \"stylesheet\"; link.type = \"text/css\"; link.href = css; link.crossorigin = \"anonymous\"; head.appendChild(link); } injectCSS(\"%s\");\"\"\" ) css_link = escape_quotes_if_needed ( css_link ) driver . execute_script ( script_to_add_css % css_link ) \ud83d\udd79\ufe0f Website tours are just one of the many uses of the JS Package Manager. \ud83d\udec2 The following example shows the JqueryConfirm package loaded into a website for creating fancy dialog boxes: \u2195\ufe0f ( Example: dialog_box_tour.py ) \u2195\ufe0f Here's how to run that example: cd examples/dialog_boxes pytest test_dialog_boxes.py (Example from the Dialog Boxes ReadMe ) \ud83d\udd79\ufe0f Since packages are loaded directly from a CDN link, you won't need other package managers like NPM, Bower, or Yarn to get the packages that you need into the websites that you want. To learn more about SeleniumBase, check out the Docs Site: All the code is on GitHub: \ud83d\uddfa\ufe0f If you're only interested in creating website tours with SeleniumBase, here's the link to the Website Tours ReadMe .", "title": "JS Package Manager"}, {"location": "help_docs/js_package_manager/#js-package-manager-and-code-generators", "text": "", "title": " JS Package Manager and Code Generators"}, {"location": "help_docs/locale_codes/", "text": "Language Locale Codes \u00b6 You can specify a Language Locale Code to customize web pages on supported websites. With SeleniumBase, you can change the web browser's Locale on the command line by doing this: pytest --locale = CODE # Example: --locale=ru List of Language Locale Codes: Language Code Afrikaans af Amharic am Arabic ar Arabic (Egypt) ar_ eg Arabic (Saudi Arabia) ar_ sa Basque eu Belarusian be Bengali bn Bulgarian bg Catalan ca Chinese zh Chinese (China Mainland) zh_ cn Chinese (Hong Kong) zh_ hk Chinese (Taiwan) zh_ tw Croatian hr Czech cs Danish da Dutch nl English en English (United States) en_ us English (Australia) en_ au English (Canada) en_ ca English (United Kingdom) en_ gb English (Ireland) en_ ie English (India) en_ in English (Singapore) en_ sg English (South Africa) en_ za Estonian et Farsi fa Filipino fil Finnish fi French fr French (Canada) fr_ ca French (Switzerland) fr_ ch Galician gl German de German (Austria) de_ at Greek el Gujarati gu Hebrew he Hindi hi Hungarian hu Icelandic is Indonesian id Italian it Japanese ja Kannada kn Korean ko Lao lo Latvian lv Lingala ln Lithuanian lt Malay ms Malayalam ml Marathi mr Norwegian no Polish pl Portuguese pt Portuguese (Brazil) pt_ br Portuguese (Portugal) pt_ pt Romanian ro Russian ru Serbian sr Slovak sk Slovenian sl Spanish es Spanish (Latin America) es_ 419 Spanish (Argentina) es_ ar Spanish (Chile) es_ cl Spanish (Colombia) es_ co Spanish (Costa Rica) es_ cr Spanish (Dominican Rep.) es_ do Spanish (Ecuador) es_ ec Spanish (El Salvador) es_ sv Spanish (Guatemala) es_ gt Spanish (Honduras) es_ hn Spanish (Mexico) es_ mx Spanish (Nicaragua) es_ ni Spanish (Panama) es_ pa Spanish (Peru) es_ pe Spanish (Puerto Rico) es_ pr Spanish (Paraguay) es_ py Spanish (United States) es_ us Spanish (Uruguay) es_ uy Spanish (Venezuela) es_ ve Swahili sw Swedish sv Swiss German gsw Tagalog tl Tamil ta Telugu te Thai th Turkish tr Ukrainian uk Urdu ur Vietnamese vi Zulu zu", "title": "Locale Codes"}, {"location": "help_docs/locale_codes/#language-locale-codes", "text": "You can specify a Language Locale Code to customize web pages on supported websites. With SeleniumBase, you can change the web browser's Locale on the command line by doing this: pytest --locale = CODE # Example: --locale=ru", "title": " Language Locale Codes"}, {"location": "help_docs/method_summary/", "text": "SeleniumBase Methods (API Reference) \u00b6 Here's a list of SeleniumBase method definitions, which are defined in base_case.py For backwards compatibility, older versions of method names have remained to keep older scripts working. (E.g: wait_for_element_visible was shortened to wait_for_element and then to find_element.) self . open ( url ) # Duplicates: self.open_url(url), self.visit(url), visit_url(url), # self.goto(url), self.go_to(url) self . get ( url ) # If the url parameter is a URL: Perform self.open(url) # Otherwise: return self.get_element(URL_AS_A_SELECTOR) self . click ( selector , by = \"css selector\" , timeout = None , delay = 0 , scroll = True ) self . slow_click ( selector , by = \"css selector\" , timeout = None ) self . double_click ( selector , by = \"css selector\" , timeout = None ) self . click_chain ( selectors_list , by = \"css selector\" , timeout = None , spacing = 0 ) self . type ( selector , text , by = \"css selector\" , timeout = None ) # Duplicates: self.update_text(selector, text, by=\"css selector\", timeout=None) # self.input(selector, text, by=\"css selector\", timeout=None) # self.fill(selector, text, by=\"css selector\", timeout=None) # self.write(selector, text, by=\"css selector\", timeout=None) self . send_keys ( selector , text , by = \"css selector\" , timeout = None ) # Duplicates: self.add_text(selector, text, by=\"css selector\", timeout=None) self . submit ( selector , by = \"css selector\" ) self . clear ( selector , by = \"css selector\" , timeout = None ) self . focus ( selector , by = \"css selector\" , timeout = None ) self . refresh_page () # Duplicates: self.refresh(), self.reload(), self.reload_page() self . get_current_url () self . get_origin () self . get_page_source () self . get_title () # Duplicates: self.get_page_title() self . get_user_agent () self . get_locale_code () self . go_back () self . go_forward () self . open_start_page () self . open_if_not_url ( url ) self . is_element_present ( selector , by = \"css selector\" ) self . is_element_visible ( selector , by = \"css selector\" ) self . is_element_clickable ( selector , by = \"css selector\" ) self . is_element_enabled ( selector , by = \"css selector\" ) self . is_text_visible ( text , selector = \"html\" , by = \"css selector\" ) self . is_attribute_present ( selector , attribute , value = None , by = \"css selector\" ) self . is_link_text_visible ( link_text ) self . is_partial_link_text_visible ( partial_link_text ) self . is_link_text_present ( link_text ) self . is_partial_link_text_present ( link_text ) self . get_link_attribute ( link_text , attribute , hard_fail = True ) # Duplicates: self.get_link_text_attribute(link_text, attribute, hard_fail=True) self . get_partial_link_text_attribute ( link_text , attribute , hard_fail = True ) self . click_link ( link_text , timeout = None ) # Duplicates: self.click_link_text(link_text, timeout=None) self . click_partial_link ( partial_link_text , timeout = None ) # Duplicates: self.click_partial_link_text(partial_link_text, timeout=None) self . get_text ( selector , by = \"css selector\" , timeout = None ) self . get_attribute ( selector , attribute , by = \"css selector\" , timeout = None , hard_fail = True ) self . set_attribute ( selector , attribute , value , by = \"css selector\" , timeout = None , scroll = False ) self . set_attributes ( selector , attribute , value , by = \"css selector\" ) # Duplicates: self.set_attribute_all(selector, attribute, value, by=\"css selector\") self . remove_attribute ( selector , attribute , by = \"css selector\" , timeout = None ) self . remove_attributes ( selector , attribute , by = \"css selector\" ) self . get_property ( selector , property , by = \"css selector\" , timeout = None ) self . get_text_content ( selector , by = \"css selector\" , timeout = None ) self . get_property_value ( selector , property , by = \"css selector\" , timeout = None ) self . get_image_url ( selector , by = \"css selector\" , timeout = None ) self . find_elements ( selector , by = \"css selector\" , limit = 0 ) self . find_visible_elements ( selector , by = \"css selector\" , limit = 0 ) self . click_visible_elements ( selector , by = \"css selector\" , limit = 0 , timeout = None ) self . click_nth_visible_element ( selector , number , by = \"css selector\" , timeout = None ) self . click_if_visible ( selector , by = \"css selector\" ) self . click_active_element () self . click_with_offset ( selector , x , y , by = \"css selector\" , mark = None , timeout = None , center = None ) self . double_click_with_offset ( selector , x , y , by = \"css selector\" , mark = None , timeout = None , center = None ) self . is_selected ( selector , by = \"css selector\" , timeout = None ) # Duplicates: self.is_checked(selector, by=\"css selector\", timeout=None) self . select_if_unselected ( selector , by = \"css selector\" ) # Duplicates: self.check_if_unchecked(selector, by=\"css selector\") self . unselect_if_selected ( selector , by = \"css selector\" ) # Duplicates: self.uncheck_if_checked(selector, by=\"css selector\") self . is_element_in_an_iframe ( selector , by = \"css selector\" ) self . switch_to_frame_of_element ( selector , by = \"css selector\" ) self . hover_on_element ( selector , by = \"css selector\" ) self . hover_and_click ( hover_selector , click_selector , hover_by = \"css selector\" , click_by = \"css selector\" , timeout = None ) self . hover_and_double_click ( hover_selector , click_selector , hover_by = \"css selector\" , click_by = \"css selector\" , timeout = None ) self . drag_and_drop ( drag_selector , drop_selector , drag_by = \"css selector\" , drop_by = \"css selector\" , timeout = None , jquery = False ) self . drag_and_drop_with_offset ( selector , x , y , by = \"css selector\" , timeout = None ) self . select_option_by_text ( dropdown_selector , option , dropdown_by = \"css selector\" , timeout = None ) self . select_option_by_index ( dropdown_selector , option , dropdown_by = \"css selector\" , timeout = None ) self . select_option_by_value ( dropdown_selector , option , dropdown_by = \"css selector\" , timeout = None ) self . get_select_options ( dropdown_selector , attribute = \"text\" , by = \"css selector\" , timeout = None ) self . load_html_string ( html_string , new_page = True ) self . set_content ( html_string , new_page = False ) self . load_html_file ( html_file , new_page = True ) self . open_html_file ( html_file ) self . execute_script ( script , * args , ** kwargs ) self . execute_async_script ( script , timeout = None ) self . safe_execute_script ( script , * args , ** kwargs ) self . set_window_rect ( x , y , width , height ) self . set_window_size ( width , height ) self . maximize_window () self . switch_to_frame ( frame , timeout = None ) self . switch_to_default_content () self . switch_to_parent_frame () with self . frame_switch ( frame , timeout = None ): # Indented Code Block for Context Manager (Must use \"with\") self . set_content_to_frame ( frame , timeout = None ) self . set_content_to_default ( nested = False ) # Duplicates: self.set_content_to_default_content(nested=False) self . set_content_to_parent () # Duplicates: self.set_content_to_parent_frame() self . open_new_window ( switch_to = True ) # Duplicates: self.open_new_tab(switch_to=True) self . switch_to_window ( window , timeout = None ) # Duplicates: self.switch_to_tab(tab, timeout=None) self . switch_to_default_window () # Duplicates: self.switch_to_default_tab() self . switch_to_newest_window () # Duplicates: self.switch_to_newest_tab() self . get_new_driver ( browser = None , headless = None , locale_code = None , protocol = None , servername = None , port = None , proxy = None , proxy_bypass_list = None , proxy_pac_url = None , agent = None , switch_to = True , cap_file = None , cap_string = None , recorder_ext = None , disable_csp = None , enable_ws = None , enable_sync = None , use_auto_ext = None , undetectable = None , no_sandbox = None , disable_gpu = None , incognito = None , guest_mode = None , devtools = None , remote_debug = None , swiftshader = None , ad_block_on = None , block_images = None , do_not_track = None , chromium_arg = None , firefox_arg = None , firefox_pref = None , user_data_dir = None , extension_zip = None , extension_dir = None , page_load_strategy = None , external_pdf = None , is_mobile = None , d_width = None , d_height = None , d_p_r = None , ) self . switch_to_driver ( driver ) self . switch_to_default_driver () self . save_screenshot ( name , folder = None , selector = None , by = \"css selector\" ) self . save_screenshot_to_logs ( name = None , selector = None , by = \"css selector\" ) self . save_page_source ( name , folder = None ) self . save_cookies ( name = \"cookies.txt\" ) self . load_cookies ( name = \"cookies.txt\" ) self . delete_all_cookies () # Duplicates: self.clear_all_cookies() self . delete_saved_cookies ( name = \"cookies.txt\" ) self . wait_for_ready_state_complete ( timeout = None ) self . wait_for_angularjs ( timeout = None ) self . sleep ( seconds ) # Duplicates: self.wait(seconds) self . install_addon ( xpi_file ) self . activate_demo_mode () self . deactivate_demo_mode () self . activate_design_mode () self . deactivate_design_mode () self . activate_recorder () self . save_recorded_actions () self . activate_jquery () self . bring_active_window_to_front () self . bring_to_front ( selector , by = \"css selector\" ) self . highlight_click ( selector , by = \"css selector\" , loops = 3 , scroll = True ) self . highlight_type ( selector , text , by = \"css selector\" , loops = 3 , scroll = True ) # Duplicates # self.highlight_update_text(selector, text, by=\"css selector\", loops=3, scroll=True) self . highlight ( selector , by = \"css selector\" , loops = 4 , scroll = True ) self . press_up_arrow ( selector = \"html\" , times = 1 , by = \"css selector\" ) self . press_down_arrow ( selector = \"html\" , times = 1 , by = \"css selector\" ) self . press_left_arrow ( selector = \"html\" , times = 1 , by = \"css selector\" ) self . press_right_arrow ( selector = \"html\" , times = 1 , by = \"css selector\" ) self . scroll_to ( selector , by = \"css selector\" , timeout = None ) # Duplicates: self.scroll_to_element(selector, by=\"css selector\") self . slow_scroll_to ( selector , by = \"css selector\" , timeout = None ) # Duplicates: self.slow_scroll_to_element(selector, by=\"css selector\") self . scroll_to_top () self . scroll_to_bottom () self . click_xpath ( xpath ) self . js_click ( selector , by = \"css selector\" , all_matches = False , scroll = True ) self . js_click_all ( selector , by = \"css selector\" ) self . jquery_click ( selector , by = \"css selector\" ) self . jquery_click_all ( selector , by = \"css selector\" ) self . hide_element ( selector , by = \"css selector\" ) self . hide_elements ( selector , by = \"css selector\" ) self . show_element ( selector , by = \"css selector\" ) self . show_elements ( selector , by = \"css selector\" ) self . remove_element ( selector , by = \"css selector\" ) self . remove_elements ( selector , by = \"css selector\" ) self . ad_block () # Duplicates: self.block_ads() self . show_file_choosers () self . disable_beforeunload () self . get_domain_url ( url ) self . get_beautiful_soup ( source = None ) self . get_unique_links () self . get_link_status_code ( link , allow_redirects = False , timeout = 5 , verify = False ) self . assert_link_status_code_is_not_404 ( link ) self . assert_no_404_errors ( multithreaded = True , timeout = None ) # Duplicates: self.assert_no_broken_links(multithreaded=True) self . print_unique_links_with_status_codes () self . get_pdf_text ( pdf , page = None , maxpages = None , password = None , codec = 'utf-8' , wrap = False , nav = False , override = False , caching = True ) self . assert_pdf_text ( pdf , text , page = None , maxpages = None , password = None , codec = 'utf-8' , wrap = True , nav = False , override = False , caching = True ) self . create_folder ( folder ) self . choose_file ( selector , file_path , by = \"css selector\" , timeout = None ) self . save_element_as_image_file ( selector , file_name , folder = None , overlay_text = \"\" ) self . download_file ( file_url , destination_folder = None ) self . save_file_as ( file_url , new_file_name , destination_folder = None ) self . save_data_as ( data , file_name , destination_folder = None ) self . get_downloads_folder () self . get_browser_downloads_folder () self . get_path_of_downloaded_file ( file , browser = False ) self . is_downloaded_file_present ( file , browser = False ) self . delete_downloaded_file_if_present ( file , browser = False ) # Duplicates: self.delete_downloaded_file(file, browser=False) self . assert_downloaded_file ( file , timeout = None , browser = False ) self . assert_true ( expr , msg = None ) self . assert_false ( expr , msg = None ) self . assert_equal ( first , second , msg = None ) self . assert_not_equal ( first , second , msg = None ) self . assert_in ( first , second , msg = None ) self . assert_not_in ( first , second , msg = None ) self . assert_raises ( * args , ** kwargs ) self . wait_for_attribute ( selector , attribute , value = None , by = \"css selector\" , timeout = None ) self . assert_attribute ( selector , attribute , value = None , by = \"css selector\" , timeout = None ) self . assert_title ( title ) self . assert_no_js_errors () self . inspect_html () self . is_valid_url ( url ) self . is_chromium () self . get_chrome_version () self . get_chromedriver_version () self . is_chromedriver_too_old () self . get_mfa_code ( totp_key = None ) # Duplicates: self.get_totp_code(totp_key=None) # self.get_google_auth_password(totp_key=None) # self.get_google_auth_code(totp_key=None) self . enter_mfa_code ( selector , totp_key = None , by = \"css selector\" , timeout = None ) # Duplicates: self.enter_totp_code(selector, totp_key=None, by=\"css selector\", timeout=None) self . convert_css_to_xpath ( css ) self . convert_xpath_to_css ( xpath ) self . convert_to_css_selector ( selector , by ) self . set_value ( selector , text , by = \"css selector\" , timeout = None , scroll = True ) self . js_update_text ( selector , text , by = \"css selector\" , timeout = None ) # Duplicates: self.js_type(selector, text, by=\"css selector\", timeout=None) # self.set_text(selector, text, by=\"css selector\", timeout=None) self . set_text_content ( selector , text , by = \"css selector\" , timeout = None , scroll = False ) self . jquery_update_text ( selector , text , by = \"css selector\" , timeout = None ) self . get_value ( selector , by = \"css selector\" , timeout = None ) self . set_time_limit ( time_limit ) self . set_default_timeout ( timeout ) self . reset_default_timeout () self . skip ( reason = \"\" ) ############ self . set_local_storage_item ( key , value ) self . get_local_storage_item ( key ) self . remove_local_storage_item ( key ) self . clear_local_storage () self . get_local_storage_keys () self . get_local_storage_items () self . set_session_storage_item ( key , value ) self . get_session_storage_item ( key ) self . remove_session_storage_item ( key ) self . clear_session_storage () self . get_session_storage_keys () self . get_session_storage_items () ############ self . add_css_link ( css_link ) self . add_js_link ( js_link ) self . add_css_style ( css_style ) self . add_js_code_from_link ( js_link ) self . add_js_code ( js_code ) self . add_meta_tag ( http_equiv = None , content = None ) ############ self . create_presentation ( name = None , theme = \"default\" , transition = \"default\" ) self . add_slide ( content = None , image = None , code = None , iframe = None , content2 = None , notes = None , transition = None , name = None ) self . save_presentation ( name = None , filename = None , show_notes = False , interval = 0 ) self . begin_presentation ( name = None , filename = None , show_notes = False , interval = 0 ) ############ self . create_pie_chart ( chart_name = None , title = None , subtitle = None , data_name = None , unit = None , libs = True , labels = True , legend = True ) self . create_bar_chart ( chart_name = None , title = None , subtitle = None , data_name = None , unit = None , libs = True , labels = True , legend = True ) self . create_column_chart ( chart_name = None , title = None , subtitle = None , data_name = None , unit = None , libs = True , labels = True , legend = True ) self . create_line_chart ( chart_name = None , title = None , subtitle = None , data_name = None , unit = None , zero = False , libs = True , labels = True , legend = True ) self . create_area_chart ( chart_name = None , title = None , subtitle = None , data_name = None , unit = None , zero = False , libs = True , labels = True , legend = True ) self . add_series_to_chart ( data_name = None , chart_name = None ) self . add_data_point ( label , value , color = None , chart_name = None ) self . save_chart ( chart_name = None , filename = None , folder = None ) self . display_chart ( chart_name = None , filename = None , interval = 0 ) self . extract_chart ( chart_name = None ) ############ self . create_tour ( name = None , theme = None ) self . create_shepherd_tour ( name = None , theme = None ) self . create_bootstrap_tour ( name = None ) self . create_hopscotch_tour ( name = None ) self . create_introjs_tour ( name = None ) self . set_introjs_colors ( theme_color = None , hover_color = None ) self . add_tour_step ( message , selector = None , name = None , title = None , theme = None , alignment = None ) self . play_tour ( name = None ) self . export_tour ( name = None , filename = \"my_tour.js\" , url = None ) ############ self . activate_jquery_confirm () self . set_jqc_theme ( theme , color = None , width = None ) self . reset_jqc_theme () self . get_jqc_button_input ( message , buttons , options = None ) self . get_jqc_text_input ( message , button = None , options = None ) self . get_jqc_form_inputs ( message , buttons , options = None ) ############ self . activate_messenger () self . post_message ( message , duration = None , pause = True , style = \"info\" ) self . post_message_and_highlight ( message , selector , by = \"css selector\" ) self . post_success_message ( message , duration = None , pause = True ) self . post_error_message ( message , duration = None , pause = True ) self . set_messenger_theme ( theme = \"default\" , location = \"default\" , max_messages = \"default\" ) ############ self . generate_referral ( start_page , destination_page , selector = None ) self . generate_traffic ( start_page , destination_page , loops = 1 , selector = None ) self . generate_referral_chain ( pages ) self . generate_traffic_chain ( pages , loops = 1 ) ############ self . get_element ( selector , by = \"css selector\" , timeout = None ) # Duplicates: self.wait_for_element_present(selector, by=\"css selector\", timeout=None) self . assert_element_present ( selector , by = \"css selector\" , timeout = None ) self . assert_elements_present ( * args , ** kwargs ) ############ self . find_element ( selector , by = \"css selector\" , timeout = None ) # Duplicates: self.wait_for_element(selector, by=\"css selector\", timeout=None) # self.wait_for_element_visible(selector, by=\"css selector\", timeout=None) self . assert_element ( selector , by = \"css selector\" , timeout = None ) # Duplicates: self.assert_element_visible(selector, by=\"css selector\", timeout=None) self . assert_elements ( * args , ** kwargs ) # Duplicates: self.assert_elements_visible(*args, **kwargs) ############ self . find_text ( text , selector = \"html\" , by = \"css selector\" , timeout = None ) # Duplicates: self.wait_for_text(text, selector=\"html\", by=\"css selector\", timeout=None) # self.wait_for_text_visible(text, selector=\"html\", by=\"css selector\", timeout=None) self . wait_for_exact_text_visible ( text , selector = \"html\" , by = \"css selector\" , timeout = None ) self . assert_text ( text , selector = \"html\" , by = \"css selector\" , timeout = None ) # Duplicates: self.assert_text_visible(text, selector=\"html\", by=\"css selector\", timeout=None) self . assert_exact_text ( text , selector = \"html\" , by = \"css selector\" , timeout = None ) ############ self . wait_for_link_text_present ( link_text , timeout = None ) self . wait_for_partial_link_text_present ( link_text , timeout = None ) self . find_link_text ( link_text , timeout = None ) # Duplicates: self.wait_for_link_text(link_text, timeout=None) # self.wait_for_link_text_visible(link_text, timeout=None) self . assert_link_text ( link_text , timeout = None ) ############ self . find_partial_link_text ( partial_link_text , timeout = None ) # Duplicates: self.wait_for_partial_link_text(partial_link_text, timeout=None) self . assert_partial_link_text ( partial_link_text , timeout = None ) ############ self . wait_for_element_absent ( selector , by = \"css selector\" , timeout = None ) # Duplicates: self.wait_for_element_not_present(selector, by=\"css selector\") self . assert_element_absent ( selector , by = \"css selector\" , timeout = None ) # Duplicates: self.assert_element_not_present(selector, by=\"css selector\") ############ self . wait_for_element_clickable ( selector , by = \"css selector\" , timeout = None ) ############ self . wait_for_element_not_visible ( selector , by = \"css selector\" , timeout = None ) self . assert_element_not_visible ( selector , by = \"css selector\" , timeout = None ) ############ self . wait_for_text_not_visible ( text , selector = \"html\" , by = \"css selector\" , timeout = None ) self . assert_text_not_visible ( text , selector = \"html\" , by = \"css selector\" , timeout = None ) ############ self . wait_for_attribute_not_present ( selector , attribute , value = None , by = \"css selector\" , timeout = None ) self . assert_attribute_not_present ( selector , attribute , value = None , by = \"css selector\" , timeout = None ) ############ self . accept_alert ( timeout = None ) # Duplicates: self.wait_for_and_accept_alert(timeout=None) self . dismiss_alert ( timeout = None ) # Duplicates: self.wait_for_and_dismiss_alert(timeout=None) self . switch_to_alert ( timeout = None ) # Duplicates: self.wait_for_and_switch_to_alert(timeout=None) ############ self . quit_extra_driver ( driver = None ) ############ self . check_window ( name = \"default\" , level = 0 , baseline = False , check_domain = True , full_diff = False ) ############ self . deferred_assert_element ( selector , by = \"css selector\" , timeout = None , fs = False ) # Duplicates # self.delayed_assert_element(selector, by=\"css selector\", timeout=None, fs=False) self . deferred_assert_element_present ( selector , by = \"css selector\" , timeout = None , fs = False ) # Duplicates # self.delayed_assert_element_present( # selector, by=\"css selector\", timeout=None, fs=False) self . deferred_assert_text ( text , selector = \"html\" , by = \"css selector\" , timeout = None , fs = False ) # Duplicates # self.delayed_assert_text( # text, selector=\"html\", by=\"css selector\", timeout=None, fs=False) self . deferred_assert_exact_text ( text , selector = \"html\" , by = \"css selector\" , timeout = None , fs = False ) # Duplicates # self.delayed_assert_exact_text( # text, selector=\"html\", by=\"css selector\", timeout=None, fs=False) self . deferred_check_window ( name = \"default\" , level = 0 , baseline = False , check_domain = True , full_diff = False , fs = False ) # Duplicates # self.delayed_check_window( # name=\"default\", level=0, baseline=False, # check_domain=True, full_diff=False, fs=False) self . process_deferred_asserts ( print_only = False ) # Duplicates: self.process_delayed_asserts(print_only=False) ############ self . fail ( msg = None ) # Inherited from \"unittest\" self . _print ( TEXT ) # Calls Python's print() / Allows for translations \ud83d\udd35 Examples \u2705 Test Folder: SeleniumBase/examples my_first_test.py parameterized_test.py test_deferred_asserts.py test_demo_site.py test_error_page.py test_login.py test_markers.py test_swag_labs.py test_suite.py test_tinymce.py And many more...", "title": "API Reference"}, {"location": "help_docs/method_summary/#seleniumbase-methods-api-reference", "text": "Here's a list of SeleniumBase method definitions, which are defined in base_case.py For backwards compatibility, older versions of method names have remained to keep older scripts working. (E.g: wait_for_element_visible was shortened to wait_for_element and then to find_element.) self . open ( url ) # Duplicates: self.open_url(url), self.visit(url), visit_url(url), # self.goto(url), self.go_to(url) self . get ( url ) # If the url parameter is a URL: Perform self.open(url) # Otherwise: return self.get_element(URL_AS_A_SELECTOR) self . click ( selector , by = \"css selector\" , timeout = None , delay = 0 , scroll = True ) self . slow_click ( selector , by = \"css selector\" , timeout = None ) self . double_click ( selector , by = \"css selector\" , timeout = None ) self . click_chain ( selectors_list , by = \"css selector\" , timeout = None , spacing = 0 ) self . type ( selector , text , by = \"css selector\" , timeout = None ) # Duplicates: self.update_text(selector, text, by=\"css selector\", timeout=None) # self.input(selector, text, by=\"css selector\", timeout=None) # self.fill(selector, text, by=\"css selector\", timeout=None) # self.write(selector, text, by=\"css selector\", timeout=None) self . send_keys ( selector , text , by = \"css selector\" , timeout = None ) # Duplicates: self.add_text(selector, text, by=\"css selector\", timeout=None) self . submit ( selector , by = \"css selector\" ) self . clear ( selector , by = \"css selector\" , timeout = None ) self . focus ( selector , by = \"css selector\" , timeout = None ) self . refresh_page () # Duplicates: self.refresh(), self.reload(), self.reload_page() self . get_current_url () self . get_origin () self . get_page_source () self . get_title () # Duplicates: self.get_page_title() self . get_user_agent () self . get_locale_code () self . go_back () self . go_forward () self . open_start_page () self . open_if_not_url ( url ) self . is_element_present ( selector , by = \"css selector\" ) self . is_element_visible ( selector , by = \"css selector\" ) self . is_element_clickable ( selector , by = \"css selector\" ) self . is_element_enabled ( selector , by = \"css selector\" ) self . is_text_visible ( text , selector = \"html\" , by = \"css selector\" ) self . is_attribute_present ( selector , attribute , value = None , by = \"css selector\" ) self . is_link_text_visible ( link_text ) self . is_partial_link_text_visible ( partial_link_text ) self . is_link_text_present ( link_text ) self . is_partial_link_text_present ( link_text ) self . get_link_attribute ( link_text , attribute , hard_fail = True ) # Duplicates: self.get_link_text_attribute(link_text, attribute, hard_fail=True) self . get_partial_link_text_attribute ( link_text , attribute , hard_fail = True ) self . click_link ( link_text , timeout = None ) # Duplicates: self.click_link_text(link_text, timeout=None) self . click_partial_link ( partial_link_text , timeout = None ) # Duplicates: self.click_partial_link_text(partial_link_text, timeout=None) self . get_text ( selector , by = \"css selector\" , timeout = None ) self . get_attribute ( selector , attribute , by = \"css selector\" , timeout = None , hard_fail = True ) self . set_attribute ( selector , attribute , value , by = \"css selector\" , timeout = None , scroll = False ) self . set_attributes ( selector , attribute , value , by = \"css selector\" ) # Duplicates: self.set_attribute_all(selector, attribute, value, by=\"css selector\") self . remove_attribute ( selector , attribute , by = \"css selector\" , timeout = None ) self . remove_attributes ( selector , attribute , by = \"css selector\" ) self . get_property ( selector , property , by = \"css selector\" , timeout = None ) self . get_text_content ( selector , by = \"css selector\" , timeout = None ) self . get_property_value ( selector , property , by = \"css selector\" , timeout = None ) self . get_image_url ( selector , by = \"css selector\" , timeout = None ) self . find_elements ( selector , by = \"css selector\" , limit = 0 ) self . find_visible_elements ( selector , by = \"css selector\" , limit = 0 ) self . click_visible_elements ( selector , by = \"css selector\" , limit = 0 , timeout = None ) self . click_nth_visible_element ( selector , number , by = \"css selector\" , timeout = None ) self . click_if_visible ( selector , by = \"css selector\" ) self . click_active_element () self . click_with_offset ( selector , x , y , by = \"css selector\" , mark = None , timeout = None , center = None ) self . double_click_with_offset ( selector , x , y , by = \"css selector\" , mark = None , timeout = None , center = None ) self . is_selected ( selector , by = \"css selector\" , timeout = None ) # Duplicates: self.is_checked(selector, by=\"css selector\", timeout=None) self . select_if_unselected ( selector , by = \"css selector\" ) # Duplicates: self.check_if_unchecked(selector, by=\"css selector\") self . unselect_if_selected ( selector , by = \"css selector\" ) # Duplicates: self.uncheck_if_checked(selector, by=\"css selector\") self . is_element_in_an_iframe ( selector , by = \"css selector\" ) self . switch_to_frame_of_element ( selector , by = \"css selector\" ) self . hover_on_element ( selector , by = \"css selector\" ) self . hover_and_click ( hover_selector , click_selector , hover_by = \"css selector\" , click_by = \"css selector\" , timeout = None ) self . hover_and_double_click ( hover_selector , click_selector , hover_by = \"css selector\" , click_by = \"css selector\" , timeout = None ) self . drag_and_drop ( drag_selector , drop_selector , drag_by = \"css selector\" , drop_by = \"css selector\" , timeout = None , jquery = False ) self . drag_and_drop_with_offset ( selector , x , y , by = \"css selector\" , timeout = None ) self . select_option_by_text ( dropdown_selector , option , dropdown_by = \"css selector\" , timeout = None ) self . select_option_by_index ( dropdown_selector , option , dropdown_by = \"css selector\" , timeout = None ) self . select_option_by_value ( dropdown_selector , option , dropdown_by = \"css selector\" , timeout = None ) self . get_select_options ( dropdown_selector , attribute = \"text\" , by = \"css selector\" , timeout = None ) self . load_html_string ( html_string , new_page = True ) self . set_content ( html_string , new_page = False ) self . load_html_file ( html_file , new_page = True ) self . open_html_file ( html_file ) self . execute_script ( script , * args , ** kwargs ) self . execute_async_script ( script , timeout = None ) self . safe_execute_script ( script , * args , ** kwargs ) self . set_window_rect ( x , y , width , height ) self . set_window_size ( width , height ) self . maximize_window () self . switch_to_frame ( frame , timeout = None ) self . switch_to_default_content () self . switch_to_parent_frame () with self . frame_switch ( frame , timeout = None ): # Indented Code Block for Context Manager (Must use \"with\") self . set_content_to_frame ( frame , timeout = None ) self . set_content_to_default ( nested = False ) # Duplicates: self.set_content_to_default_content(nested=False) self . set_content_to_parent () # Duplicates: self.set_content_to_parent_frame() self . open_new_window ( switch_to = True ) # Duplicates: self.open_new_tab(switch_to=True) self . switch_to_window ( window , timeout = None ) # Duplicates: self.switch_to_tab(tab, timeout=None) self . switch_to_default_window () # Duplicates: self.switch_to_default_tab() self . switch_to_newest_window () # Duplicates: self.switch_to_newest_tab() self . get_new_driver ( browser = None , headless = None , locale_code = None , protocol = None , servername = None , port = None , proxy = None , proxy_bypass_list = None , proxy_pac_url = None , agent = None , switch_to = True , cap_file = None , cap_string = None , recorder_ext = None , disable_csp = None , enable_ws = None , enable_sync = None , use_auto_ext = None , undetectable = None , no_sandbox = None , disable_gpu = None , incognito = None , guest_mode = None , devtools = None , remote_debug = None , swiftshader = None , ad_block_on = None , block_images = None , do_not_track = None , chromium_arg = None , firefox_arg = None , firefox_pref = None , user_data_dir = None , extension_zip = None , extension_dir = None , page_load_strategy = None , external_pdf = None , is_mobile = None , d_width = None , d_height = None , d_p_r = None , ) self . switch_to_driver ( driver ) self . switch_to_default_driver () self . save_screenshot ( name , folder = None , selector = None , by = \"css selector\" ) self . save_screenshot_to_logs ( name = None , selector = None , by = \"css selector\" ) self . save_page_source ( name , folder = None ) self . save_cookies ( name = \"cookies.txt\" ) self . load_cookies ( name = \"cookies.txt\" ) self . delete_all_cookies () # Duplicates: self.clear_all_cookies() self . delete_saved_cookies ( name = \"cookies.txt\" ) self . wait_for_ready_state_complete ( timeout = None ) self . wait_for_angularjs ( timeout = None ) self . sleep ( seconds ) # Duplicates: self.wait(seconds) self . install_addon ( xpi_file ) self . activate_demo_mode () self . deactivate_demo_mode () self . activate_design_mode () self . deactivate_design_mode () self . activate_recorder () self . save_recorded_actions () self . activate_jquery () self . bring_active_window_to_front () self . bring_to_front ( selector , by = \"css selector\" ) self . highlight_click ( selector , by = \"css selector\" , loops = 3 , scroll = True ) self . highlight_type ( selector , text , by = \"css selector\" , loops = 3 , scroll = True ) # Duplicates # self.highlight_update_text(selector, text, by=\"css selector\", loops=3, scroll=True) self . highlight ( selector , by = \"css selector\" , loops = 4 , scroll = True ) self . press_up_arrow ( selector = \"html\" , times = 1 , by = \"css selector\" ) self . press_down_arrow ( selector = \"html\" , times = 1 , by = \"css selector\" ) self . press_left_arrow ( selector = \"html\" , times = 1 , by = \"css selector\" ) self . press_right_arrow ( selector = \"html\" , times = 1 , by = \"css selector\" ) self . scroll_to ( selector , by = \"css selector\" , timeout = None ) # Duplicates: self.scroll_to_element(selector, by=\"css selector\") self . slow_scroll_to ( selector , by = \"css selector\" , timeout = None ) # Duplicates: self.slow_scroll_to_element(selector, by=\"css selector\") self . scroll_to_top () self . scroll_to_bottom () self . click_xpath ( xpath ) self . js_click ( selector , by = \"css selector\" , all_matches = False , scroll = True ) self . js_click_all ( selector , by = \"css selector\" ) self . jquery_click ( selector , by = \"css selector\" ) self . jquery_click_all ( selector , by = \"css selector\" ) self . hide_element ( selector , by = \"css selector\" ) self . hide_elements ( selector , by = \"css selector\" ) self . show_element ( selector , by = \"css selector\" ) self . show_elements ( selector , by = \"css selector\" ) self . remove_element ( selector , by = \"css selector\" ) self . remove_elements ( selector , by = \"css selector\" ) self . ad_block () # Duplicates: self.block_ads() self . show_file_choosers () self . disable_beforeunload () self . get_domain_url ( url ) self . get_beautiful_soup ( source = None ) self . get_unique_links () self . get_link_status_code ( link , allow_redirects = False , timeout = 5 , verify = False ) self . assert_link_status_code_is_not_404 ( link ) self . assert_no_404_errors ( multithreaded = True , timeout = None ) # Duplicates: self.assert_no_broken_links(multithreaded=True) self . print_unique_links_with_status_codes () self . get_pdf_text ( pdf , page = None , maxpages = None , password = None , codec = 'utf-8' , wrap = False , nav = False , override = False , caching = True ) self . assert_pdf_text ( pdf , text , page = None , maxpages = None , password = None , codec = 'utf-8' , wrap = True , nav = False , override = False , caching = True ) self . create_folder ( folder ) self . choose_file ( selector , file_path , by = \"css selector\" , timeout = None ) self . save_element_as_image_file ( selector , file_name , folder = None , overlay_text = \"\" ) self . download_file ( file_url , destination_folder = None ) self . save_file_as ( file_url , new_file_name , destination_folder = None ) self . save_data_as ( data , file_name , destination_folder = None ) self . get_downloads_folder () self . get_browser_downloads_folder () self . get_path_of_downloaded_file ( file , browser = False ) self . is_downloaded_file_present ( file , browser = False ) self . delete_downloaded_file_if_present ( file , browser = False ) # Duplicates: self.delete_downloaded_file(file, browser=False) self . assert_downloaded_file ( file , timeout = None , browser = False ) self . assert_true ( expr , msg = None ) self . assert_false ( expr , msg = None ) self . assert_equal ( first , second , msg = None ) self . assert_not_equal ( first , second , msg = None ) self . assert_in ( first , second , msg = None ) self . assert_not_in ( first , second , msg = None ) self . assert_raises ( * args , ** kwargs ) self . wait_for_attribute ( selector , attribute , value = None , by = \"css selector\" , timeout = None ) self . assert_attribute ( selector , attribute , value = None , by = \"css selector\" , timeout = None ) self . assert_title ( title ) self . assert_no_js_errors () self . inspect_html () self . is_valid_url ( url ) self . is_chromium () self . get_chrome_version () self . get_chromedriver_version () self . is_chromedriver_too_old () self . get_mfa_code ( totp_key = None ) # Duplicates: self.get_totp_code(totp_key=None) # self.get_google_auth_password(totp_key=None) # self.get_google_auth_code(totp_key=None) self . enter_mfa_code ( selector , totp_key = None , by = \"css selector\" , timeout = None ) # Duplicates: self.enter_totp_code(selector, totp_key=None, by=\"css selector\", timeout=None) self . convert_css_to_xpath ( css ) self . convert_xpath_to_css ( xpath ) self . convert_to_css_selector ( selector , by ) self . set_value ( selector , text , by = \"css selector\" , timeout = None , scroll = True ) self . js_update_text ( selector , text , by = \"css selector\" , timeout = None ) # Duplicates: self.js_type(selector, text, by=\"css selector\", timeout=None) # self.set_text(selector, text, by=\"css selector\", timeout=None) self . set_text_content ( selector , text , by = \"css selector\" , timeout = None , scroll = False ) self . jquery_update_text ( selector , text , by = \"css selector\" , timeout = None ) self . get_value ( selector , by = \"css selector\" , timeout = None ) self . set_time_limit ( time_limit ) self . set_default_timeout ( timeout ) self . reset_default_timeout () self . skip ( reason = \"\" ) ############ self . set_local_storage_item ( key , value ) self . get_local_storage_item ( key ) self . remove_local_storage_item ( key ) self . clear_local_storage () self . get_local_storage_keys () self . get_local_storage_items () self . set_session_storage_item ( key , value ) self . get_session_storage_item ( key ) self . remove_session_storage_item ( key ) self . clear_session_storage () self . get_session_storage_keys () self . get_session_storage_items () ############ self . add_css_link ( css_link ) self . add_js_link ( js_link ) self . add_css_style ( css_style ) self . add_js_code_from_link ( js_link ) self . add_js_code ( js_code ) self . add_meta_tag ( http_equiv = None , content = None ) ############ self . create_presentation ( name = None , theme = \"default\" , transition = \"default\" ) self . add_slide ( content = None , image = None , code = None , iframe = None , content2 = None , notes = None , transition = None , name = None ) self . save_presentation ( name = None , filename = None , show_notes = False , interval = 0 ) self . begin_presentation ( name = None , filename = None , show_notes = False , interval = 0 ) ############ self . create_pie_chart ( chart_name = None , title = None , subtitle = None , data_name = None , unit = None , libs = True , labels = True , legend = True ) self . create_bar_chart ( chart_name = None , title = None , subtitle = None , data_name = None , unit = None , libs = True , labels = True , legend = True ) self . create_column_chart ( chart_name = None , title = None , subtitle = None , data_name = None , unit = None , libs = True , labels = True , legend = True ) self . create_line_chart ( chart_name = None , title = None , subtitle = None , data_name = None , unit = None , zero = False , libs = True , labels = True , legend = True ) self . create_area_chart ( chart_name = None , title = None , subtitle = None , data_name = None , unit = None , zero = False , libs = True , labels = True , legend = True ) self . add_series_to_chart ( data_name = None , chart_name = None ) self . add_data_point ( label , value , color = None , chart_name = None ) self . save_chart ( chart_name = None , filename = None , folder = None ) self . display_chart ( chart_name = None , filename = None , interval = 0 ) self . extract_chart ( chart_name = None ) ############ self . create_tour ( name = None , theme = None ) self . create_shepherd_tour ( name = None , theme = None ) self . create_bootstrap_tour ( name = None ) self . create_hopscotch_tour ( name = None ) self . create_introjs_tour ( name = None ) self . set_introjs_colors ( theme_color = None , hover_color = None ) self . add_tour_step ( message , selector = None , name = None , title = None , theme = None , alignment = None ) self . play_tour ( name = None ) self . export_tour ( name = None , filename = \"my_tour.js\" , url = None ) ############ self . activate_jquery_confirm () self . set_jqc_theme ( theme , color = None , width = None ) self . reset_jqc_theme () self . get_jqc_button_input ( message , buttons , options = None ) self . get_jqc_text_input ( message , button = None , options = None ) self . get_jqc_form_inputs ( message , buttons , options = None ) ############ self . activate_messenger () self . post_message ( message , duration = None , pause = True , style = \"info\" ) self . post_message_and_highlight ( message , selector , by = \"css selector\" ) self . post_success_message ( message , duration = None , pause = True ) self . post_error_message ( message , duration = None , pause = True ) self . set_messenger_theme ( theme = \"default\" , location = \"default\" , max_messages = \"default\" ) ############ self . generate_referral ( start_page , destination_page , selector = None ) self . generate_traffic ( start_page , destination_page , loops = 1 , selector = None ) self . generate_referral_chain ( pages ) self . generate_traffic_chain ( pages , loops = 1 ) ############ self . get_element ( selector , by = \"css selector\" , timeout = None ) # Duplicates: self.wait_for_element_present(selector, by=\"css selector\", timeout=None) self . assert_element_present ( selector , by = \"css selector\" , timeout = None ) self . assert_elements_present ( * args , ** kwargs ) ############ self . find_element ( selector , by = \"css selector\" , timeout = None ) # Duplicates: self.wait_for_element(selector, by=\"css selector\", timeout=None) # self.wait_for_element_visible(selector, by=\"css selector\", timeout=None) self . assert_element ( selector , by = \"css selector\" , timeout = None ) # Duplicates: self.assert_element_visible(selector, by=\"css selector\", timeout=None) self . assert_elements ( * args , ** kwargs ) # Duplicates: self.assert_elements_visible(*args, **kwargs) ############ self . find_text ( text , selector = \"html\" , by = \"css selector\" , timeout = None ) # Duplicates: self.wait_for_text(text, selector=\"html\", by=\"css selector\", timeout=None) # self.wait_for_text_visible(text, selector=\"html\", by=\"css selector\", timeout=None) self . wait_for_exact_text_visible ( text , selector = \"html\" , by = \"css selector\" , timeout = None ) self . assert_text ( text , selector = \"html\" , by = \"css selector\" , timeout = None ) # Duplicates: self.assert_text_visible(text, selector=\"html\", by=\"css selector\", timeout=None) self . assert_exact_text ( text , selector = \"html\" , by = \"css selector\" , timeout = None ) ############ self . wait_for_link_text_present ( link_text , timeout = None ) self . wait_for_partial_link_text_present ( link_text , timeout = None ) self . find_link_text ( link_text , timeout = None ) # Duplicates: self.wait_for_link_text(link_text, timeout=None) # self.wait_for_link_text_visible(link_text, timeout=None) self . assert_link_text ( link_text , timeout = None ) ############ self . find_partial_link_text ( partial_link_text , timeout = None ) # Duplicates: self.wait_for_partial_link_text(partial_link_text, timeout=None) self . assert_partial_link_text ( partial_link_text , timeout = None ) ############ self . wait_for_element_absent ( selector , by = \"css selector\" , timeout = None ) # Duplicates: self.wait_for_element_not_present(selector, by=\"css selector\") self . assert_element_absent ( selector , by = \"css selector\" , timeout = None ) # Duplicates: self.assert_element_not_present(selector, by=\"css selector\") ############ self . wait_for_element_clickable ( selector , by = \"css selector\" , timeout = None ) ############ self . wait_for_element_not_visible ( selector , by = \"css selector\" , timeout = None ) self . assert_element_not_visible ( selector , by = \"css selector\" , timeout = None ) ############ self . wait_for_text_not_visible ( text , selector = \"html\" , by = \"css selector\" , timeout = None ) self . assert_text_not_visible ( text , selector = \"html\" , by = \"css selector\" , timeout = None ) ############ self . wait_for_attribute_not_present ( selector , attribute , value = None , by = \"css selector\" , timeout = None ) self . assert_attribute_not_present ( selector , attribute , value = None , by = \"css selector\" , timeout = None ) ############ self . accept_alert ( timeout = None ) # Duplicates: self.wait_for_and_accept_alert(timeout=None) self . dismiss_alert ( timeout = None ) # Duplicates: self.wait_for_and_dismiss_alert(timeout=None) self . switch_to_alert ( timeout = None ) # Duplicates: self.wait_for_and_switch_to_alert(timeout=None) ############ self . quit_extra_driver ( driver = None ) ############ self . check_window ( name = \"default\" , level = 0 , baseline = False , check_domain = True , full_diff = False ) ############ self . deferred_assert_element ( selector , by = \"css selector\" , timeout = None , fs = False ) # Duplicates # self.delayed_assert_element(selector, by=\"css selector\", timeout=None, fs=False) self . deferred_assert_element_present ( selector , by = \"css selector\" , timeout = None , fs = False ) # Duplicates # self.delayed_assert_element_present( # selector, by=\"css selector\", timeout=None, fs=False) self . deferred_assert_text ( text , selector = \"html\" , by = \"css selector\" , timeout = None , fs = False ) # Duplicates # self.delayed_assert_text( # text, selector=\"html\", by=\"css selector\", timeout=None, fs=False) self . deferred_assert_exact_text ( text , selector = \"html\" , by = \"css selector\" , timeout = None , fs = False ) # Duplicates # self.delayed_assert_exact_text( # text, selector=\"html\", by=\"css selector\", timeout=None, fs=False) self . deferred_check_window ( name = \"default\" , level = 0 , baseline = False , check_domain = True , full_diff = False , fs = False ) # Duplicates # self.delayed_check_window( # name=\"default\", level=0, baseline=False, # check_domain=True, full_diff=False, fs=False) self . process_deferred_asserts ( print_only = False ) # Duplicates: self.process_delayed_asserts(print_only=False) ############ self . fail ( msg = None ) # Inherited from \"unittest\" self . _print ( TEXT ) # Calls Python's print() / Allows for translations", "title": " SeleniumBase Methods (API Reference)"}, {"location": "help_docs/mobile_testing/", "text": "Mobile Testing \u00b6 Use --mobile to run SeleniumBase tests using Chrome's mobile device emulator with default values for Device Metrics and User-Agent. Here's an example mobile test: SeleniumBase/examples/test_skype_site.py pytest test_skype_site.py --mobile To configure Device Metrics, use: --metrics = \"CSS_Width,CSS_Height,Pixel_Ratio\" To configure the User-Agent, use: --agent = \"USER-AGENT-STRING\" To find real values for Device Metrics, see: Device Metrics List To find real User-Agent strings, see: User Agent Strings List Here's another example of a mobile test: SeleniumBase/examples/test_swag_labs.py pytest test_swag_labs.py --mobile Here's an example of configuring mobile settings for that test: # Run tests using Chrome's mobile device emulator (default settings) pytest test_swag_labs.py --mobile # Run mobile tests specifying CSS Width, CSS Height, and Pixel-Ratio pytest test_swag_labs.py --mobile --metrics = \"360,640,2\" # Run mobile tests specifying the user agent pytest test_swag_labs.py --mobile --agent = \"Mozilla/5.0 (Linux; Android 9; Pixel 3 XL)\"", "title": "Mobile Testing"}, {"location": "help_docs/mobile_testing/#mobile-testing", "text": "Use --mobile to run SeleniumBase tests using Chrome's mobile device emulator with default values for Device Metrics and User-Agent. Here's an example mobile test: SeleniumBase/examples/test_skype_site.py pytest test_skype_site.py --mobile To configure Device Metrics, use: --metrics = \"CSS_Width,CSS_Height,Pixel_Ratio\" To configure the User-Agent, use: --agent = \"USER-AGENT-STRING\" To find real values for Device Metrics, see: Device Metrics List To find real User-Agent strings, see: User Agent Strings List Here's another example of a mobile test: SeleniumBase/examples/test_swag_labs.py pytest test_swag_labs.py --mobile Here's an example of configuring mobile settings for that test: # Run tests using Chrome's mobile device emulator (default settings) pytest test_swag_labs.py --mobile # Run mobile tests specifying CSS Width, CSS Height, and Pixel-Ratio pytest test_swag_labs.py --mobile --metrics = \"360,640,2\" # Run mobile tests specifying the user agent pytest test_swag_labs.py --mobile --agent = \"Mozilla/5.0 (Linux; Android 9; Pixel 3 XL)\"", "title": " Mobile Testing"}, {"location": "help_docs/recorder_mode/", "text": "Recorder Mode \ud83d\udd34 \u00b6 \ud83d\udd34 SeleniumBase Recorder Mode lets you record & export browser actions into test automation scripts. \ud83d\udd34 To make a new recording with Recorder Mode, use sbase mkrec , sbase codegen , or sbase record ): sbase mkrec TEST_NAME.py --url = URL If the file already exists, you'll get an error. If no URL is provided, you'll start on a blank page and will need to navigate somewhere for the Recorder to activate. (The Recorder captures events on URLs that start with https , http , or file .) The command above runs an empty test that stops at a breakpoint so that you can perform manual browser actions for the Recorder. When you have finished recording, type \" c \" on the command-line and press [ENTER] to continue from the breakpoint. The test will complete and a file called TEST_NAME_rec.py will be automatically created in the ./recordings folder. That file will get copied back to the original folder with the name you gave it. (You can run with Edge instead of Chrome by adding --edge to the command above. For headed Linux machines, add --gui to prevent the default headless mode on Linux.) Example: sbase mkrec new_test.py --url = wikipedia.org * RECORDING initialized: new_test.py pytest new_test.py --rec -q -s --url = wikipedia.org > .../SeleniumBase/examples/new_test.py ( 7 ) test_recording () 5 def test_recording ( self ) : 6 if self.recorder_ext and not self.xvfb: ----> 7 import ipdb ; ipdb.set_trace () ipdb> c >>> RECORDING SAVED as: recordings/new_test_rec.py ************************************************** *** RECORDING COPIED to: new_test.py \ud83d\udd34 You can also activate Recorder Mode from the Recorder Desktop App: sbase recorder * Starting the SeleniumBase Recorder Desktop App... \ud83d\udd34 While a recording is in progress, you can press the [ESC] key to pause the Recorder. To resume the recording, you can hit the [~`] key, which is located directly below the [ESC] key on most keyboards. \ud83d\udd34 From within Recorder Mode there are two additional modes: \"Assert Element Mode\" and \"Assert Text Mode\". To switch into \"Assert Element Mode\", press the [^]-key (SHIFT+6) : The border will become purple, and you'll be able to click on elements to assert from your test. To switch into \"Assert Text Mode\", press the [&]-key (SHIFT+7) : The border will become teal, and you'll be able to click on elements for asserting text from your test. While using either of the two special Assertion Modes, certain actions such as clicking on links won't have any effect. This lets you make assertions on elements without navigating away from the page, etc. To add an assertion for buttons without triggering default \"click\" behavior, mouse-down on the button and then mouse-up somewhere else. (This prevents a detected click while still recording the assert.) To return back to the original Recorder Mode, press any key other than [SHIFT] or [BACKSPACE] (Eg: Press [CONTROL] , etc.). Press [ESC] once to leave the Assertion Modes, but it'll stop the Recorder if you press it again. \ud83d\udd34 For extra flexibility, the sbase mkrec command can be split into four separate commands: sbase mkfile TEST_NAME.py --rec pytest TEST_NAME.py --rec -q -s sbase print ./recordings/TEST_NAME_rec.py -n cp ./recordings/TEST_NAME_rec.py ./TEST_NAME.py The first command creates a boilerplate test with a breakpoint; the second command runs the test with the Recorder activated; the third command prints the completed test to the console; and the fourth command replaces the initial boilerplate with the completed test. If you're just experimenting with the Recorder, you can run the second command as many times as you want, and it'll override previous recordings saved to ./recordings/TEST_NAME_rec.py . (Note that -s is needed to allow breakpoints, unless you already have a pytest.ini file present with addopts = --capture=no in it. The -q is optional, which shortens pytest console output.) \ud83d\udd34 You can also use the Recorder to add code to an existing test. To do that, you'll first need to create a breakpoint in your code to insert manual browser actions: import ipdb ; ipdb . set_trace () Now you'll be able to run your test with pytest , and it will stop at the breakpoint for you to add in actions: (Press c and ENTER on the command-line to continue from the breakpoint.) pytest TEST_NAME.py --rec -s \ud83d\udd34 You can also set a breakpoint at the start of your test by adding --trace as a pytest command-line option: (This is useful when running Recorder Mode without any ipdb breakpoints.) pytest TEST_NAME.py --trace --rec -s \ud83d\udd34 After the test completes, a file called TEST_NAME_rec.py will be automatically created in the ./recordings folder, which will include the actions performed by the test, and the manual actions that you added in. \ud83d\udd34 Here's a command-line notification for a completed recording: >>> RECORDING SAVED as: recordings/TEST_NAME_rec.py *************************************************** \ud83d\udd34 When running additional tests from the same Python module, Recordings will get added to the file that was created from the first test: >>> RECORDING ADDED to: recordings/TEST_NAME_rec.py *************************************************** \ud83d\udd34 Recorder Mode works by saving your recorded actions into the browser's sessionStorage. SeleniumBase then reads from the browser's sessionStorage to take the raw data and generate a full test from it. Keep in mind that sessionStorage is only present while the browser tab remains in the same domain/origin. (The sessionStorage of that tab goes away if you leave that domain/origin.) To compensate, links to web pages of different domain/origin will automatically open a new tab for you in Recorder Mode. \ud83d\udd34 Additionally, the SeleniumBase self.open(URL) method will also open a new tab for you in Recorder Mode if the domain/origin is different from the current URL. If you need to navigate to a different domain/origin from within the same tab, call self.save_recorded_actions() first, which saves the recorded data for later. When a recorded test completes, SeleniumBase scans the sessionStorage data of all open browser tabs for generating the completed script. \ud83d\udd34 As an alternative to activating Recorder Mode with the --rec command-line arg, you can also call self.activate_recorder() from your tests. Using the Recorder this way is only useful for tests that stay on the same URL. This is because the standard Recorder Mode functions as a Chrome extension and persists wherever the browser goes. (This version only stays on the page where called.) \ud83d\udd34 (Note that same domain/origin is not the same as same URL . Example: https://xkcd.com/353 and https://xkcd.com/1537 are two different URLs with the same domain/origin . That means both URLs share the same sessionStorage, and that changes persist to different URLs of the same domain/origin. If you want to find out a website's origin during a test, just call: self.get_origin() , which returns the value of window.location.origin from the browser's console.) \ud83d\udd34 Inside recorded tests, you might find the self.open_if_not_url(URL) method, which opens the URL given if the browser is not currently on that page. SeleniumBase uses this method in recorded scripts when the Recorder detects that a browser action changed the current URL. This method prevents an unnecessary page load and shows what page the test visited after a browser action. To learn more about SeleniumBase, check out the Docs Site: All the code is on GitHub:", "title": "Recorder Mode"}, {"location": "help_docs/recorder_mode/#recorder-mode", "text": "\ud83d\udd34 SeleniumBase Recorder Mode lets you record & export browser actions into test automation scripts. \ud83d\udd34 To make a new recording with Recorder Mode, use sbase mkrec , sbase codegen , or sbase record ): sbase mkrec TEST_NAME.py --url = URL If the file already exists, you'll get an error. If no URL is provided, you'll start on a blank page and will need to navigate somewhere for the Recorder to activate. (The Recorder captures events on URLs that start with https , http , or file .) The command above runs an empty test that stops at a breakpoint so that you can perform manual browser actions for the Recorder. When you have finished recording, type \" c \" on the command-line and press [ENTER] to continue from the breakpoint. The test will complete and a file called TEST_NAME_rec.py will be automatically created in the ./recordings folder. That file will get copied back to the original folder with the name you gave it. (You can run with Edge instead of Chrome by adding --edge to the command above. For headed Linux machines, add --gui to prevent the default headless mode on Linux.) Example: sbase mkrec new_test.py --url = wikipedia.org * RECORDING initialized: new_test.py pytest new_test.py --rec -q -s --url = wikipedia.org > .../SeleniumBase/examples/new_test.py ( 7 ) test_recording () 5 def test_recording ( self ) : 6 if self.recorder_ext and not self.xvfb: ----> 7 import ipdb ; ipdb.set_trace () ipdb> c >>> RECORDING SAVED as: recordings/new_test_rec.py ************************************************** *** RECORDING COPIED to: new_test.py \ud83d\udd34 You can also activate Recorder Mode from the Recorder Desktop App: sbase recorder * Starting the SeleniumBase Recorder Desktop App... \ud83d\udd34 While a recording is in progress, you can press the [ESC] key to pause the Recorder. To resume the recording, you can hit the [~`] key, which is located directly below the [ESC] key on most keyboards. \ud83d\udd34 From within Recorder Mode there are two additional modes: \"Assert Element Mode\" and \"Assert Text Mode\". To switch into \"Assert Element Mode\", press the [^]-key (SHIFT+6) : The border will become purple, and you'll be able to click on elements to assert from your test. To switch into \"Assert Text Mode\", press the [&]-key (SHIFT+7) : The border will become teal, and you'll be able to click on elements for asserting text from your test. While using either of the two special Assertion Modes, certain actions such as clicking on links won't have any effect. This lets you make assertions on elements without navigating away from the page, etc. To add an assertion for buttons without triggering default \"click\" behavior, mouse-down on the button and then mouse-up somewhere else. (This prevents a detected click while still recording the assert.) To return back to the original Recorder Mode, press any key other than [SHIFT] or [BACKSPACE] (Eg: Press [CONTROL] , etc.). Press [ESC] once to leave the Assertion Modes, but it'll stop the Recorder if you press it again. \ud83d\udd34 For extra flexibility, the sbase mkrec command can be split into four separate commands: sbase mkfile TEST_NAME.py --rec pytest TEST_NAME.py --rec -q -s sbase print ./recordings/TEST_NAME_rec.py -n cp ./recordings/TEST_NAME_rec.py ./TEST_NAME.py The first command creates a boilerplate test with a breakpoint; the second command runs the test with the Recorder activated; the third command prints the completed test to the console; and the fourth command replaces the initial boilerplate with the completed test. If you're just experimenting with the Recorder, you can run the second command as many times as you want, and it'll override previous recordings saved to ./recordings/TEST_NAME_rec.py . (Note that -s is needed to allow breakpoints, unless you already have a pytest.ini file present with addopts = --capture=no in it. The -q is optional, which shortens pytest console output.) \ud83d\udd34 You can also use the Recorder to add code to an existing test. To do that, you'll first need to create a breakpoint in your code to insert manual browser actions: import ipdb ; ipdb . set_trace () Now you'll be able to run your test with pytest , and it will stop at the breakpoint for you to add in actions: (Press c and ENTER on the command-line to continue from the breakpoint.) pytest TEST_NAME.py --rec -s \ud83d\udd34 You can also set a breakpoint at the start of your test by adding --trace as a pytest command-line option: (This is useful when running Recorder Mode without any ipdb breakpoints.) pytest TEST_NAME.py --trace --rec -s \ud83d\udd34 After the test completes, a file called TEST_NAME_rec.py will be automatically created in the ./recordings folder, which will include the actions performed by the test, and the manual actions that you added in. \ud83d\udd34 Here's a command-line notification for a completed recording: >>> RECORDING SAVED as: recordings/TEST_NAME_rec.py *************************************************** \ud83d\udd34 When running additional tests from the same Python module, Recordings will get added to the file that was created from the first test: >>> RECORDING ADDED to: recordings/TEST_NAME_rec.py *************************************************** \ud83d\udd34 Recorder Mode works by saving your recorded actions into the browser's sessionStorage. SeleniumBase then reads from the browser's sessionStorage to take the raw data and generate a full test from it. Keep in mind that sessionStorage is only present while the browser tab remains in the same domain/origin. (The sessionStorage of that tab goes away if you leave that domain/origin.) To compensate, links to web pages of different domain/origin will automatically open a new tab for you in Recorder Mode. \ud83d\udd34 Additionally, the SeleniumBase self.open(URL) method will also open a new tab for you in Recorder Mode if the domain/origin is different from the current URL. If you need to navigate to a different domain/origin from within the same tab, call self.save_recorded_actions() first, which saves the recorded data for later. When a recorded test completes, SeleniumBase scans the sessionStorage data of all open browser tabs for generating the completed script. \ud83d\udd34 As an alternative to activating Recorder Mode with the --rec command-line arg, you can also call self.activate_recorder() from your tests. Using the Recorder this way is only useful for tests that stay on the same URL. This is because the standard Recorder Mode functions as a Chrome extension and persists wherever the browser goes. (This version only stays on the page where called.) \ud83d\udd34 (Note that same domain/origin is not the same as same URL . Example: https://xkcd.com/353 and https://xkcd.com/1537 are two different URLs with the same domain/origin . That means both URLs share the same sessionStorage, and that changes persist to different URLs of the same domain/origin. If you want to find out a website's origin during a test, just call: self.get_origin() , which returns the value of window.location.origin from the browser's console.) \ud83d\udd34 Inside recorded tests, you might find the self.open_if_not_url(URL) method, which opens the URL given if the browser is not currently on that page. SeleniumBase uses this method in recorded scripts when the Recorder detects that a browser action changed the current URL. This method prevents an unnecessary page load and shows what page the test visited after a browser action. To learn more about SeleniumBase, check out the Docs Site: All the code is on GitHub:", "title": " Recorder Mode \ud83d\udd34"}, {"location": "help_docs/shadow_dom/", "text": "Shadow DOM support / Shadow-root interaction \u00b6 \ud83d\udd35 SeleniumBase lets you pierce through open Shadow DOM selectors (to interact with elements inside) by adding ::shadow to CSS fragments that include a shadow-root element. For multi-layered shadow-roots, you must individually pierce through each shadow-root element that you want to get through. \ud83d\udd35 Here are some examples of Shadow DOM selectors: css_1 = \"downloads-manager::shadow #no-downloads\" css_2 = \"downloads-manager::shadow #downloadsList downloads-item::shadow #file-link\" css_3 = \"downloads-manager::shadow downloads-toolbar::shadow cr-toolbar::shadow cr-toolbar-search-field::shadow cr-icon-button\" css_4 = \"downloads-manager::shadow downloads-toolbar::shadow cr-toolbar::shadow cr-toolbar-search-field::shadow #searchInput\" css_5 = \"downloads-manager::shadow downloads-toolbar::shadow cr-toolbar::shadow cr-toolbar-search-field::shadow #clearSearch\" \ud83d\udd35 The shadow-root ( ::shadow ) elements are transitional, and therefore cannot be the final part of your CSS selectors. Complete your CSS selectors by including an element that's inside a shadow-root. \ud83d\udd35 Note that ::shadow selectors only exist within SeleniumBase, and do not exist outside of it. \ud83d\udd35 Here are some examples of tests that interact with Shadow DOM elements: * examples/shadow_root_test.py * examples/test_shadow_dom.py * examples/wordle_test.py", "title": "Shadow DOM Support"}, {"location": "help_docs/shadow_dom/#shadow-dom-support-shadow-root-interaction", "text": "\ud83d\udd35 SeleniumBase lets you pierce through open Shadow DOM selectors (to interact with elements inside) by adding ::shadow to CSS fragments that include a shadow-root element. For multi-layered shadow-roots, you must individually pierce through each shadow-root element that you want to get through. \ud83d\udd35 Here are some examples of Shadow DOM selectors: css_1 = \"downloads-manager::shadow #no-downloads\" css_2 = \"downloads-manager::shadow #downloadsList downloads-item::shadow #file-link\" css_3 = \"downloads-manager::shadow downloads-toolbar::shadow cr-toolbar::shadow cr-toolbar-search-field::shadow cr-icon-button\" css_4 = \"downloads-manager::shadow downloads-toolbar::shadow cr-toolbar::shadow cr-toolbar-search-field::shadow #searchInput\" css_5 = \"downloads-manager::shadow downloads-toolbar::shadow cr-toolbar::shadow cr-toolbar-search-field::shadow #clearSearch\" \ud83d\udd35 The shadow-root ( ::shadow ) elements are transitional, and therefore cannot be the final part of your CSS selectors. Complete your CSS selectors by including an element that's inside a shadow-root. \ud83d\udd35 Note that ::shadow selectors only exist within SeleniumBase, and do not exist outside of it. \ud83d\udd35 Here are some examples of tests that interact with Shadow DOM elements: * examples/shadow_root_test.py * examples/test_shadow_dom.py * examples/wordle_test.py", "title": "Shadow DOM support / Shadow-root interaction"}, {"location": "help_docs/syntax_formats/", "text": "The 20 Syntax Formats \u00b6 SeleniumBase supports 20 different syntax formats ( design patterns ) for structuring tests. ( The first 6 are the most common. ) 1. BaseCase direct inheritance This format is used by most of the examples in the SeleniumBase examples folder . It's a great starting point for anyone learning SeleniumBase, and it follows good object-oriented programming principles. In this format, BaseCase is imported at the top of a Python file, followed by a Python class inheriting BaseCase . Then, any test method defined in that class automatically gains access to SeleniumBase methods, including the setUp() and tearDown() methods that are automatically called to spin up and spin down web browsers at the beginning and end of test methods. Here's an example of that: from seleniumbase import BaseCase class MyTestClass ( BaseCase ): def test_demo_site ( self ): self . open ( \"https://seleniumbase.io/demo_page\" ) self . type ( \"#myTextInput\" , \"This is Automated\" ) self . click ( \"#myButton\" ) self . assert_element ( \"tbody#tbodyId\" ) self . assert_text ( \"Automation Practice\" , \"h3\" ) self . click_link ( \"SeleniumBase Demo Page\" ) self . assert_exact_text ( \"Demo Page\" , \"h1\" ) self . assert_no_js_errors () (See examples/test_demo_site.py for the full test.) 2. BaseCase subclass inheritance There are situations where you may want to customize the setUp and tearDown of your tests. Maybe you want to have all your tests login to a specific web site first, or maybe you want to have your tests report results through an API call depending on whether a test passed or failed. This can be done by creating a subclass of BaseCase and then carefully creating custom setUp() and tearDown() methods that don't overwrite the critical functionality of the default SeleniumBase setUp() and tearDown() methods. Afterwards, your test classes will inherit the subclass of BaseCase with the added functionality, rather than directly inheriting BaseCase itself. Here's an example of that: from seleniumbase import BaseCase class BaseTestCase ( BaseCase ): def setUp ( self ): super ( BaseTestCase , self ) . setUp () # <<< Run custom setUp() code for tests AFTER the super().setUp() >>> def tearDown ( self ): self . save_teardown_screenshot () # If test fails, or if \"--screenshot\" if self . has_exception (): # <<< Run custom code if the test failed. >>> pass else : # <<< Run custom code if the test passed. >>> pass # (Wrap unreliable tearDown() code in a try/except block.) # <<< Run custom tearDown() code BEFORE the super().tearDown() >>> super ( BaseTestCase , self ) . tearDown () def login ( self ): # <<< Placeholder. Add your code here. >>> # Reduce duplicate code in tests by having reusable methods like this. # If the UI changes, the fix can be applied in one place. pass def example_method ( self ): # <<< Placeholder. Add your code here. >>> pass class MyTests ( BaseTestCase ): def test_example ( self ): self . login () self . example_method () self . type ( \"input\" , \"Name\" ) self . click ( \"form button\" ) ... (See examples/boilerplates/base_test_case.py for more info.) 3. The sb pytest fixture (no class) The pytest framework comes with a unique system called fixtures, which replaces import statements at the top of Python files by importing libraries directly into test definitions. More than just being an import, a pytest fixture can also automatically call predefined setUp() and tearDown() methods at the beginning and end of test methods. To work, sb is added as an argument to each test method definition that needs SeleniumBase functionality. This means you no longer need import statements in your Python files to use SeleniumBase. If using other pytest fixtures in your tests, you may need to use the SeleniumBase fixture (instead of BaseCase class inheritance) for compatibility reasons. Here's an example of the sb fixture in a test that does not use Python classes: def test_sb_fixture_with_no_class ( sb ): sb . open ( \"https://google.com/ncr\" ) sb . type ( 'input[title=\"Search\"]' , 'SeleniumBase \\n ' ) sb . click ( 'a[href*=\"github.com/seleniumbase/SeleniumBase\"]' ) sb . click ( 'a[title=\"seleniumbase\"]' ) (See the top of examples/test_sb_fixture.py for the test.) 4. The sb pytest fixture (in class) The sb pytest fixture can also be used inside of a class. There is a slight change to the syntax because that means test methods must also include self in their argument definitions when test methods are defined. (The self argument represents the class object, and is used in every test method that lives inside of a class.) Once again, no import statements are needed in your Python files for this to work. Here's an example of using the sb fixture in a test method that lives inside of a Python class: class Test_SB_Fixture : def test_sb_fixture_inside_class ( self , sb ): sb . open ( \"https://google.com/ncr\" ) sb . type ( 'input[title=\"Search\"]' , 'SeleniumBase \\n ' ) sb . click ( 'a[href*=\"github.com/seleniumbase/SeleniumBase\"]' ) sb . click ( 'a[title=\"examples\"]' ) (See the bottom of examples/test_sb_fixture.py for the test.) 5. The classic Page Object Model with BaseCase inheritance With SeleniumBase, you can use Page Objects to break out code from tests, but remember, the self variable (from test methods that inherit BaseCase ) contains the driver and all other framework-specific variable definitions. Therefore, that self must be passed as an arg into any outside class method in order to call SeleniumBase methods from there. In the example below, the self variable from the test method is passed into the sb arg of the Page Object class method because the self arg of the Page Object class method is already being used for its own class. Every Python class method definition must include the self as the first arg. from seleniumbase import BaseCase class LoginPage : def login_to_swag_labs ( self , sb , username ): sb . open ( \"https://www.saucedemo.com\" ) sb . type ( \"#user-name\" , username ) sb . type ( \"#password\" , \"secret_sauce\" ) sb . click ( 'input[type=\"submit\"]' ) class MyTests ( BaseCase ): def test_swag_labs_login ( self ): LoginPage () . login_to_swag_labs ( self , \"standard_user\" ) self . assert_element ( \"div.inventory_list\" ) self . assert_element ( 'div:contains(\"Sauce Labs Backpack\")' ) (See examples/boilerplates/samples/swag_labs_test.py for the full test.) 6. The classic Page Object Model with the sb pytest fixture This is similar to the classic Page Object Model with BaseCase inheritance, except that this time we pass the sb pytest fixture from the test into the sb arg of the page object class method, (instead of passing self ). Now that you're using sb as a pytest fixture, you no longer need to import BaseCase anywhere in your code. See the example below: class LoginPage : def login_to_swag_labs ( self , sb , username ): sb . open ( \"https://www.saucedemo.com\" ) sb . type ( \"#user-name\" , username ) sb . type ( \"#password\" , \"secret_sauce\" ) sb . click ( 'input[type=\"submit\"]' ) class MyTests : def test_swag_labs_login ( self , sb ): LoginPage () . login_to_swag_labs ( sb , \"standard_user\" ) sb . assert_element ( \"div.inventory_list\" ) sb . assert_element ( 'div:contains(\"Sauce Labs Backpack\")' ) (See examples/boilerplates/samples/sb_swag_test.py for the full test.) 7. Using the request fixture to get the sb fixture (no class) The pytest request fixture can be used to retrieve other pytest fixtures from within tests, such as the sb fixture. This allows you to have more control over when fixtures get initialized because the fixture no longer needs to be loaded at the very beginning of test methods. This is done by calling request.getfixturevalue('sb') from the test. Here's an example of using the pytest request fixture to load the sb fixture in a test method that does not use Python classes: def test_request_sb_fixture ( request ): sb = request . getfixturevalue ( 'sb' ) sb . open ( \"https://seleniumbase.io/demo_page\" ) sb . assert_text ( \"SeleniumBase\" , \"#myForm h2\" ) sb . assert_element ( \"input#myTextInput\" ) sb . type ( \"#myTextarea\" , \"This is me\" ) sb . click ( \"#myButton\" ) sb . tearDown () (See the top of examples/test_request_sb_fixture.py for the test.) 8. Using the request fixture to get the sb fixture (in class) The pytest request fixture can also be used to get the sb fixture from inside a Python class. Here's an example of that: class Test_Request_Fixture : def test_request_sb_fixture_in_class ( self , request ): sb = request . getfixturevalue ( 'sb' ) sb . open ( \"https://seleniumbase.io/demo_page\" ) sb . assert_element ( \"input#myTextInput\" ) sb . type ( \"#myTextarea\" , \"Automated\" ) sb . assert_text ( \"This Text is Green\" , \"#pText\" ) sb . click ( \"#myButton\" ) sb . assert_text ( \"This Text is Purple\" , \"#pText\" ) sb . tearDown () (See the bottom of examples/test_request_sb_fixture.py for the test.) 9. Overriding the SeleniumBase browser launcher When you want to use SeleniumBase methods, but you want total freedom to control how you spin up your web browsers, this is the format you want. Although SeleniumBase gives you plenty of command-line options to change how your browsers are launched, this format gives you even more control. Here's an example of that: from selenium import webdriver from seleniumbase import BaseCase class OverrideDriverTest ( BaseCase ): def get_new_driver ( self , * args , ** kwargs ): \"\"\"This method overrides get_new_driver() from BaseCase.\"\"\" options = webdriver . ChromeOptions () options . add_experimental_option ( \"excludeSwitches\" , [ \"enable-automation\" ] ) if self . headless : options . add_argument ( \"--headless\" ) return webdriver . Chrome ( options = options ) def test_simple ( self ): self . open ( \"https://seleniumbase.io/demo_page\" ) self . assert_text ( \"Demo Page\" , \"h1\" ) (From examples/test_override_driver.py ) The above format lets you use selenium-wire to intercept & inspect requests and responses during SeleniumBase tests. Here's how the selenium-wire integration may look: from seleniumbase import BaseCase from seleniumwire import webdriver # the selenium-wire webdriver class WireTestCase ( BaseCase ): def get_new_driver ( self , * args , ** kwargs ): options = webdriver . ChromeOptions () options . add_experimental_option ( \"excludeSwitches\" , [ \"enable-automation\" ]) options . add_experimental_option ( \"useAutomationExtension\" , False ) return webdriver . Chrome ( options = options ) def test_simple ( self ): self . open ( \"https://seleniumbase.io/demo_page\" ) for request in self . driver . requests : print ( request . url ) 10. Using the SeleniumBase browser launcher without BaseCase One way of running Selenium tests with pure python (as opposed to using pytest or nosetests ) is by using this format, which bypasses BaseCase methods while still giving you browser_launcher with its powerful webdriver management software. SeleniumBase includes helper files such as page_actions.py , which may help you get around some of the limitations of bypassing BaseCase . Here's an example: from seleniumbase import get_driver from seleniumbase import js_utils from seleniumbase import page_actions driver = get_driver ( \"chrome\" , headless = False ) try : driver . get ( \"https://seleniumbase.io/apps/calculator\" ) page_actions . wait_for_element_visible ( driver , \"4\" , \"id\" ) . click () page_actions . wait_for_element_visible ( driver , \"2\" , \"id\" ) . click () page_actions . wait_for_text_visible ( driver , \"42\" , \"output\" , \"id\" ) js_utils . highlight_with_js ( driver , \"#output\" , 6 , \"\" ) finally : driver . quit () (From examples/raw_browser_launcher.py ) The above format can be used as a drop-in replacement for virtually every Python/selenium framework, as it uses the raw driver for handling commands. The get_driver() method simplifies the work of managing drivers and spinning them up with optimal settings. Note that now you'll need to manage the spin-up and spin-down of browsers in tests, which was done automatically in tests that inherit BaseCase (or ones that use the sb pytest fixture). You'll also need to use extra code (as shown above) to make sure you don't leave any browsers hanging after your tests complete. 11. SeleniumBase in Chinese This format is similar to the English version with BaseCase inheritance, but there's a different import statement, and method names have been translated into Chinese. Here's an example of that: from seleniumbase.translate.chinese import \u7852\u6d4b\u8bd5\u7528\u4f8b class \u6211\u7684\u6d4b\u8bd5\u7c7b ( \u7852\u6d4b\u8bd5\u7528\u4f8b ): def test_\u4f8b\u5b501 ( self ): self . \u5f00\u542f ( \"https://zh.wikipedia.org/wiki/\" ) self . \u65ad\u8a00\u6807\u9898 ( \"\u7ef4\u57fa\u767e\u79d1\uff0c\u81ea\u7531\u7684\u767e\u79d1\u5168\u4e66\" ) self . \u65ad\u8a00\u5143\u7d20 ( 'a[title=\"\u9996\u9875\"]' ) self . \u65ad\u8a00\u6587\u672c ( \"\u65b0\u95fb\u52a8\u6001\" , \"span#\u65b0\u95fb\u52a8\u6001\" ) self . \u8f93\u5165\u6587\u672c ( \"#searchInput\" , \"\u821e\u9f8d\" ) self . \u5355\u51fb ( \"#searchButton\" ) self . \u65ad\u8a00\u6587\u672c ( \"\u821e\u9f8d\" , \"#firstHeading\" ) self . \u65ad\u8a00\u5143\u7d20 ( 'img[src*=\"Chinese_draak.jpg\"]' ) self . \u8f93\u5165\u6587\u672c ( \"#searchInput\" , \"\u9ebb\u5a46\u8c46\u8150\" ) self . \u5355\u51fb ( \"#searchButton\" ) self . \u65ad\u8a00\u6587\u672c ( \"\u9ebb\u5a46\u8c46\u8150\" , \"#firstHeading\" ) self . \u65ad\u8a00\u5143\u7d20 ( 'div.thumb div:contains(\"\u4e00\u5bb6\u4e2d\u9910\u9928\u7684\u9ebb\u5a46\u8c46\u8150\")' ) self . \u8f93\u5165\u6587\u672c ( \"#searchInput\" , \"\u7cbe\u6b66\u82f1\u96c4\" ) self . \u5355\u51fb ( \"#searchButton\" ) self . \u65ad\u8a00\u5143\u7d20 ( 'img[src*=\"Fist_of_legend.jpg\"]' ) self . \u65ad\u8a00\u6587\u672c ( \"\u674e\u8fde\u6770\" , 'li a[title=\"\u674e\u8fde\u6770\"]' ) (See examples/translations/chinese_test_1.py for the Chinese test.) 12. SeleniumBase in Dutch This format is similar to the English version with BaseCase inheritance, but there's a different import statement, and method names have been translated into Dutch. Here's an example of that: from seleniumbase.translate.dutch import Testgeval class MijnTestklasse ( Testgeval ): def test_voorbeeld_1 ( self ): self . openen ( \"https://nl.wikipedia.org/wiki/Hoofdpagina\" ) self . controleren_element ( 'a[title*=\"hoofdpagina gaan\"]' ) self . controleren_tekst ( \"Welkom op Wikipedia\" , \"td.hp-welkom\" ) self . typ ( \"#searchInput\" , \"Stroopwafel\" ) self . klik ( \"#searchButton\" ) self . controleren_tekst ( \"Stroopwafel\" , \"#firstHeading\" ) self . controleren_element ( 'img[src*=\"Stroopwafels\"]' ) self . typ ( \"#searchInput\" , \"Rijksmuseum Amsterdam\" ) self . klik ( \"#searchButton\" ) self . controleren_tekst ( \"Rijksmuseum\" , \"#firstHeading\" ) self . controleren_element ( 'img[src*=\"Rijksmuseum\"]' ) self . terug () self . controleren_ware ( \"Stroopwafel\" in self . huidige_url_ophalen ()) self . vooruit () self . controleren_ware ( \"Rijksmuseum\" in self . huidige_url_ophalen ()) (See examples/translations/dutch_test_1.py for the Dutch test.) 13. SeleniumBase in French This format is similar to the English version with BaseCase inheritance, but there's a different import statement, and method names have been translated into French. Here's an example of that: from seleniumbase.translate.french import CasDeBase class MaClasseDeTest ( CasDeBase ): def test_exemple_1 ( self ): self . ouvrir ( \"https://fr.wikipedia.org/wiki/\" ) self . v\u00e9rifier_texte ( \"Wikip\u00e9dia\" ) self . v\u00e9rifier_\u00e9l\u00e9ment ( '[alt=\"Wikip\u00e9dia\"]' ) self . js_taper ( \"#searchform input\" , \"Cr\u00e8me br\u00fbl\u00e9e\" ) self . cliquer ( \"#searchform button\" ) self . v\u00e9rifier_texte ( \"Cr\u00e8me br\u00fbl\u00e9e\" , \"#firstHeading\" ) self . v\u00e9rifier_\u00e9l\u00e9ment ( 'img[alt*=\"Cr\u00e8me br\u00fbl\u00e9e\"]' ) self . js_taper ( \"#searchform input\" , \"Jardin des Tuileries\" ) self . cliquer ( \"#searchform button\" ) self . v\u00e9rifier_texte ( \"Jardin des Tuileries\" , \"#firstHeading\" ) self . v\u00e9rifier_\u00e9l\u00e9ment ( 'img[alt*=\"Jardin des Tuileries\"]' ) self . retour () self . v\u00e9rifier_vrai ( \"br\u00fbl\u00e9e\" in self . obtenir_url_actuelle ()) self . en_avant () self . v\u00e9rifier_vrai ( \"Jardin\" in self . obtenir_url_actuelle ()) (See examples/translations/french_test_1.py for the French test.) 14. SeleniumBase in Italian This format is similar to the English version with BaseCase inheritance, but there's a different import statement, and method names have been translated into Italian. Here's an example of that: from seleniumbase.translate.italian import CasoDiProva class MiaClasseDiTest ( CasoDiProva ): def test_esempio_1 ( self ): self . apri ( \"https://it.wikipedia.org/wiki/\" ) self . verificare_testo ( \"Wikipedia\" ) self . verificare_elemento ( '[title=\"Lingua italiana\"]' ) self . digitare ( \"#searchInput\" , \"Pizza\" ) self . fare_clic ( \"#searchButton\" ) self . verificare_testo ( \"Pizza\" , \"#firstHeading\" ) self . verificare_elemento ( 'img[alt*=\"pizza\"]' ) self . digitare ( \"#searchInput\" , \"Colosseo\" ) self . fare_clic ( \"#searchButton\" ) self . verificare_testo ( \"Colosseo\" , \"#firstHeading\" ) self . verificare_elemento ( 'img[alt*=\"Colosse\"]' ) self . indietro () self . verificare_vero ( \"Pizza\" in self . ottenere_url_corrente ()) self . avanti () self . verificare_vero ( \"Colosseo\" in self . ottenere_url_corrente ()) (See examples/translations/italian_test_1.py for the Italian test.) 15. SeleniumBase in Japanese This format is similar to the English version with BaseCase inheritance, but there's a different import statement, and method names have been translated into Japanese. Here's an example of that: from seleniumbase.translate.japanese import \u30bb\u30ec\u30cb\u30a6\u30e0\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9 class \u79c1\u306e\u30c6\u30b9\u30c8\u30af\u30e9\u30b9 ( \u30bb\u30ec\u30cb\u30a6\u30e0\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9 ): def test_\u4f8b1 ( self ): self . \u3092\u958b\u304f ( \"https://ja.wikipedia.org/wiki/\" ) self . \u30c6\u30ad\u30b9\u30c8\u3092\u78ba\u8a8d\u3059\u308b ( \"\u30a6\u30a3\u30ad\u30da\u30c7\u30a3\u30a2\" ) self . \u8981\u7d20\u3092\u78ba\u8a8d\u3059\u308b ( '[title*=\"\u30a6\u30a3\u30ad\u30da\u30c7\u30a3\u30a2\u3078\u3088\u3046\u3053\u305d\"]' ) self . JS\u5165\u529b ( 'input[name=\"search\"]' , \"\u30a2\u30cb\u30e1\" ) self . \u30af\u30ea\u30c3\u30af\u3057\u3066 ( \"#searchform button\" ) self . \u30c6\u30ad\u30b9\u30c8\u3092\u78ba\u8a8d\u3059\u308b ( \"\u30a2\u30cb\u30e1\" , \"#firstHeading\" ) self . JS\u5165\u529b ( 'input[name=\"search\"]' , \"\u5bff\u53f8\" ) self . \u30af\u30ea\u30c3\u30af\u3057\u3066 ( \"#searchform button\" ) self . \u30c6\u30ad\u30b9\u30c8\u3092\u78ba\u8a8d\u3059\u308b ( \"\u5bff\u53f8\" , \"#firstHeading\" ) self . \u8981\u7d20\u3092\u78ba\u8a8d\u3059\u308b ( 'img[alt=\"\u63e1\u308a\u5bff\u53f8\"]' ) self . JS\u5165\u529b ( \"#searchInput\" , \"\u30ec\u30b4\u30e9\u30f3\u30c9\u30fb\u30b8\u30e3\u30d1\u30f3\" ) self . \u30af\u30ea\u30c3\u30af\u3057\u3066 ( \"#searchform button\" ) self . \u8981\u7d20\u3092\u78ba\u8a8d\u3059\u308b ( 'img[alt*=\"LEGOLAND JAPAN\"]' ) self . \u30ea\u30f3\u30af\u30c6\u30ad\u30b9\u30c8\u3092\u78ba\u8a8d\u3059\u308b ( \"\u540d\u53e4\u5c4b\u57ce\" ) self . \u30ea\u30f3\u30af\u30c6\u30ad\u30b9\u30c8\u3092\u30af\u30ea\u30c3\u30af\u3057\u307e\u3059 ( \"\u30c6\u30fc\u30de\u30d1\u30fc\u30af\" ) self . \u30c6\u30ad\u30b9\u30c8\u3092\u78ba\u8a8d\u3059\u308b ( \"\u30c6\u30fc\u30de\u30d1\u30fc\u30af\" , \"#firstHeading\" ) (See examples/translations/japanese_test_1.py for the Japanese test.) 16. SeleniumBase in Korean This format is similar to the English version with BaseCase inheritance, but there's a different import statement, and method names have been translated into Korean. Here's an example of that: from seleniumbase.translate.korean import \uc140\ub808\ub284_\ud14c\uc2a4\ud2b8_\ucf00\uc774\uc2a4 class \ud14c\uc2a4\ud2b8_\ud074\ub798\uc2a4 ( \uc140\ub808\ub284_\ud14c\uc2a4\ud2b8_\ucf00\uc774\uc2a4 ): def test_\uc2e4\uc2dc\uc608_1 ( self ): self . \uc5f4\uae30 ( \"https://ko.wikipedia.org/wiki/\" ) self . \ud14d\uc2a4\ud2b8_\ud655\uc778 ( \"\uc704\ud0a4\ubc31\uacfc\" ) self . \uc694\uc18c_\ud655\uc778 ( '[title=\"\uc704\ud0a4\ubc31\uacfc:\uc18c\uac1c\"]' ) self . JS_\uc785\ub825 ( \"#searchform input\" , \"\uae40\uce58\" ) self . \ud074\ub9ad ( \"#searchform button\" ) self . \ud14d\uc2a4\ud2b8_\ud655\uc778 ( \"\uae40\uce58\" , \"#firstHeading\" ) self . \uc694\uc18c_\ud655\uc778 ( 'img[alt=\"Various kimchi.jpg\"]' ) self . \ub9c1\ud06c_\ud14d\uc2a4\ud2b8_\ud655\uc778 ( \"\ud55c\uad6d \uc694\ub9ac\" ) self . JS_\uc785\ub825 ( \"#searchform input\" , \"\ube44\ube54\ubc25\" ) self . \ud074\ub9ad ( \"#searchform button\" ) self . \ud14d\uc2a4\ud2b8_\ud655\uc778 ( \"\ube44\ube54\ubc25\" , \"#firstHeading\" ) self . \uc694\uc18c_\ud655\uc778 ( 'img[alt=\"Dolsot-bibimbap.jpg\"]' ) self . \ub9c1\ud06c_\ud14d\uc2a4\ud2b8\ub97c_\ud074\ub9ad\ud569\ub2c8\ub2e4 ( \"\ub3cc\uc1a5\ube44\ube54\ubc25\" ) self . \ud14d\uc2a4\ud2b8_\ud655\uc778 ( \"\ub3cc\uc1a5\ube44\ube54\ubc25\" , \"#firstHeading\" ) (See examples/translations/korean_test_1.py for the Korean test.) 17. SeleniumBase in Portuguese This format is similar to the English version with BaseCase inheritance, but there's a different import statement, and method names have been translated into Portuguese. Here's an example of that: from seleniumbase.translate.portuguese import CasoDeTeste class MinhaClasseDeTeste ( CasoDeTeste ): def test_exemplo_1 ( self ): self . abrir ( \"https://pt.wikipedia.org/wiki/\" ) self . verificar_texto ( \"Wikip\u00e9dia\" ) self . verificar_elemento ( '[title=\"L\u00edngua portuguesa\"]' ) self . digitar ( \"#searchform input\" , \"Jo\u00e3o Pessoa\" ) self . clique ( \"#searchform button\" ) self . verificar_texto ( \"Jo\u00e3o Pessoa\" , \"#firstHeading\" ) self . verificar_elemento ( 'img[alt*=\"Jo\u00e3o Pessoa\"]' ) self . digitar ( \"#searchform input\" , \"Florian\u00f3polis\" ) self . clique ( \"#searchform button\" ) self . verificar_texto ( \"Florian\u00f3polis\" , \"h1#firstHeading\" ) self . verificar_elemento ( 'td:contains(\"Avenida Beira-Mar\")' ) self . voltar () self . verificar_verdade ( \"Jo\u00e3o\" in self . obter_url_atual ()) self . digitar ( \"#searchform input\" , \"Teatro Amazonas\" ) self . clique ( \"#searchform button\" ) self . verificar_texto ( \"Teatro Amazonas\" , \"#firstHeading\" ) self . verificar_texto_do_link ( \"Festival Amazonas de \u00d3pera\" ) (See examples/translations/portuguese_test_1.py for the Portuguese test.) 18. SeleniumBase in Russian This format is similar to the English version with BaseCase inheritance, but there's a different import statement, and method names have been translated into Russian. Here's an example of that: from seleniumbase.translate.russian import \u0422\u0435\u0441\u0442\u041d\u0430\u0421\u0435\u043b\u0435\u043d class \u041c\u043e\u0439\u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0439\u041a\u043b\u0430\u0441\u0441 ( \u0422\u0435\u0441\u0442\u041d\u0430\u0421\u0435\u043b\u0435\u043d ): def test_\u043f\u0440\u0438\u043c\u0435\u0440_1 ( self ): self . \u043e\u0442\u043a\u0440\u044b\u0442\u044c ( \"https://ru.wikipedia.org/wiki/\" ) self . \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u044c_\u044d\u043b\u0435\u043c\u0435\u043d\u0442 ( '[title=\"\u0420\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a\"]' ) self . \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u044c_\u0442\u0435\u043a\u0441\u0442 ( \"\u0412\u0438\u043a\u0438\u043f\u0435\u0434\u0438\u044f\" , \"h2.main-wikimedia-header\" ) self . \u0432\u0432\u0435\u0434\u0438\u0442\u0435 ( \"#searchInput\" , \"\u041c\u0413\u0423\" ) self . \u043d\u0430\u0436\u043c\u0438\u0442\u0435 ( \"#searchButton\" ) self . \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u044c_\u0442\u0435\u043a\u0441\u0442 ( \"\u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442\" , \"#firstHeading\" ) self . \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u044c_\u044d\u043b\u0435\u043c\u0435\u043d\u0442 ( 'img[alt*=\"\u0413\u043b\u0430\u0432\u043d\u043e\u0435 \u0437\u0434\u0430\u043d\u0438\u0435 \u041c\u0413\u0423\"]' ) self . \u0432\u0432\u0435\u0434\u0438\u0442\u0435 ( \"#searchInput\" , \"\u043f\u0440\u0438\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0428\u0443\u0440\u0438\u043a\u0430\" ) self . \u043d\u0430\u0436\u043c\u0438\u0442\u0435 ( \"#searchButton\" ) self . \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u044c_\u0442\u0435\u043a\u0441\u0442 ( \"\u041e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \u00ab\u042b\u00bb \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u043f\u0440\u0438\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0428\u0443\u0440\u0438\u043a\u0430\" ) self . \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u044c_\u044d\u043b\u0435\u043c\u0435\u043d\u0442 ( 'img[alt=\"\u041f\u043e\u0441\u0442\u0435\u0440 \u0444\u0438\u043b\u044c\u043c\u0430\"]' ) self . \u043d\u0430\u0437\u0430\u0434 () self . \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u044c_\u043f\u0440\u0430\u0432\u0434\u0443 ( \"\u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442\" in self . \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c_\u0442\u0435\u043a\u0443\u0449\u0438\u0439_URL ()) self . \u0432\u043f\u0435\u0440\u0435\u0434 () self . \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u044c_\u043f\u0440\u0430\u0432\u0434\u0443 ( \"\u0428\u0443\u0440\u0438\u043a\u0430\" in self . \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c_\u0442\u0435\u043a\u0443\u0449\u0438\u0439_URL ()) (See examples/translations/russian_test_1.py for the Russian test.) 19. SeleniumBase in Spanish This format is similar to the English version with BaseCase inheritance, but there's a different import statement, and method names have been translated into Spanish. Here's an example of that: from seleniumbase.translate.spanish import CasoDePrueba class MiClaseDePrueba ( CasoDePrueba ): def test_ejemplo_1 ( self ): self . abrir ( \"https://es.wikipedia.org/wiki/\" ) self . verificar_texto ( \"Wikipedia\" ) self . verificar_elemento ( '[title*=\"la p\u00e1gina principal\"]' ) self . escriba ( \"#searchInput\" , \"Parc d'Atraccions Tibidabo\" ) self . haga_clic ( \"#searchButton\" ) self . verificar_texto ( \"Tibidabo\" , \"#firstHeading\" ) self . verificar_elemento ( 'img[alt*=\"Tibidabo\"]' ) self . escriba ( \"#searchInput\" , \"Palma de Mallorca\" ) self . haga_clic ( \"#searchButton\" ) self . verificar_texto ( \"Palma de Mallorca\" , \"#firstHeading\" ) self . verificar_elemento ( 'img[alt*=\"Palma\"]' ) self . volver () self . verificar_verdad ( \"Tibidabo\" in self . obtener_url_actual ()) self . adelante () self . verificar_verdad ( \"Mallorca\" in self . obtener_url_actual ()) (See examples/translations/spanish_test_1.py for the Spanish test.) 20. Behave-BDD Gherkin tests that use SeleniumBase With Behave's BDD Gherkin format , you can use natural language to write tests that work with SeleniumBase methods. Behave tests are run by calling behave on the command-line. This requires some special files in a specific directory structure. Here's an example of that structure: features/ \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 behave.ini \u251c\u2500\u2500 environment.py \u251c\u2500\u2500 feature_file.feature \u2514\u2500\u2500 steps/ \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 imported.py \u2514\u2500\u2500 step_file.py A *.feature file might look like this: Feature: SeleniumBase scenarios for the RealWorld App Scenario: Verify RealWorld App (log in / sign out) Given Open \" seleniumbase.io/realworld/login \" And Clear Session Storage When Type \" demo_user \" into \" #username \" And Type \" secret_pass \" into \" #password \" And Do MFA \" GAXG2MTEOR3DMMDG \" into \" #totpcode \" Then Assert exact text \" Welcome! \" in \" h1 \" And Highlight \" img#image1 \" And Click 'a:contains(\" This Page \")' And Save screenshot to logs When Click link \" Sign out \" Then Assert element 'a:contains(\" Sign in \")' And Assert text \" You have been signed out! \" (From examples/behave_bdd/features/realworld.feature ) You'll need the environment.py file for tests to work. Here it is: from seleniumbase import BaseCase from seleniumbase.behave import behave_sb behave_sb . set_base_class ( BaseCase ) # Accepts a BaseCase subclass from seleniumbase.behave.behave_sb import before_all # noqa from seleniumbase.behave.behave_sb import before_feature # noqa from seleniumbase.behave.behave_sb import before_scenario # noqa from seleniumbase.behave.behave_sb import before_step # noqa from seleniumbase.behave.behave_sb import after_step # noqa from seleniumbase.behave.behave_sb import after_scenario # noqa from seleniumbase.behave.behave_sb import after_feature # noqa from seleniumbase.behave.behave_sb import after_all # noqa (From examples/behave_bdd/features/environment.py ) Inside that file, you can use BaseCase (or a subclass) for the inherited class. For your behave tests to have access to SeleniumBase Behave steps, you can create an imported.py file with the following line: from seleniumbase.behave import steps # noqa That will allow you to use lines like this in your *.feature files: Feature: SeleniumBase scenarios for the RealWorld App Scenario: Verify RealWorld App (log in / sign out) Given Open \" seleniumbase.io/realworld/login \" And Clear Session Storage When Type \" demo_user \" into \" #username \" And Type \" secret_pass \" into \" #password \" And Do MFA \" GAXG2MTEOR3DMMDG \" into \" #totpcode \" Then Assert exact text \" Welcome! \" in \" h1 \" And Highlight \" img#image1 \" And Click 'a:contains(\" This Page \")' And Save screenshot to logs You can also create your own step files (eg. step_file.py ): from behave import step @step ( \"Open the Swag Labs Login Page\" ) def go_to_swag_labs ( context ): sb = context . sb sb . open ( \"https://www.saucedemo.com\" ) sb . clear_local_storage () @step ( \"Login to Swag Labs with {user} \" ) def login_to_swag_labs ( context , user ): sb = context . sb sb . type ( \"#user-name\" , user ) sb . type ( \"#password\" , \"secret_sauce \\n \" ) (For more information, see the SeleniumBase Behave BDD ReadMe .)", "title": "Syntax Formats"}, {"location": "help_docs/syntax_formats/#the-20-syntax-formats", "text": "SeleniumBase supports 20 different syntax formats ( design patterns ) for structuring tests. ( The first 6 are the most common. )", "title": " The 20 Syntax Formats"}, {"location": "help_docs/thank_you/", "text": "Thank you for flying with SeleniumBase! \u00b6 Follow us on social media:", "title": "Thank You"}, {"location": "help_docs/thank_you/#thank-you-for-flying-with-seleniumbase", "text": "Follow us on social media:", "title": "Thank you for flying with SeleniumBase!"}, {"location": "help_docs/translations/", "text": "\ud83c\udf0f Translated Tests \ud83c\ude3a \u00b6 SeleniumBase supports the following 10 languages: English , Chinese , Dutch , French , Italian , Japanese , Korean , Portuguese , Russian , and Spanish . (Examples can be found in SeleniumBase/examples/translations ) Multi-language tests run with pytest like other tests. Test methods have a one-to-one mapping to supported languages. Here's an example of a translated test: # Chinese Translation from seleniumbase.translate.chinese import \u7852\u6d4b\u8bd5\u7528\u4f8b class \u6211\u7684\u6d4b\u8bd5\u7c7b ( \u7852\u6d4b\u8bd5\u7528\u4f8b ): def test_\u4f8b\u5b501 ( self ): self . \u5f00\u542f ( \"https://zh.wikipedia.org/wiki/\" ) self . \u65ad\u8a00\u6807\u9898 ( \"\u7ef4\u57fa\u767e\u79d1\uff0c\u81ea\u7531\u7684\u767e\u79d1\u5168\u4e66\" ) self . \u65ad\u8a00\u5143\u7d20 ( 'a[title=\"\u9996\u9875\"]' ) self . \u65ad\u8a00\u6587\u672c ( \"\u65b0\u95fb\u52a8\u6001\" , \"span#\u65b0\u95fb\u52a8\u6001\" ) self . \u8f93\u5165\u6587\u672c ( \"#searchInput\" , \"\u821e\u9f8d\" ) self . \u5355\u51fb ( \"#searchButton\" ) self . \u65ad\u8a00\u6587\u672c ( \"\u821e\u9f8d\" , \"#firstHeading\" ) Here's another example: # Japanese Translation from seleniumbase.translate.japanese import \u30bb\u30ec\u30cb\u30a6\u30e0\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9 class \u79c1\u306e\u30c6\u30b9\u30c8\u30af\u30e9\u30b9 ( \u30bb\u30ec\u30cb\u30a6\u30e0\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9 ): def test_\u4f8b1 ( self ): self . \u3092\u958b\u304f ( \"https://ja.wikipedia.org/wiki/\" ) self . \u30c6\u30ad\u30b9\u30c8\u3092\u78ba\u8a8d\u3059\u308b ( \"\u30a6\u30a3\u30ad\u30da\u30c7\u30a3\u30a2\" ) self . \u8981\u7d20\u3092\u78ba\u8a8d\u3059\u308b ( '[title=\"\u30e1\u30a4\u30f3\u30da\u30fc\u30b8\u306b\u79fb\u52d5\u3059\u308b\"]' ) self . \u5165\u529b ( \"#searchInput\" , \"\u30a2\u30cb\u30e1\" ) self . \u30af\u30ea\u30c3\u30af\u3057\u3066 ( \"#searchButton\" ) self . \u30c6\u30ad\u30b9\u30c8\u3092\u78ba\u8a8d\u3059\u308b ( \"\u30a2\u30cb\u30e1\" , \"#firstHeading\" ) self . \u5165\u529b ( \"#searchInput\" , \"\u5bff\u53f8\" ) Translation API \ud83c\ude3a You can use SeleniumBase to selectively translate the method names of any test from one language to another with the console scripts interface. Additionally, the import line at the top of the Python file will change to import the new BaseCase . Example: BaseCase becomes CasoDeTeste when a test is translated into Portuguese. seleniumbase translate * Usage: seleniumbase translate [ SB_FILE.py ] [ LANGUAGE ] [ ACTION ] * Languages: `` --en `` / `` --English `` | `` --zh `` / `` --Chinese `` `` --nl `` / `` --Dutch `` | `` --fr `` / `` --French `` `` --it `` / `` --Italian `` | `` --ja `` / `` --Japanese `` `` --ko `` / `` --Korean `` | `` --pt `` / `` --Portuguese `` `` --ru `` / `` --Russian `` | `` --es `` / `` --Spanish `` * Actions: `` -p `` / `` --print `` ( Print translation output to the screen ) `` -o `` / `` --overwrite `` ( Overwrite the file being translated ) `` -c `` / `` --copy `` ( Copy the translation to a new `` .py `` file ) * Options: `` -n `` ( include line Numbers when using the Print action ) * Examples: Translate test_1.py into Chinese and only print the output: >>> seleniumbase translate test_1.py --zh -p Translate test_2.py into Portuguese and overwrite the file: >>> seleniumbase translate test_2.py --pt -o Translate test_3.py into Dutch and make a copy of the file: >>> seleniumbase translate test_3.py --nl -c * Output: Translates a SeleniumBase Python file into the language specified. Method calls and `` import `` lines get swapped. Both a language and an action must be specified. The `` -p `` action can be paired with one other action. When running with `` -c `` ( or `` --copy `` ) the new file name will be the original name appended with an underscore plus the 2 -letter language code of the new language. ( Example: Translating `` test_1.py `` into Japanese with `` -c `` will create a new file called `` test_1_ja.py `` . )", "title": "Translations"}, {"location": "help_docs/translations/#translated-tests", "text": "SeleniumBase supports the following 10 languages: English , Chinese , Dutch , French , Italian , Japanese , Korean , Portuguese , Russian , and Spanish . (Examples can be found in SeleniumBase/examples/translations ) Multi-language tests run with pytest like other tests. Test methods have a one-to-one mapping to supported languages. Here's an example of a translated test: # Chinese Translation from seleniumbase.translate.chinese import \u7852\u6d4b\u8bd5\u7528\u4f8b class \u6211\u7684\u6d4b\u8bd5\u7c7b ( \u7852\u6d4b\u8bd5\u7528\u4f8b ): def test_\u4f8b\u5b501 ( self ): self . \u5f00\u542f ( \"https://zh.wikipedia.org/wiki/\" ) self . \u65ad\u8a00\u6807\u9898 ( \"\u7ef4\u57fa\u767e\u79d1\uff0c\u81ea\u7531\u7684\u767e\u79d1\u5168\u4e66\" ) self . \u65ad\u8a00\u5143\u7d20 ( 'a[title=\"\u9996\u9875\"]' ) self . \u65ad\u8a00\u6587\u672c ( \"\u65b0\u95fb\u52a8\u6001\" , \"span#\u65b0\u95fb\u52a8\u6001\" ) self . \u8f93\u5165\u6587\u672c ( \"#searchInput\" , \"\u821e\u9f8d\" ) self . \u5355\u51fb ( \"#searchButton\" ) self . \u65ad\u8a00\u6587\u672c ( \"\u821e\u9f8d\" , \"#firstHeading\" ) Here's another example: # Japanese Translation from seleniumbase.translate.japanese import \u30bb\u30ec\u30cb\u30a6\u30e0\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9 class \u79c1\u306e\u30c6\u30b9\u30c8\u30af\u30e9\u30b9 ( \u30bb\u30ec\u30cb\u30a6\u30e0\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9 ): def test_\u4f8b1 ( self ): self . \u3092\u958b\u304f ( \"https://ja.wikipedia.org/wiki/\" ) self . \u30c6\u30ad\u30b9\u30c8\u3092\u78ba\u8a8d\u3059\u308b ( \"\u30a6\u30a3\u30ad\u30da\u30c7\u30a3\u30a2\" ) self . \u8981\u7d20\u3092\u78ba\u8a8d\u3059\u308b ( '[title=\"\u30e1\u30a4\u30f3\u30da\u30fc\u30b8\u306b\u79fb\u52d5\u3059\u308b\"]' ) self . \u5165\u529b ( \"#searchInput\" , \"\u30a2\u30cb\u30e1\" ) self . \u30af\u30ea\u30c3\u30af\u3057\u3066 ( \"#searchButton\" ) self . \u30c6\u30ad\u30b9\u30c8\u3092\u78ba\u8a8d\u3059\u308b ( \"\u30a2\u30cb\u30e1\" , \"#firstHeading\" ) self . \u5165\u529b ( \"#searchInput\" , \"\u5bff\u53f8\" )", "title": " \ud83c\udf0f Translated Tests \ud83c\ude3a"}, {"location": "help_docs/useful_grep_commands/", "text": "Useful grep commands \u00b6 There are several useful grep commands for helping you find and/or replace text in multiple files. Examples: List all files containing self.get_new_driver( , ignoring \".pyc\" files, from the current directory \u00b6 grep -rl \"self.get_new_driver(\" * --exclude=\\*.pyc OR grep -rl * -e \"self.get_new_driver(\" --exclude=\\*.pyc To only search .py files, use --include=\\*.py : grep -rl \"self.get_new_driver(\" * --include=\\*.py Replace all occurrences of \"foo_abc\" with \"bar_xyz\" on Linux, for Python files from the current directory \u00b6 sed -i 's/foo_abc/bar_xyz/g' *.py Replace all occurrences of \"foo_abc\" with \"bar_xyz\" on macOS, for Python files from the current directory \u00b6 sed -i '' 's/foo_abc/bar_xyz/g' *.py Find all chromedriver processes (this combines ps with grep ): \u00b6 ps -ef |grep chromedriver References \u00b6 https://stackoverflow.com/questions/16956810/how-do-i-find-all-files-containing-specific-text-on-linux https://stackoverflow.com/questions/11392478/how-to-replace-a-string-in-multiple-files-in-linux-command-line/20721292#20721292", "title": "Useful grep commands"}, {"location": "help_docs/useful_grep_commands/#useful-grep-commands", "text": "There are several useful grep commands for helping you find and/or replace text in multiple files. Examples:", "title": "Useful grep commands"}, {"location": "help_docs/useful_grep_commands/#list-all-files-containing-selfget_new_driver-ignoring-pyc-files-from-the-current-directory", "text": "grep -rl \"self.get_new_driver(\" * --exclude=\\*.pyc OR grep -rl * -e \"self.get_new_driver(\" --exclude=\\*.pyc To only search .py files, use --include=\\*.py : grep -rl \"self.get_new_driver(\" * --include=\\*.py", "title": "List all files containing self.get_new_driver(, ignoring \".pyc\" files, from the current directory"}, {"location": "help_docs/useful_grep_commands/#replace-all-occurrences-of-foo_abc-with-bar_xyz-on-linux-for-python-files-from-the-current-directory", "text": "sed -i 's/foo_abc/bar_xyz/g' *.py", "title": "Replace all occurrences of \"foo_abc\" with \"bar_xyz\" on Linux, for Python files from the current directory"}, {"location": "help_docs/useful_grep_commands/#replace-all-occurrences-of-foo_abc-with-bar_xyz-on-macos-for-python-files-from-the-current-directory", "text": "sed -i '' 's/foo_abc/bar_xyz/g' *.py", "title": "Replace all occurrences of \"foo_abc\" with \"bar_xyz\" on macOS, for Python files from the current directory"}, {"location": "help_docs/useful_grep_commands/#find-all-chromedriver-processes-this-combines-ps-with-grep", "text": "ps -ef |grep chromedriver", "title": "Find all chromedriver processes (this combines ps with grep):"}, {"location": "help_docs/useful_grep_commands/#references", "text": "https://stackoverflow.com/questions/16956810/how-do-i-find-all-files-containing-specific-text-on-linux https://stackoverflow.com/questions/11392478/how-to-replace-a-string-in-multiple-files-in-linux-command-line/20721292#20721292", "title": "References"}, {"location": "help_docs/using_safari_driver/", "text": "Using Safari's WebDriver for running browser tests on macOS \u00b6 (NOTE: Safari's WebDriver requires macOS 10.13 \"High Sierra\" or later.) You can find the official Apple documentation regarding \"Testing with WebDriver in Safari\" on the following page: https://developer.apple.com/documentation/webkit/testing_with_webdriver_in_safari Run safaridriver --enable once in a terminal to enable Safari's WebDriver. (If you\u2019re upgrading from a previous macOS release, you may need to prefix the command with sudo .) Now you can use --browser=safari to run your SeleniumBase tests on Safari.", "title": "Using Safari Driver"}, {"location": "help_docs/using_safari_driver/#using-safaris-webdriver-for-running-browser-tests-on-macos", "text": "(NOTE: Safari's WebDriver requires macOS 10.13 \"High Sierra\" or later.) You can find the official Apple documentation regarding \"Testing with WebDriver in Safari\" on the following page: https://developer.apple.com/documentation/webkit/testing_with_webdriver_in_safari Run safaridriver --enable once in a terminal to enable Safari's WebDriver. (If you\u2019re upgrading from a previous macOS release, you may need to prefix the command with sudo .) Now you can use --browser=safari to run your SeleniumBase tests on Safari.", "title": "Using Safari's WebDriver for running browser tests on macOS"}, {"location": "help_docs/verify_webdriver/", "text": "Verifying that web drivers are installed \u00b6 On newer versions of SeleniumBase, the driver is automatically downloaded to the seleniumbase/drivers folder as needed, and does not need to be on the System Path when running tests. Drivers can be manually downloaded to the seleniumbase/drivers folder with commands such as: sbase get chromedriver sbase get chromedriver latest sbase get geckodriver sbase get edgedriver If you want to check that you have the correct driver installed on your System PATH (which is no longer necessary unless using the Selenium Grid), then continue reading below: This assumes you've already downloaded a driver to your System PATH with a command such as: sbase get chromedriver --path (The above --path addition is for Linux/Mac only, which uses /usr/local/bin/ . The \"Path\" is different on Windows, and you'll need to manually copy the driver to your System Path, which is defined in the Control Panel's System Environment Variables.) You can verify that the correct drivers exist on your System Path by checking inside a Python command prompt. Verifying ChromeDriver \u00b6 python >>> from seleniumbase import get_driver >>> driver = get_driver ( \"chrome\" , headless = False ) >>> driver . get ( \"https://www.google.com/chrome\" ) >>> driver . quit () >>> exit () Verifying Geckodriver (Firefox WebDriver) \u00b6 python >>> from seleniumbase import get_driver >>> driver = get_driver ( \"firefox\" , headless = False ) >>> driver . get ( \"https://www.mozilla.org/firefox\" ) >>> driver . quit () >>> exit () Verifying WebDriver for Safari \u00b6 python >>> from seleniumbase import get_driver >>> driver = get_driver ( \"safari\" , headless = False ) >>> driver . get ( \"https://www.apple.com/safari\" ) >>> driver . quit () >>> exit ()", "title": "Verifying WebDriver"}, {"location": "help_docs/verify_webdriver/#verifying-that-web-drivers-are-installed", "text": "On newer versions of SeleniumBase, the driver is automatically downloaded to the seleniumbase/drivers folder as needed, and does not need to be on the System Path when running tests. Drivers can be manually downloaded to the seleniumbase/drivers folder with commands such as: sbase get chromedriver sbase get chromedriver latest sbase get geckodriver sbase get edgedriver If you want to check that you have the correct driver installed on your System PATH (which is no longer necessary unless using the Selenium Grid), then continue reading below: This assumes you've already downloaded a driver to your System PATH with a command such as: sbase get chromedriver --path (The above --path addition is for Linux/Mac only, which uses /usr/local/bin/ . The \"Path\" is different on Windows, and you'll need to manually copy the driver to your System Path, which is defined in the Control Panel's System Environment Variables.) You can verify that the correct drivers exist on your System Path by checking inside a Python command prompt.", "title": " Verifying that web drivers are installed"}, {"location": "help_docs/verify_webdriver/#verifying-chromedriver", "text": "python >>> from seleniumbase import get_driver >>> driver = get_driver ( \"chrome\" , headless = False ) >>> driver . get ( \"https://www.google.com/chrome\" ) >>> driver . quit () >>> exit ()", "title": "Verifying ChromeDriver"}, {"location": "help_docs/verify_webdriver/#verifying-geckodriver-firefox-webdriver", "text": "python >>> from seleniumbase import get_driver >>> driver = get_driver ( \"firefox\" , headless = False ) >>> driver . get ( \"https://www.mozilla.org/firefox\" ) >>> driver . quit () >>> exit ()", "title": "Verifying Geckodriver (Firefox WebDriver)"}, {"location": "help_docs/verify_webdriver/#verifying-webdriver-for-safari", "text": "python >>> from seleniumbase import get_driver >>> driver = get_driver ( \"safari\" , headless = False ) >>> driver . get ( \"https://www.apple.com/safari\" ) >>> driver . quit () >>> exit ()", "title": "Verifying WebDriver for Safari"}, {"location": "help_docs/virtualenv_instructions/", "text": "Virtual Environment Tutorial \u00b6 There are multiple ways of creating a Python virtual environment . This tutorial covers two of those: The venv command ( included with Python 3+ ). The virtualenvwrapper mkvirtualenv command. venv creates virtual environments in the location where run ( generally with Python projects ). mkvirtualenv creates virtual environments in one place ( generally in your home directory ). (The Python Software Foundation recommends venv for creating virtual environments.) Option 1: Using \"venv\" macOS/Linux terminal ( python3 -m venv ENV ) python3 -m venv sbase_env source sbase_env/bin/activate Windows CMD prompt ( py -m venv ENV ): py -m venv sbase_env call sbase_env \\\\ Scripts \\\\ activate To exit a virtual env, type deactivate . Option 2: Using virtualenvwrapper macOS/Linux terminal: python3 -m pip install virtualenvwrapper --force-reinstall export WORKON_HOME = $HOME /.virtualenvs source ` which virtualenvwrapper.sh ` ( Shortcut : Run source virtualenv_install.sh from the top-level SeleniumBase folder to perform the above steps.) (If you add source `which virtualenvwrapper.sh` to your local bash file ( ~/.bash_profile on macOS, or ~/.bashrc on Linux), virtualenvwrapper commands such as mkvirtualenv will be available whenever you open a new command prompt.) Windows CMD prompt: py -m pip install virtualenvwrapper-win --force-reinstall --user ( Shortcut : Run win_virtualenv.bat from the top-level SeleniumBase folder to perform the above step.) Create a virtual environment: mkvirtualenv ENV : mkvirtualenv sbase_env (If you have multiple versions of Python installed on your machine, and you want your virtual environment to use a specific Python version, add --python=PATH_TO_PYTHON_EXE to your mkvirtualenv command with the Python executable to use.) virtualenvwrapper commands: Creating a virtual environment: mkvirtualenv sbase_env Leaving your virtual environment: deactivate Returning to a virtual environment: workon sbase_env Listing all virtual environments: workon Deleting a virtual environment: rmvirtualenv sbase_env python-guide.org/en/latest/dev/virtualenvs has more information about Python virtual environments. For specific details about VirtualEnv and VirtualEnvWrapper, see http://virtualenv.readthedocs.org/en/latest/ and http://virtualenvwrapper.readthedocs.org/en/latest/ .", "title": "Virtualenv Instructions"}, {"location": "help_docs/virtualenv_instructions/#virtual-environment-tutorial", "text": "There are multiple ways of creating a Python virtual environment . This tutorial covers two of those: The venv command ( included with Python 3+ ). The virtualenvwrapper mkvirtualenv command. venv creates virtual environments in the location where run ( generally with Python projects ). mkvirtualenv creates virtual environments in one place ( generally in your home directory ). (The Python Software Foundation recommends venv for creating virtual environments.)", "title": "Virtual Environment Tutorial"}, {"location": "help_docs/webdriver_installation/", "text": "Installing webdrivers \u00b6 To run web automation, you'll need webdrivers for each browser you plan on using. With SeleniumBase, drivers are downloaded automatically as needed into the SeleniumBase drivers folder. You can also download drivers manually with these commands: sbase get chromedriver sbase get geckodriver sbase get edgedriver sbase get chromedriver automatically tries to detect the version you need. If it can't, it defaults to chromedriver 72.0.3626.69 for compatibility reasons. To force getting the latest version, use: sbase get chromedriver latest You can also get a specific version of chromedriver for a specific version of Chrome: sbase get chromedriver 102 .0.5005.61 sbase get chromedriver 102 On Linux, you can run the following two commands (once you've installed SeleniumBase) to automatically upgrade your Chromedriver to match your version of Chrome: ( wget downloads the file, and pytest runs it.) wget https://raw.githubusercontent.com/seleniumbase/SeleniumBase/master/examples/upgrade_chromedriver.py pytest upgrade_chromedriver.py -s If you run a test without the correct webdriver available, the driver will be downloaded automatically. If you plan on using the Selenium Grid integration (which allows for remote webdriver), you'll need to put the drivers on your System PATH. On macOS and Linux, /usr/local/bin is a good PATH spot. On Windows, you may need to set the System PATH under Environment Variables to include the location where you placed the driver files. As a shortcut, you could place the driver files into your Python Scripts/ folder in the location where you have Python installed, which should already be on your System PATH. Here's where you can go to manually get web drivers from the source: For Chrome, get Chromedriver on your System PATH. For Firefox, get Geckodriver on your System PATH. For Microsoft Edge, get Edge Driver (Microsoft WebDriver) on your System PATH. For Safari, get Safari Driver on your System PATH. For Opera, get Opera Chromium Driver on your System PATH.. For PhantomJS headless browser automation, get PhantomJS on your System PATH. (NOTE: PhantomJS is no longer officially supported by SeleniumHQ ) macOS shortcuts : You can also install drivers by using brew (aka homebrew ), but you'll need to install that first. Brew installation instructions are here . brew install --cask chromedriver brew install geckodriver You can also upgrade existing webdrivers: brew upgrade --cask chromedriver brew upgrade geckodriver Linux shortcuts : If you still need the web drivers, here are some scripts to help you get chromedriver and geckodriver on a Linux machine: wget https://chromedriver.storage.googleapis.com/72.0.3626.69/chromedriver_linux64.zip unzip chromedriver_linux64.zip mv chromedriver /usr/local/bin/ chmod +x /usr/local/bin/chromedriver wget https://github.com/mozilla/geckodriver/releases/download/v0.31.0/geckodriver-v0.31.0-linux64.tar.gz tar xvfz geckodriver-v0.31.0-linux64.tar.gz mv geckodriver /usr/local/bin/ chmod +x /usr/local/bin/geckodriver If you wish to verify that web drivers are working, follow these instructions .", "title": "WebDriver Installation"}, {"location": "help_docs/webdriver_installation/#installing-webdrivers", "text": "To run web automation, you'll need webdrivers for each browser you plan on using. With SeleniumBase, drivers are downloaded automatically as needed into the SeleniumBase drivers folder. You can also download drivers manually with these commands: sbase get chromedriver sbase get geckodriver sbase get edgedriver sbase get chromedriver automatically tries to detect the version you need. If it can't, it defaults to chromedriver 72.0.3626.69 for compatibility reasons. To force getting the latest version, use: sbase get chromedriver latest You can also get a specific version of chromedriver for a specific version of Chrome: sbase get chromedriver 102 .0.5005.61 sbase get chromedriver 102 On Linux, you can run the following two commands (once you've installed SeleniumBase) to automatically upgrade your Chromedriver to match your version of Chrome: ( wget downloads the file, and pytest runs it.) wget https://raw.githubusercontent.com/seleniumbase/SeleniumBase/master/examples/upgrade_chromedriver.py pytest upgrade_chromedriver.py -s If you run a test without the correct webdriver available, the driver will be downloaded automatically. If you plan on using the Selenium Grid integration (which allows for remote webdriver), you'll need to put the drivers on your System PATH. On macOS and Linux, /usr/local/bin is a good PATH spot. On Windows, you may need to set the System PATH under Environment Variables to include the location where you placed the driver files. As a shortcut, you could place the driver files into your Python Scripts/ folder in the location where you have Python installed, which should already be on your System PATH. Here's where you can go to manually get web drivers from the source: For Chrome, get Chromedriver on your System PATH. For Firefox, get Geckodriver on your System PATH. For Microsoft Edge, get Edge Driver (Microsoft WebDriver) on your System PATH. For Safari, get Safari Driver on your System PATH. For Opera, get Opera Chromium Driver on your System PATH.. For PhantomJS headless browser automation, get PhantomJS on your System PATH. (NOTE: PhantomJS is no longer officially supported by SeleniumHQ ) macOS shortcuts : You can also install drivers by using brew (aka homebrew ), but you'll need to install that first. Brew installation instructions are here . brew install --cask chromedriver brew install geckodriver You can also upgrade existing webdrivers: brew upgrade --cask chromedriver brew upgrade geckodriver Linux shortcuts : If you still need the web drivers, here are some scripts to help you get chromedriver and geckodriver on a Linux machine: wget https://chromedriver.storage.googleapis.com/72.0.3626.69/chromedriver_linux64.zip unzip chromedriver_linux64.zip mv chromedriver /usr/local/bin/ chmod +x /usr/local/bin/chromedriver wget https://github.com/mozilla/geckodriver/releases/download/v0.31.0/geckodriver-v0.31.0-linux64.tar.gz tar xvfz geckodriver-v0.31.0-linux64.tar.gz mv geckodriver /usr/local/bin/ chmod +x /usr/local/bin/geckodriver If you wish to verify that web drivers are working, follow these instructions .", "title": " Installing webdrivers"}, {"location": "integrations/azure/azure_pipelines/ReadMe/", "text": "Running browser-based test automation with Azure Pipelines by using SeleniumBase \u00b6 Step 0. Fork the SeleniumBase repo on GitHub to get started quickly. \u00b6 (You'll be using your own repository eventually.) Step 1. Get Azure Pipelines from the GitHub Marketplace \u00b6 Navigate to https://github.com/marketplace/azure-pipelines \u00b6 Set up a new plan (it's free) and follow the steps... Step 2. Go to Microsoft Azure DevOps to set up your environment \u00b6 Navigate to https://azure.microsoft.com/en-us/services/devops/?nav=min Follow the steps... Select \"Start free with GitHub >\": \u00b6 Give your new project a name and set visibility to public (for your SeleniumBase fork): \u00b6 Select that your code is hosted on GitHub \u00b6 Select your fork of SeleniumBase as your repository \u00b6 Copy the azure-pipelines.yml file from SeleniumBase into the azure-pipelines.yml box to create your new pipeline \u00b6 When you're done copying, click \"Run\". \u00b6 Step 3. Congratulations! Your browser tests are now running! \u00b6 Here's what a SeleniumBase sample run in Azure Pipelines may look like: https://dev.azure.com/seleniumbase/seleniumbase/_build/results?buildId=234 Every time you create a pull request now, Azure Pipelines will run your tests automatically. \u00b6 To learn more, study SeleniumBase and see how the azure-pipelines.yml file works.", "title": "Azure Pipelines"}, {"location": "integrations/azure/azure_pipelines/ReadMe/#running-browser-based-test-automation-with-azure-pipelines-by-using-seleniumbase", "text": "", "title": "Running browser-based test automation with Azure Pipelines by using SeleniumBase"}, {"location": "integrations/azure/azure_pipelines/ReadMe/#step-0-fork-the-seleniumbase-repo-on-github-to-get-started-quickly", "text": "(You'll be using your own repository eventually.)", "title": "Step 0. Fork the SeleniumBase repo on GitHub to get started quickly."}, {"location": "integrations/azure/azure_pipelines/ReadMe/#step-1-get-azure-pipelines-from-the-github-marketplace", "text": "", "title": "Step 1. Get Azure Pipelines from the GitHub Marketplace"}, {"location": "integrations/azure/azure_pipelines/ReadMe/#navigate-to-httpsgithubcommarketplaceazure-pipelines", "text": "Set up a new plan (it's free) and follow the steps...", "title": "Navigate to https://github.com/marketplace/azure-pipelines"}, {"location": "integrations/azure/azure_pipelines/ReadMe/#step-2-go-to-microsoft-azure-devops-to-set-up-your-environment", "text": "Navigate to https://azure.microsoft.com/en-us/services/devops/?nav=min Follow the steps...", "title": "Step 2. Go to Microsoft Azure DevOps to set up your environment"}, {"location": "integrations/azure/azure_pipelines/ReadMe/#select-start-free-with-github", "text": "", "title": "Select \"Start free with GitHub &gt;\":"}, {"location": "integrations/azure/azure_pipelines/ReadMe/#give-your-new-project-a-name-and-set-visibility-to-public-for-your-seleniumbase-fork", "text": "", "title": "Give your new project a name and set visibility to public (for your SeleniumBase fork):"}, {"location": "integrations/azure/azure_pipelines/ReadMe/#select-that-your-code-is-hosted-on-github", "text": "", "title": "Select that your code is hosted on GitHub"}, {"location": "integrations/azure/azure_pipelines/ReadMe/#select-your-fork-of-seleniumbase-as-your-repository", "text": "", "title": "Select your fork of SeleniumBase as your repository"}, {"location": "integrations/azure/azure_pipelines/ReadMe/#copy-the-azure-pipelinesyml-file-from-seleniumbase-into-the-azure-pipelinesyml-box-to-create-your-new-pipeline", "text": "", "title": "Copy the azure-pipelines.yml file from SeleniumBase into the azure-pipelines.yml box to create your new pipeline"}, {"location": "integrations/azure/azure_pipelines/ReadMe/#when-youre-done-copying-click-run", "text": "", "title": "When you're done copying, click \"Run\"."}, {"location": "integrations/azure/azure_pipelines/ReadMe/#step-3-congratulations-your-browser-tests-are-now-running", "text": "Here's what a SeleniumBase sample run in Azure Pipelines may look like: https://dev.azure.com/seleniumbase/seleniumbase/_build/results?buildId=234", "title": "Step 3. Congratulations! Your browser tests are now running!"}, {"location": "integrations/azure/azure_pipelines/ReadMe/#every-time-you-create-a-pull-request-now-azure-pipelines-will-run-your-tests-automatically", "text": "To learn more, study SeleniumBase and see how the azure-pipelines.yml file works.", "title": "Every time you create a pull request now, Azure Pipelines will run your tests automatically."}, {"location": "integrations/azure/jenkins/ReadMe/", "text": "Building a browser-based test automation server with Jenkins on Azure by using SeleniumBase \u00b6 ( 2022 NOTE: Steps from this 2019 tutorial from Boston Code Camp are now out-of-date . For installing Jenkins from the Azure Marketplace, you can try using Bitnami Jenkins . Or , for the newer official Microsoft tutorial, see Get Started: Install Jenkins on an Azure Linux VM , and then continue with Step 4 below to resume SeleniumBase setup after you've created your Jenkins instance.) Step 0. Fork the SeleniumBase repo on GitHub to get started quickly. \u00b6 (You'll be using your own repository eventually.) Step 1. Find Jenkins in the Azure Marketplace \u00b6 Search for \"Jenkins\" in the Azure Marketplace and select the Jenkins (Publisher: Microsoft) result to get to the Jenkins Start page. \u00b6 Step 2. Launch a Jenkins instance \u00b6 Click \"Create\" and follow the steps... \u00b6 Continue to \"Additional Settings\" when you're done with \"Basics\". \u00b6 On the \"Additional Settings\" section, set the Size to \"B2s\": \u00b6 Once you've reached Step 5, click \"Create\" to complete the setup. \u00b6 Step 3. Inspect your new Jenkins instance to SSH into the new machine \u00b6 Once your new Jenkins instance has finished launching, you should be able to see the main page \u00b6 On the main page, you should be able to find the Public IP Address. \u00b6 Use that IP Address to SSH into the machine: ssh USERNAME@IP_ADDRESS Step 4. Clone the SeleniumBase repository from the root (\"/\") directory. \u00b6 cd / sudo git clone https://github.com/seleniumbase/SeleniumBase.git Step 5. Enter the \"linux\" folder \u00b6 cd SeleniumBase/integrations/linux/ Step 6. Give the \"jenkins\" user sudo access (See jenkins_permissions.sh for details) \u00b6 ./jenkins_permissions.sh Step 7. Become the \"jenkins\" user and enter a \"bash\" shell \u00b6 sudo su jenkins bash Step 8. Install dependencies (See Linuxfile.sh for details) \u00b6 ./Linuxfile.sh Step 9. Start up the headless browser display mechanism: Xvfb (See Xvfb_launcher.sh for details) \u00b6 ./Xvfb_launcher.sh Step 10. Go to the SeleniumBase directory \u00b6 cd /SeleniumBase Step 11. Install the requirements for SeleniumBase \u00b6 sudo pip install -r requirements.txt --upgrade Step 12. Install SeleniumBase (Make sure you already installed the requirements above) \u00b6 sudo python setup.py develop Step 13. Install chromedriver \u00b6 sudo seleniumbase install chromedriver Step 14. Run an example test in Chrome to verify installation (May take up to 10 seconds) \u00b6 pytest examples/my_first_test.py --headless --browser = chrome Step 15. Secure your Jenkins machine \u00b6 Navigate to http://JENKINS_IP_ADDRESS/jenkins-on-azure/ \u00b6 (Depending on your version of Jenkins, you may see the following screen, or nothing at all.) Initially, Jenkins uses only http , which makes it less secure. \u00b6 You'll need to set up SSH Port Forwarding in order to secure it. \u00b6 To do this, copy/paste the string and run it in a NEW command prompt on your local machine (NOT from an SSH terminal session), swapping out the username and DNS name with the ones you set up when creating the Jenkins instance in Azure. ssh -L 127.0.0.1:8080:localhost:8080 USERNAME@DNS_NAME Step 16. Login to Jenkins \u00b6 If you've correctly set up SSH Port Forwarding, the url will be http://127.0.0.1:8080/ \u00b6 You'll need to get the password from the SSH terminal on the Linux machine to log in \u00b6 sudo cat /var/lib/jenkins/secrets/initialAdminPassword Step 17. Customize Jenkins \u00b6 Step 18. Create an Admin user \u00b6 Once Jenkins has finished loading, the top left of the page should look like this \u00b6 Step 19. Create a new Jenkins job \u00b6 Click on \"New Item\" Give your new Jenkins job a name (ex: \"Test1\") Select \"Freestyle project\" Click \"OK\" Step 20. Setup your new Jenkins job \u00b6 Under \"Source Code Management\", select \"Git\". For the \"Repository URL\", put: https://github.com/seleniumbase/SeleniumBase.git . (You'll eventually be using your own clone of the repository here.) Under \"Build\", click the \"Add build step\" dropdown. Select \"Execute shell\". For the \"Command\", paste: cd examples pytest my_first_test.py --headless Click \"Save\" when you're done. \u00b6 You'll see the following page after that: Step 21. Run your new Jenkins job \u00b6 Click on \"Build Now\" (If everything was done correctly, you'll see a blue dot appear after a few seconds, indicating that the test job passed.) Step 22. See the top Jenkins page for an overview of all jobs \u00b6 Step 23. Future Work \u00b6 If you have a web application that you want to test, you'll be able to create SeleniumBase tests and add them to Jenkins as you saw here. You may want to create a Deploy job, which downloads the latest version of your repository, and then kicks off all tests to run after that. You could then tell that Deploy job to auto-run whenever a change is pushed to your repository by using: \"Poll SCM\". All your tests would then be able to run by using: \"Build after other projects are built\". Congratulations! You're now well on your way to becoming a build & release / automation engineer! \u00b6", "title": "Jenkins on Azure"}, {"location": "integrations/azure/jenkins/ReadMe/#building-a-browser-based-test-automation-server-with-jenkins-on-azure-by-using-seleniumbase", "text": "( 2022 NOTE: Steps from this 2019 tutorial from Boston Code Camp are now out-of-date . For installing Jenkins from the Azure Marketplace, you can try using Bitnami Jenkins . Or , for the newer official Microsoft tutorial, see Get Started: Install Jenkins on an Azure Linux VM , and then continue with Step 4 below to resume SeleniumBase setup after you've created your Jenkins instance.)", "title": "Building a browser-based test automation server with Jenkins on Azure by using SeleniumBase"}, {"location": "integrations/azure/jenkins/ReadMe/#step-0-fork-the-seleniumbase-repo-on-github-to-get-started-quickly", "text": "(You'll be using your own repository eventually.)", "title": "Step 0. Fork the SeleniumBase repo on GitHub to get started quickly."}, {"location": "integrations/azure/jenkins/ReadMe/#step-1-find-jenkins-in-the-azure-marketplace", "text": "", "title": "Step 1. Find Jenkins in the Azure Marketplace"}, {"location": "integrations/azure/jenkins/ReadMe/#search-for-jenkins-in-the-azure-marketplace-and-select-the-jenkins-publisher-microsoft-result-to-get-to-the-jenkins-start-page", "text": "", "title": "Search for \"Jenkins\" in the Azure Marketplace and select the Jenkins (Publisher: Microsoft) result to get to the Jenkins Start page."}, {"location": "integrations/azure/jenkins/ReadMe/#step-2-launch-a-jenkins-instance", "text": "", "title": "Step 2. Launch a Jenkins instance"}, {"location": "integrations/azure/jenkins/ReadMe/#click-create-and-follow-the-steps", "text": "", "title": "Click \"Create\" and follow the steps..."}, {"location": "integrations/azure/jenkins/ReadMe/#continue-to-additional-settings-when-youre-done-with-basics", "text": "", "title": "Continue to \"Additional Settings\" when you're done with \"Basics\"."}, {"location": "integrations/azure/jenkins/ReadMe/#on-the-additional-settings-section-set-the-size-to-b2s", "text": "", "title": "On the \"Additional Settings\" section, set the Size to \"B2s\":"}, {"location": "integrations/azure/jenkins/ReadMe/#once-youve-reached-step-5-click-create-to-complete-the-setup", "text": "", "title": "Once you've reached Step 5, click \"Create\" to complete the setup."}, {"location": "integrations/azure/jenkins/ReadMe/#step-3-inspect-your-new-jenkins-instance-to-ssh-into-the-new-machine", "text": "", "title": "Step 3. Inspect your new Jenkins instance to SSH into the new machine"}, {"location": "integrations/azure/jenkins/ReadMe/#once-your-new-jenkins-instance-has-finished-launching-you-should-be-able-to-see-the-main-page", "text": "", "title": "Once your new Jenkins instance has finished launching, you should be able to see the main page"}, {"location": "integrations/azure/jenkins/ReadMe/#on-the-main-page-you-should-be-able-to-find-the-public-ip-address", "text": "Use that IP Address to SSH into the machine: ssh USERNAME@IP_ADDRESS", "title": "On the main page, you should be able to find the Public IP Address."}, {"location": "integrations/azure/jenkins/ReadMe/#step-4-clone-the-seleniumbase-repository-from-the-root-directory", "text": "cd / sudo git clone https://github.com/seleniumbase/SeleniumBase.git", "title": "Step 4. Clone the SeleniumBase repository from the root (\"/\") directory."}, {"location": "integrations/azure/jenkins/ReadMe/#step-5-enter-the-linux-folder", "text": "cd SeleniumBase/integrations/linux/", "title": "Step 5. Enter the \"linux\" folder"}, {"location": "integrations/azure/jenkins/ReadMe/#step-6-give-the-jenkins-user-sudo-access-see-jenkins_permissionssh-for-details", "text": "./jenkins_permissions.sh", "title": "Step 6. Give the \"jenkins\" user sudo access (See jenkins_permissions.sh for details)"}, {"location": "integrations/azure/jenkins/ReadMe/#step-7-become-the-jenkins-user-and-enter-a-bash-shell", "text": "sudo su jenkins bash", "title": "Step 7. Become the \"jenkins\" user and enter a \"bash\" shell"}, {"location": "integrations/azure/jenkins/ReadMe/#step-8-install-dependencies-see-linuxfilesh-for-details", "text": "./Linuxfile.sh", "title": "Step 8. Install dependencies (See Linuxfile.sh for details)"}, {"location": "integrations/azure/jenkins/ReadMe/#step-9-start-up-the-headless-browser-display-mechanism-xvfb-see-xvfb_launchersh-for-details", "text": "./Xvfb_launcher.sh", "title": "Step 9. Start up the headless browser display mechanism: Xvfb (See Xvfb_launcher.sh for details)"}, {"location": "integrations/azure/jenkins/ReadMe/#step-10-go-to-the-seleniumbase-directory", "text": "cd /SeleniumBase", "title": "Step 10. Go to the SeleniumBase directory"}, {"location": "integrations/azure/jenkins/ReadMe/#step-11-install-the-requirements-for-seleniumbase", "text": "sudo pip install -r requirements.txt --upgrade", "title": "Step 11. Install the requirements for SeleniumBase"}, {"location": "integrations/azure/jenkins/ReadMe/#step-12-install-seleniumbase-make-sure-you-already-installed-the-requirements-above", "text": "sudo python setup.py develop", "title": "Step 12. Install SeleniumBase (Make sure you already installed the requirements above)"}, {"location": "integrations/azure/jenkins/ReadMe/#step-13-install-chromedriver", "text": "sudo seleniumbase install chromedriver", "title": "Step 13. Install chromedriver"}, {"location": "integrations/azure/jenkins/ReadMe/#step-14-run-an-example-test-in-chrome-to-verify-installation-may-take-up-to-10-seconds", "text": "pytest examples/my_first_test.py --headless --browser = chrome", "title": "Step 14. Run an example test in Chrome to verify installation (May take up to 10 seconds)"}, {"location": "integrations/azure/jenkins/ReadMe/#step-15-secure-your-jenkins-machine", "text": "", "title": "Step 15. Secure your Jenkins machine"}, {"location": "integrations/azure/jenkins/ReadMe/#navigate-to-httpjenkins_ip_addressjenkins-on-azure", "text": "(Depending on your version of Jenkins, you may see the following screen, or nothing at all.)", "title": "Navigate to http://JENKINS_IP_ADDRESS/jenkins-on-azure/"}, {"location": "integrations/azure/jenkins/ReadMe/#initially-jenkins-uses-only-http-which-makes-it-less-secure", "text": "", "title": "Initially, Jenkins uses only http, which makes it less secure."}, {"location": "integrations/azure/jenkins/ReadMe/#youll-need-to-set-up-ssh-port-forwarding-in-order-to-secure-it", "text": "To do this, copy/paste the string and run it in a NEW command prompt on your local machine (NOT from an SSH terminal session), swapping out the username and DNS name with the ones you set up when creating the Jenkins instance in Azure. ssh -L 127.0.0.1:8080:localhost:8080 USERNAME@DNS_NAME", "title": "You'll need to set up SSH Port Forwarding in order to secure it."}, {"location": "integrations/azure/jenkins/ReadMe/#step-16-login-to-jenkins", "text": "", "title": "Step 16. Login to Jenkins"}, {"location": "integrations/azure/jenkins/ReadMe/#if-youve-correctly-set-up-ssh-port-forwarding-the-url-will-be-http1270018080", "text": "", "title": "If you've correctly set up SSH Port Forwarding, the url will be http://127.0.0.1:8080/"}, {"location": "integrations/azure/jenkins/ReadMe/#youll-need-to-get-the-password-from-the-ssh-terminal-on-the-linux-machine-to-log-in", "text": "sudo cat /var/lib/jenkins/secrets/initialAdminPassword", "title": "You'll need to get the password from the SSH terminal on the Linux machine to log in"}, {"location": "integrations/azure/jenkins/ReadMe/#step-17-customize-jenkins", "text": "", "title": "Step 17. Customize Jenkins"}, {"location": "integrations/azure/jenkins/ReadMe/#step-18-create-an-admin-user", "text": "", "title": "Step 18. Create an Admin user"}, {"location": "integrations/azure/jenkins/ReadMe/#once-jenkins-has-finished-loading-the-top-left-of-the-page-should-look-like-this", "text": "", "title": "Once Jenkins has finished loading, the top left of the page should look like this"}, {"location": "integrations/azure/jenkins/ReadMe/#step-19-create-a-new-jenkins-job", "text": "Click on \"New Item\" Give your new Jenkins job a name (ex: \"Test1\") Select \"Freestyle project\" Click \"OK\"", "title": "Step 19. Create a new Jenkins job"}, {"location": "integrations/azure/jenkins/ReadMe/#step-20-setup-your-new-jenkins-job", "text": "Under \"Source Code Management\", select \"Git\". For the \"Repository URL\", put: https://github.com/seleniumbase/SeleniumBase.git . (You'll eventually be using your own clone of the repository here.) Under \"Build\", click the \"Add build step\" dropdown. Select \"Execute shell\". For the \"Command\", paste: cd examples pytest my_first_test.py --headless", "title": "Step 20. Setup your new Jenkins job"}, {"location": "integrations/azure/jenkins/ReadMe/#click-save-when-youre-done", "text": "You'll see the following page after that:", "title": "Click \"Save\" when you're done."}, {"location": "integrations/azure/jenkins/ReadMe/#step-21-run-your-new-jenkins-job", "text": "Click on \"Build Now\" (If everything was done correctly, you'll see a blue dot appear after a few seconds, indicating that the test job passed.)", "title": "Step 21. Run your new Jenkins job"}, {"location": "integrations/azure/jenkins/ReadMe/#step-22-see-the-top-jenkins-page-for-an-overview-of-all-jobs", "text": "", "title": "Step 22. See the top Jenkins page for an overview of all jobs"}, {"location": "integrations/azure/jenkins/ReadMe/#step-23-future-work", "text": "If you have a web application that you want to test, you'll be able to create SeleniumBase tests and add them to Jenkins as you saw here. You may want to create a Deploy job, which downloads the latest version of your repository, and then kicks off all tests to run after that. You could then tell that Deploy job to auto-run whenever a change is pushed to your repository by using: \"Poll SCM\". All your tests would then be able to run by using: \"Build after other projects are built\".", "title": "Step 23. Future Work"}, {"location": "integrations/azure/jenkins/ReadMe/#congratulations-youre-now-well-on-your-way-to-becoming-a-build-release-automation-engineer", "text": "", "title": "Congratulations! You're now well on your way to becoming a build &amp; release / automation engineer!"}, {"location": "integrations/docker/ReadMe/", "text": "Docker setup instructions for SeleniumBase \u00b6 1. Install the Docker Toolbox \u00b6 You can get that from here: https://www.docker.com/products/docker-toolbox You might also want to install the Docker Engine: https://docs.docker.com/engine/installation/ 2. Create your SeleniumBase Docker environment \u00b6 docker-machine create --driver virtualbox seleniumbase (If your Docker environment ever goes down for any reason, you can bring it back up with a restart.) \u00b6 docker-machine restart seleniumbase 3. Configure your shell \u00b6 eval \"$(docker-machine env seleniumbase)\" 4. Go to the SeleniumBase home directory on the command line, which is where Dockerfile is located. (This assumes you've already cloned the SeleniumBase repo.) \u00b6 5. Create your Docker image from your Dockerfile: (Get ready to wait awhile) \u00b6 docker build -t seleniumbase . If running on an Apple M1 Mac, use this instead: docker build --platform linux/amd64 seleniumbase . 6. Run the example test with Chrome inside your Docker: (Once the test completes after a few seconds, you'll automatically exit the Docker shell) \u00b6 docker run seleniumbase ./run_docker_test_in_chrome.sh 7. Now run the same test with Firefox inside your Docker \u00b6 docker run seleniumbase ./run_docker_test_in_firefox.sh 8. You can also enter Docker and stay inside the shell \u00b6 docker run -i -t seleniumbase 9. Now you can run the example test from inside the Docker shell \u00b6 ./run_docker_test_in_chrome.sh 10. When you're satisfied, you may exit the Docker shell \u00b6 exit 11. (Optional) Since Docker images and containers take up a lot of space, you may want to clean up your machine from time to time when they\u2019re not being used \u00b6 Details on that can be found here: http://stackoverflow.com/questions/17236796/how-to-remove-old-docker-containers Here are a few of those cleanup commands: docker container prune docker system prune docker images | grep \"<none>\" | awk '{print $3}' | xargs docker rmi docker rm 'docker ps --no-trunc -aq' If you want to completely remove all of your Docker containers and images, use these commands: (If there's nothing to delete, those commands will return an error.) docker rm -f $(docker ps -a -q) docker rmi -f $(docker images -q) Finally, if you want to wipe out your SeleniumBase Docker virtualbox, use these commands: docker-machine kill seleniumbase docker-machine rm seleniumbase For more cleanup commands, check out: https://codefresh.io/blog/everyday-hacks-docker/ 13. (Optional) More reading on Docker can be found here \u00b6 https://docs.docker.com https://docs.docker.com/get-started/ https://docs.docker.com/docker-for-mac/", "title": "Docker Start Guide"}, {"location": "integrations/docker/ReadMe/#docker-setup-instructions-for-seleniumbase", "text": "", "title": "Docker setup instructions for SeleniumBase"}, {"location": "integrations/docker/ReadMe/#1-install-the-docker-toolbox", "text": "You can get that from here: https://www.docker.com/products/docker-toolbox You might also want to install the Docker Engine: https://docs.docker.com/engine/installation/", "title": "1. Install the Docker Toolbox"}, {"location": "integrations/docker/ReadMe/#2-create-your-seleniumbase-docker-environment", "text": "docker-machine create --driver virtualbox seleniumbase", "title": "2. Create your SeleniumBase Docker environment"}, {"location": "integrations/docker/ReadMe/#if-your-docker-environment-ever-goes-down-for-any-reason-you-can-bring-it-back-up-with-a-restart", "text": "docker-machine restart seleniumbase", "title": "(If your Docker environment ever goes down for any reason, you can bring it back up with a restart.)"}, {"location": "integrations/docker/ReadMe/#3-configure-your-shell", "text": "eval \"$(docker-machine env seleniumbase)\"", "title": "3. Configure your shell"}, {"location": "integrations/docker/ReadMe/#4-go-to-the-seleniumbase-home-directory-on-the-command-line-which-is-where-dockerfile-is-located-this-assumes-youve-already-cloned-the-seleniumbase-repo", "text": "", "title": "4. Go to the SeleniumBase home directory on the command line, which is where Dockerfile is located. (This assumes you've already cloned the SeleniumBase repo.)"}, {"location": "integrations/docker/ReadMe/#5-create-your-docker-image-from-your-dockerfile-get-ready-to-wait-awhile", "text": "docker build -t seleniumbase . If running on an Apple M1 Mac, use this instead: docker build --platform linux/amd64 seleniumbase .", "title": "5. Create your Docker image from your Dockerfile: (Get ready to wait awhile)"}, {"location": "integrations/docker/ReadMe/#6-run-the-example-test-with-chrome-inside-your-docker-once-the-test-completes-after-a-few-seconds-youll-automatically-exit-the-docker-shell", "text": "docker run seleniumbase ./run_docker_test_in_chrome.sh", "title": "6. Run the example test with Chrome inside your Docker: (Once the test completes after a few seconds, you'll automatically exit the Docker shell)"}, {"location": "integrations/docker/ReadMe/#7-now-run-the-same-test-with-firefox-inside-your-docker", "text": "docker run seleniumbase ./run_docker_test_in_firefox.sh", "title": "7. Now run the same test with Firefox inside your Docker"}, {"location": "integrations/docker/ReadMe/#8-you-can-also-enter-docker-and-stay-inside-the-shell", "text": "docker run -i -t seleniumbase", "title": "8. You can also enter Docker and stay inside the shell"}, {"location": "integrations/docker/ReadMe/#9-now-you-can-run-the-example-test-from-inside-the-docker-shell", "text": "./run_docker_test_in_chrome.sh", "title": "9. Now you can run the example test from inside the Docker shell"}, {"location": "integrations/docker/ReadMe/#10-when-youre-satisfied-you-may-exit-the-docker-shell", "text": "exit", "title": "10. When you're satisfied, you may exit the Docker shell"}, {"location": "integrations/docker/ReadMe/#11-optional-since-docker-images-and-containers-take-up-a-lot-of-space-you-may-want-to-clean-up-your-machine-from-time-to-time-when-theyre-not-being-used", "text": "Details on that can be found here: http://stackoverflow.com/questions/17236796/how-to-remove-old-docker-containers Here are a few of those cleanup commands: docker container prune docker system prune docker images | grep \"<none>\" | awk '{print $3}' | xargs docker rmi docker rm 'docker ps --no-trunc -aq' If you want to completely remove all of your Docker containers and images, use these commands: (If there's nothing to delete, those commands will return an error.) docker rm -f $(docker ps -a -q) docker rmi -f $(docker images -q) Finally, if you want to wipe out your SeleniumBase Docker virtualbox, use these commands: docker-machine kill seleniumbase docker-machine rm seleniumbase For more cleanup commands, check out: https://codefresh.io/blog/everyday-hacks-docker/", "title": "11. (Optional) Since Docker images and containers take up a lot of space, you may want to clean up your machine from time to time when they\u2019re not being used"}, {"location": "integrations/docker/ReadMe/#13-optional-more-reading-on-docker-can-be-found-here", "text": "https://docs.docker.com https://docs.docker.com/get-started/ https://docs.docker.com/docker-for-mac/", "title": "13. (Optional) More reading on Docker can be found here"}, {"location": "integrations/github/workflows/ReadMe/", "text": "Running browser tests on GitHub Actions with SeleniumBase \u00b6 Step 0. Create a fork of SeleniumBase on GitHub to help you get started. \u00b6 (You'll be using your own repo eventually.) Step 1. From the GitHub Actions tab, choose to set up a Python package Workflow. \u00b6 Step 2. Add your workflow .yml script. \u00b6 (If using a SeleniumBase fork, the script from https://github.com/seleniumbase/SeleniumBase/blob/master/.github/workflows/python-package.yml already exists to help guide you.) Step 3. Commit your changes to GitHub. \u00b6 Step 4. Your tests will now run on every pull request and on every commit to the master branch. \u00b6 (See https://github.com/seleniumbase/SeleniumBase/actions for the SeleniumBase example.) (You can click inside each build for more details.) (You can also see the specific steps being performed by each command.) (You'll notice that web browsers such as Chrome and Firefox get installed for tests to use. SeleniumBase uses pytest for running tests while using Selenium to interact with web browsers.) Congratulations! You now know how to create and run browser tests with GitHub Actions! \u00b6 Study SeleniumBase to learn more! \u00b6", "title": "GitHub CI"}, {"location": "integrations/github/workflows/ReadMe/#running-browser-tests-on-github-actions-with-seleniumbase", "text": "", "title": "Running browser tests on GitHub Actions with SeleniumBase"}, {"location": "integrations/github/workflows/ReadMe/#step-0-create-a-fork-of-seleniumbase-on-github-to-help-you-get-started", "text": "(You'll be using your own repo eventually.)", "title": "Step 0. Create a fork of SeleniumBase on GitHub to help you get started."}, {"location": "integrations/github/workflows/ReadMe/#step-1-from-the-github-actions-tab-choose-to-set-up-a-python-package-workflow", "text": "", "title": "Step 1. From the GitHub Actions tab, choose to set up a Python package Workflow."}, {"location": "integrations/github/workflows/ReadMe/#step-2-add-your-workflow-yml-script", "text": "(If using a SeleniumBase fork, the script from https://github.com/seleniumbase/SeleniumBase/blob/master/.github/workflows/python-package.yml already exists to help guide you.)", "title": "Step 2. Add your workflow .yml script."}, {"location": "integrations/github/workflows/ReadMe/#step-3-commit-your-changes-to-github", "text": "", "title": "Step 3. Commit your changes to GitHub."}, {"location": "integrations/github/workflows/ReadMe/#step-4-your-tests-will-now-run-on-every-pull-request-and-on-every-commit-to-the-master-branch", "text": "(See https://github.com/seleniumbase/SeleniumBase/actions for the SeleniumBase example.) (You can click inside each build for more details.) (You can also see the specific steps being performed by each command.) (You'll notice that web browsers such as Chrome and Firefox get installed for tests to use. SeleniumBase uses pytest for running tests while using Selenium to interact with web browsers.)", "title": "Step 4. Your tests will now run on every pull request and on every commit to the master branch."}, {"location": "integrations/github/workflows/ReadMe/#congratulations-you-now-know-how-to-create-and-run-browser-tests-with-github-actions", "text": "", "title": "Congratulations! You now know how to create and run browser tests with GitHub Actions!"}, {"location": "integrations/github/workflows/ReadMe/#study-seleniumbase-to-learn-more", "text": "", "title": "Study SeleniumBase to learn more!"}, {"location": "integrations/google_cloud/ReadMe/", "text": "Building a browser-based test automation server on the Google Cloud Platform by using SeleniumBase \u00b6 (This tutorial, from a previous Google Cloud Meetup , will teach you how to setup a Linux server for running automated browser tests. The cost of running this server is about $13.60/month on Google Cloud (enough to handle 5 parallel tests ). This is less expensive than using other platforms.) Step 1. Open the Google Cloud Platform Cloud Launcher \u00b6 Navigate to https://console.cloud.google.com/launcher (If you already have an active Google Cloud project, the Google Cloud Launcher will probably default to using that. If you don't, sign up for the free trial of Google Cloud Platform here to get started.) Step 2. Launch a Jenkins instance \u00b6 Under \"Cloud Launcher\", Click on \"Jenkins Certified by Bitnami\" Click on \"Launch on Compute Engine\" Give the instance a name Give the instance a zone Click \"Create\" Step 3. Connect with your new Jenkins instance \u00b6 SSH into your new instance by selecting: \"SSH\" => \"Open in browser window\" from the instance page. Step 4. Clone the SeleniumBase repository from the root (\"/\") directory. \u00b6 cd / sudo git clone https://github.com/seleniumbase/SeleniumBase.git Step 5. Enter the \"linux\" folder \u00b6 cd SeleniumBase/integrations/linux/ Step 6. Give Jenkins (aka \"tomcat\" user) sudo access (See tomcat_permissions.sh for details) \u00b6 ./tomcat_permissions.sh Step 7. Become \"tomcat\" (the Jenkins user) and enter a \"bash\" shell \u00b6 sudo su tomcat bash Step 8. Install dependencies (See Linuxfile.sh for details) \u00b6 ./Linuxfile.sh Step 9. Start up the headless browser display mechanism: Xvfb (See Xvfb_launcher.sh for details) \u00b6 ./Xvfb_launcher.sh Step 10. Go to the SeleniumBase directory \u00b6 cd /SeleniumBase Step 11. Install the requirements for SeleniumBase \u00b6 sudo pip install -r requirements.txt --upgrade Step 12. Install SeleniumBase \u00b6 sudo python setup.py develop Step 13. Run an example test on Chrome to verify installation (May take up to 10 seconds) \u00b6 pytest examples/my_first_test.py --headless Step 14. If you prefer using nosetests, that works too \u00b6 nosetests examples/my_first_test.py --headless Step 15. You can also verify that the example test runs on Firefox \u00b6 pytest examples/my_first_test.py --headless --browser = firefox Step 16. Login to Jenkins \u00b6 (The url, as well as username and password, should be accessible from your Google Cloud Platform VM instance page.) Step 17. Create a new Jenkins job \u00b6 Click on \"New Item\" Give your new Jenkins job a name (ex: \"My_First_Test\") Select \"Freestyle project\" Click \"OK\" Step 18. Setup your new Jenkins job \u00b6 Under \"Source Code Management\", select \"Git\". For the \"Repository URL\", put: https://github.com/seleniumbase/SeleniumBase.git . (You'll eventually be using your own clone of the repository here.) Under \"Build\", click the \"Add build step\" dropdown and then select \"Execute shell\". For the \"Command\", put: pytest examples/my_first_test.py --headless Click \"Save\" when you're done. Step 19. Run your new Jenkins job \u00b6 Click on \"Build Now\" (If all the setup was done correctly, you should see a blue dot appear after a few seconds, indicating that the test job passed.) Step 20. Future Work \u00b6 If you have a web application that you want to test, you'll be able to create SeleniumBase tests and add them to Jenkins as you saw here. You may want to create a Deploy job, which downloads the latest version of your repository, and then kicks off all tests to run after that. You could then tell that Deploy job to auto-run whenever a change is pushed to your repository by using: \"Poll SCM\". All your tests would then be able to run by using: \"Build after other projects are built\". You can also use MySQL to save test results in the DB so that you can query the data at any time. Congratulations! You're now well on your way to becoming a build & release / automation engineer! \u00b6 MySQL DB setup instructions \u00b6 Step 21. Return to the Google Cloud Launcher and launch a MySQL Instance \u00b6 Under \"Featured Solutions\", Click on \"MySQL\" Click on \"Launch on Compute Engine\" Give the instance a name Give the instance a zone Click \"Create\" Step 22. Get the Connection credentials for your new MySQL Instance \u00b6 Under the Google Cloud Platform menu, go to \"Compute Engine\" Find your new MySQL instance and then write down the value written in the \"External IP\" section. Under the Google Cloud Platform menu, go to \"Deployment Manager\" Find your new MySQL instance and then click on it. Write down the values for Admin username and password. (Username should be \"root\") Step 23. Get a MySQL GUI tool so that you can connect to your MySQL Instance \u00b6 You can download MySQL Workbench for this. Step 24. Create a new connection to your MySQL Instance \u00b6 Use the MySQL DB credentials that you saved in Step 21 for this. Step 25. Create a new database/schema in your MySQL Instance \u00b6 You can name your database/schema test_db . Step 26. Create the necessary tables in your MySQL database/schema \u00b6 Run the create_db_tables.sql script in your MySQL database/schema to create all the required DB tables. Step 27. Have your local clone of SeleniumBase connect to your MySQL DB Instance \u00b6 Update the MySQL connection details in your settings.py file to use the credentials that you saved in Step 21. Step 28. Have your SeleniumBase Jenkins jobs use your MySQL DB Instance \u00b6 For the \"Execute shell\", use the following as your updated \"Command\": pytest examples/test_suite.py --headless --with-db_reporting Click \"Save\" when you're done. Step 29. Run your new Jenkins job \u00b6 Click on \"Build Now\" If all goes well, you should be seeing new rows appear in your MySQL DB tables. Step 30. Congratulations! You've successfully completed this tutorial! \u00b6", "title": "Jenkins on Google Cloud"}, {"location": "integrations/google_cloud/ReadMe/#building-a-browser-based-test-automation-server-on-the-google-cloud-platform-by-using-seleniumbase", "text": "(This tutorial, from a previous Google Cloud Meetup , will teach you how to setup a Linux server for running automated browser tests. The cost of running this server is about $13.60/month on Google Cloud (enough to handle 5 parallel tests ). This is less expensive than using other platforms.)", "title": "Building a browser-based test automation server on the Google Cloud Platform by using SeleniumBase"}, {"location": "integrations/google_cloud/ReadMe/#step-1-open-the-google-cloud-platform-cloud-launcher", "text": "Navigate to https://console.cloud.google.com/launcher (If you already have an active Google Cloud project, the Google Cloud Launcher will probably default to using that. If you don't, sign up for the free trial of Google Cloud Platform here to get started.)", "title": "Step 1. Open the Google Cloud Platform Cloud Launcher"}, {"location": "integrations/google_cloud/ReadMe/#step-2-launch-a-jenkins-instance", "text": "Under \"Cloud Launcher\", Click on \"Jenkins Certified by Bitnami\" Click on \"Launch on Compute Engine\" Give the instance a name Give the instance a zone Click \"Create\"", "title": "Step 2. Launch a Jenkins instance"}, {"location": "integrations/google_cloud/ReadMe/#step-3-connect-with-your-new-jenkins-instance", "text": "SSH into your new instance by selecting: \"SSH\" => \"Open in browser window\" from the instance page.", "title": "Step 3. Connect with your new Jenkins instance"}, {"location": "integrations/google_cloud/ReadMe/#step-4-clone-the-seleniumbase-repository-from-the-root-directory", "text": "cd / sudo git clone https://github.com/seleniumbase/SeleniumBase.git", "title": "Step 4. Clone the SeleniumBase repository from the root (\"/\") directory."}, {"location": "integrations/google_cloud/ReadMe/#step-5-enter-the-linux-folder", "text": "cd SeleniumBase/integrations/linux/", "title": "Step 5. Enter the \"linux\" folder"}, {"location": "integrations/google_cloud/ReadMe/#step-6-give-jenkins-aka-tomcat-user-sudo-access-see-tomcat_permissionssh-for-details", "text": "./tomcat_permissions.sh", "title": "Step 6. Give Jenkins (aka \"tomcat\" user) sudo access (See tomcat_permissions.sh for details)"}, {"location": "integrations/google_cloud/ReadMe/#step-7-become-tomcat-the-jenkins-user-and-enter-a-bash-shell", "text": "sudo su tomcat bash", "title": "Step 7. Become \"tomcat\" (the Jenkins user) and enter a \"bash\" shell"}, {"location": "integrations/google_cloud/ReadMe/#step-8-install-dependencies-see-linuxfilesh-for-details", "text": "./Linuxfile.sh", "title": "Step 8. Install dependencies (See Linuxfile.sh for details)"}, {"location": "integrations/google_cloud/ReadMe/#step-9-start-up-the-headless-browser-display-mechanism-xvfb-see-xvfb_launchersh-for-details", "text": "./Xvfb_launcher.sh", "title": "Step 9. Start up the headless browser display mechanism: Xvfb (See Xvfb_launcher.sh for details)"}, {"location": "integrations/google_cloud/ReadMe/#step-10-go-to-the-seleniumbase-directory", "text": "cd /SeleniumBase", "title": "Step 10. Go to the SeleniumBase directory"}, {"location": "integrations/google_cloud/ReadMe/#step-11-install-the-requirements-for-seleniumbase", "text": "sudo pip install -r requirements.txt --upgrade", "title": "Step 11. Install the requirements for SeleniumBase"}, {"location": "integrations/google_cloud/ReadMe/#step-12-install-seleniumbase", "text": "sudo python setup.py develop", "title": "Step 12. Install SeleniumBase"}, {"location": "integrations/google_cloud/ReadMe/#step-13-run-an-example-test-on-chrome-to-verify-installation-may-take-up-to-10-seconds", "text": "pytest examples/my_first_test.py --headless", "title": "Step 13. Run an example test on Chrome to verify installation (May take up to 10 seconds)"}, {"location": "integrations/google_cloud/ReadMe/#step-14-if-you-prefer-using-nosetests-that-works-too", "text": "nosetests examples/my_first_test.py --headless", "title": "Step 14. If you prefer using nosetests, that works too"}, {"location": "integrations/google_cloud/ReadMe/#step-15-you-can-also-verify-that-the-example-test-runs-on-firefox", "text": "pytest examples/my_first_test.py --headless --browser = firefox", "title": "Step 15. You can also verify that the example test runs on Firefox"}, {"location": "integrations/google_cloud/ReadMe/#step-16-login-to-jenkins", "text": "(The url, as well as username and password, should be accessible from your Google Cloud Platform VM instance page.)", "title": "Step 16. Login to Jenkins"}, {"location": "integrations/google_cloud/ReadMe/#step-17-create-a-new-jenkins-job", "text": "Click on \"New Item\" Give your new Jenkins job a name (ex: \"My_First_Test\") Select \"Freestyle project\" Click \"OK\"", "title": "Step 17. Create a new Jenkins job"}, {"location": "integrations/google_cloud/ReadMe/#step-18-setup-your-new-jenkins-job", "text": "Under \"Source Code Management\", select \"Git\". For the \"Repository URL\", put: https://github.com/seleniumbase/SeleniumBase.git . (You'll eventually be using your own clone of the repository here.) Under \"Build\", click the \"Add build step\" dropdown and then select \"Execute shell\". For the \"Command\", put: pytest examples/my_first_test.py --headless Click \"Save\" when you're done.", "title": "Step 18. Setup your new Jenkins job"}, {"location": "integrations/google_cloud/ReadMe/#step-19-run-your-new-jenkins-job", "text": "Click on \"Build Now\" (If all the setup was done correctly, you should see a blue dot appear after a few seconds, indicating that the test job passed.)", "title": "Step 19. Run your new Jenkins job"}, {"location": "integrations/google_cloud/ReadMe/#step-20-future-work", "text": "If you have a web application that you want to test, you'll be able to create SeleniumBase tests and add them to Jenkins as you saw here. You may want to create a Deploy job, which downloads the latest version of your repository, and then kicks off all tests to run after that. You could then tell that Deploy job to auto-run whenever a change is pushed to your repository by using: \"Poll SCM\". All your tests would then be able to run by using: \"Build after other projects are built\". You can also use MySQL to save test results in the DB so that you can query the data at any time.", "title": "Step 20. Future Work"}, {"location": "integrations/google_cloud/ReadMe/#congratulations-youre-now-well-on-your-way-to-becoming-a-build-release-automation-engineer", "text": "", "title": "Congratulations! You're now well on your way to becoming a build &amp; release / automation engineer!"}, {"location": "integrations/google_cloud/ReadMe/#mysql-db-setup-instructions", "text": "", "title": "MySQL DB setup instructions"}, {"location": "integrations/google_cloud/ReadMe/#step-21-return-to-the-google-cloud-launcher-and-launch-a-mysql-instance", "text": "Under \"Featured Solutions\", Click on \"MySQL\" Click on \"Launch on Compute Engine\" Give the instance a name Give the instance a zone Click \"Create\"", "title": "Step 21. Return to the Google Cloud Launcher and launch a MySQL Instance"}, {"location": "integrations/google_cloud/ReadMe/#step-22-get-the-connection-credentials-for-your-new-mysql-instance", "text": "Under the Google Cloud Platform menu, go to \"Compute Engine\" Find your new MySQL instance and then write down the value written in the \"External IP\" section. Under the Google Cloud Platform menu, go to \"Deployment Manager\" Find your new MySQL instance and then click on it. Write down the values for Admin username and password. (Username should be \"root\")", "title": "Step 22. Get the Connection credentials for your new MySQL Instance"}, {"location": "integrations/google_cloud/ReadMe/#step-23-get-a-mysql-gui-tool-so-that-you-can-connect-to-your-mysql-instance", "text": "You can download MySQL Workbench for this.", "title": "Step 23. Get a MySQL GUI tool so that you can connect to your MySQL Instance"}, {"location": "integrations/google_cloud/ReadMe/#step-24-create-a-new-connection-to-your-mysql-instance", "text": "Use the MySQL DB credentials that you saved in Step 21 for this.", "title": "Step 24. Create a new connection to your MySQL Instance"}, {"location": "integrations/google_cloud/ReadMe/#step-25-create-a-new-databaseschema-in-your-mysql-instance", "text": "You can name your database/schema test_db .", "title": "Step 25. Create a new database/schema in your MySQL Instance"}, {"location": "integrations/google_cloud/ReadMe/#step-26-create-the-necessary-tables-in-your-mysql-databaseschema", "text": "Run the create_db_tables.sql script in your MySQL database/schema to create all the required DB tables.", "title": "Step 26. Create the necessary tables in your MySQL database/schema"}, {"location": "integrations/google_cloud/ReadMe/#step-27-have-your-local-clone-of-seleniumbase-connect-to-your-mysql-db-instance", "text": "Update the MySQL connection details in your settings.py file to use the credentials that you saved in Step 21.", "title": "Step 27. Have your local clone of SeleniumBase connect to your MySQL DB Instance"}, {"location": "integrations/google_cloud/ReadMe/#step-28-have-your-seleniumbase-jenkins-jobs-use-your-mysql-db-instance", "text": "For the \"Execute shell\", use the following as your updated \"Command\": pytest examples/test_suite.py --headless --with-db_reporting Click \"Save\" when you're done.", "title": "Step 28. Have your SeleniumBase Jenkins jobs use your MySQL DB Instance"}, {"location": "integrations/google_cloud/ReadMe/#step-29-run-your-new-jenkins-job", "text": "Click on \"Build Now\" If all goes well, you should be seeing new rows appear in your MySQL DB tables.", "title": "Step 29. Run your new Jenkins job"}, {"location": "integrations/google_cloud/ReadMe/#step-30-congratulations-youve-successfully-completed-this-tutorial", "text": "", "title": "Step 30. Congratulations! You've successfully completed this tutorial!"}, {"location": "seleniumbase/common/ReadMe/", "text": "Using seleniumbase/common methods. \u00b6 Part 1: Decorators - (from decorators.py ) \u00b6 Use these Python decorators with your test methods as needed \u00b6 @retry_on_exception(tries=6, delay=1, backoff=2, max_delay=32) @rate_limited(max_per_second) Example demonstrating a rate-limited printing functionality: import unittest from seleniumbase import decorators class MyTestClass ( unittest . TestCase ): @decorators . rate_limited ( 3.5 ) # The arg is max calls per second def print_item ( self , item ): print ( item ) def test_rate_limited_printing ( self ): print ( \" \\n Running rate-limited print test:\" ) for item in range ( 1 , 11 ): self . print_item ( item ) Part 2: String/Password Obfuscation, Encryption, and Decryption \u00b6 Intro \u00b6 Often in your tests, you may need to login to a website to perform testing. This generally means storing passwords in plaintext formats. For security reasons, that may not be an optimal solution. For this reason, encryption/obfuscation tools have been built here to help you mask your passwords in your tests. It's not a bulletproof solution, but it can keep anyone looking over your shoulder during test creation from getting your login passwords if they don't have your encryption key, which is stored in a separate file. Usage \u00b6 First, set your custom encryption/decryption key in your local clone of settings.py . (If you modify the key later, you'll need to encrypt all your passwords again.) Next, use obfuscate.py to obfuscate/encrypt passwords into coded strings: python obfuscate.py Enter password to obfuscate: ( CTRL+C to exit ) Password: ********* Verify password: Password: ********* Here is the obfuscated password: $^*ENCRYPT = RXlYMSJWTz8HSwM = ? & #$ (You can also use unobfuscate.py to encrypt passwords without having them masked while typing them. Or you can use it to decrypt an obfuscated password.) Finally, in your tests you can now decrypt obfuscated passwords for use in login methods like this: from seleniumbase import encryption ... password = encryption . decrypt ( '$^*ENCRYPT=RXlYMSJWTz8HSwM=?&#$' ) (You'll notice that encrypted strings have a common start token and end token. This is to help tell them apart from non-encrypted strings. You can customize these tokens in settings.py . The current default setting is $^*ENCRYPT= for the start token and ?&#$ for the end token.) See decryption_test.py for an example of decrypting encrypted passwords in tests.", "title": "Decorators / Security"}, {"location": "seleniumbase/common/ReadMe/#using-seleniumbasecommon-methods", "text": "", "title": "Using seleniumbase/common methods."}, {"location": "seleniumbase/common/ReadMe/#part-1-decorators-from-decoratorspy", "text": "", "title": "Part 1: Decorators - (from decorators.py)"}, {"location": "seleniumbase/common/ReadMe/#use-these-python-decorators-with-your-test-methods-as-needed", "text": "@retry_on_exception(tries=6, delay=1, backoff=2, max_delay=32) @rate_limited(max_per_second) Example demonstrating a rate-limited printing functionality: import unittest from seleniumbase import decorators class MyTestClass ( unittest . TestCase ): @decorators . rate_limited ( 3.5 ) # The arg is max calls per second def print_item ( self , item ): print ( item ) def test_rate_limited_printing ( self ): print ( \" \\n Running rate-limited print test:\" ) for item in range ( 1 , 11 ): self . print_item ( item )", "title": "Use these Python decorators with your test methods as needed"}, {"location": "seleniumbase/common/ReadMe/#part-2-stringpassword-obfuscation-encryption-and-decryption", "text": "", "title": "Part 2: String/Password Obfuscation, Encryption, and Decryption"}, {"location": "seleniumbase/common/ReadMe/#intro", "text": "Often in your tests, you may need to login to a website to perform testing. This generally means storing passwords in plaintext formats. For security reasons, that may not be an optimal solution. For this reason, encryption/obfuscation tools have been built here to help you mask your passwords in your tests. It's not a bulletproof solution, but it can keep anyone looking over your shoulder during test creation from getting your login passwords if they don't have your encryption key, which is stored in a separate file.", "title": "Intro"}, {"location": "seleniumbase/common/ReadMe/#usage", "text": "First, set your custom encryption/decryption key in your local clone of settings.py . (If you modify the key later, you'll need to encrypt all your passwords again.) Next, use obfuscate.py to obfuscate/encrypt passwords into coded strings: python obfuscate.py Enter password to obfuscate: ( CTRL+C to exit ) Password: ********* Verify password: Password: ********* Here is the obfuscated password: $^*ENCRYPT = RXlYMSJWTz8HSwM = ? & #$ (You can also use unobfuscate.py to encrypt passwords without having them masked while typing them. Or you can use it to decrypt an obfuscated password.) Finally, in your tests you can now decrypt obfuscated passwords for use in login methods like this: from seleniumbase import encryption ... password = encryption . decrypt ( '$^*ENCRYPT=RXlYMSJWTz8HSwM=?&#$' ) (You'll notice that encrypted strings have a common start token and end token. This is to help tell them apart from non-encrypted strings. You can customize these tokens in settings.py . The current default setting is $^*ENCRYPT= for the start token and ?&#$ for the end token.) See decryption_test.py for an example of decrypting encrypted passwords in tests.", "title": "Usage"}, {"location": "seleniumbase/console_scripts/ReadMe/", "text": "\ud83d\udd2e Console Scripts \ud83d\udd2e \u00b6 \u2b50 SeleniumBase console scripts help you get things done, such as getting web drivers, creating a test directory with useful files, activating the SeleniumBase Recorder, launching the SeleniumBase Commander, translating tests into other languages, running a Selenium Grid, and more. Usage: seleniumbase [COMMAND] [PARAMETERS] (simplified): sbase [COMMAND] [PARAMETERS] To list all commands: seleniumbase --help ( For running tests, use pytest with SeleniumBase . ) COMMANDS: get / install [ DRIVER ] [ OPTIONS ] methods ( List common Python methods ) options ( List common pytest options ) behave-options ( List common behave options ) gui / commander [ OPTIONAL PATH or TEST FILE ] behave-gui ( SBase Commander for Behave ) caseplans [ OPTIONAL PATH or TEST FILE ] mkdir [ DIRECTORY ] [ OPTIONS ] mkfile [ FILE.py ] [ OPTIONS ] mkrec / codegen [ FILE.py ] [ OPTIONS ] recorder ( Open Recorder Desktop App. ) record ( If args: mkrec. Else: App. ) mkpres [ FILE.py ] [ LANG ] mkchart [ FILE.py ] [ LANG ] print [ FILE ] [ OPTIONS ] translate [ SB_FILE.py ] [ LANG ] [ ACTION ] convert [ WEBDRIVER_UNITTEST_FILE.py ] extract-objects [ SB_FILE.py ] inject-objects [ SB_FILE.py ] [ OPTIONS ] objectify [ SB_FILE.py ] [ OPTIONS ] revert-objects [ SB_FILE.py ] [ OPTIONS ] encrypt / obfuscate decrypt / unobfuscate download server ( Get Selenium Grid JAR file ) grid-hub [ start | stop ] [ OPTIONS ] grid-node [ start | stop ] --hub =[ HOST/IP ] * ( EXAMPLE: \"sbase get chromedriver latest\" ) * Type \"sbase help [COMMAND]\" for specific command info. For info on all commands, type: \"seleniumbase --help\" . Use \"pytest\" for running tests. get / install Usage: sbase get [ DRIVER ] [ OPTIONS ] sbase install [ DRIVER ] [ OPTIONS ] Examples: sbase get chromedriver # (Default: 72.0.3626.69 - Tries to detect first.) sbase get geckodriver sbase get edgedriver sbase get chromedriver 102 sbase get chromedriver 102 .0.5005.61 sbase get chromedriver latest sbase get chromedriver latest-1 # (Latest minus one) sbase get chromedriver -p sbase get chromedriver latest -p sbase get edgedriver 102 .0.1245.44 (Drivers: chromedriver , geckodriver , edgedriver , iedriver , operadriver ) (Options: latest or a specific driver version. For chromedriver, you can also specify the major version int, or latest-1 for latest minus 1. If none specified, installs the default version. -p / --path : Also copy to \"/usr/local/bin\".) Output: Downloads the chosen webdriver to seleniumbase/drivers/ . ( chromedriver is required for Google Chrome automation) ( geckodriver is required for Mozilla Firefox automation) ( edgedriver is required for Microsoft Edge automation) ( iedriver is required for InternetExplorer automation) ( operadriver is required for Opera Browser automation) methods Usage: sbase methods Output: Displays common SeleniumBase Python methods. options Usage: sbase options Output: Displays common pytest command-line options that are available when using SeleniumBase. --browser = BROWSER ( The web browser to use. Default is \"chrome\" ) --headless ( Run tests headlessly. Default mode on Linux OS. ) --demo ( Slow down and visually see test actions as they occur. ) --slow ( Slow down the automation. Faster than using Demo Mode. ) --reuse-session / --rs ( Reuse browser session between tests. ) --crumbs ( Clear all cookies between tests reusing a session. ) --maximize ( Start tests with the web browser window maximized. ) --dashboard ( Enable SeleniumBase \\' s Dashboard at dashboard.html ) --incognito ( Enable Chromium \\' s Incognito mode. ) --guest ( Enable Chromium \\' s Guest mode. ) -m = MARKER ( Run tests with the specified pytest marker. ) -n = NUM ( Multithread the tests using that many threads. ) -v ( Verbose mode. Print the full names of each test run. ) --html = report.html ( Create a detailed pytest-html report. ) --collect-only / --co ( Only show discovered tests. No run. ) --co -q ( Only show full names of discovered tests. No run. ) -x ( Stop running tests after the first failure is reached. ) --pdb ( Enter the Post Mortem Debug Mode after any test fails. ) --trace ( Enter Debug Mode immediately after starting any test. ) | Debug Mode Commands >>> help / h: List all commands. | | n: Next line of method. s: Step through. c: Continue. | | return / r: Run until method returns. j: Jump to line. | | where / w: Show stack spot. u: Up stack. d: Down stack. | | longlist / ll: See code. dir () : List namespace objects. | --recorder ( Record browser actions to generate test scripts. ) --save-screenshot ( Save a screenshot at the end of each test. ) --archive-logs ( Archive old log files instead of deleting them. ) --check-js ( Check for JavaScript errors after page loads. ) --start-page = URL ( The browser start page when tests begin. ) --agent = STRING ( Modify the web browser \\' s User-Agent string. ) --mobile ( Use Chromium \\' s mobile device emulator during tests. ) --metrics = STRING ( Set mobile \"CSSWidth,CSSHeight,PixelRatio\" . ) --ad-block ( Block some types of display ads after page loads. ) --settings-file = FILE ( Override default SeleniumBase settings. ) --env = ENV ( Set the test env. Access with \"self.env\" in tests. ) --data = DATA ( Extra test data. Access with \"self.data\" in tests. ) --disable-csp ( Disable the Content Security Policy of websites. ) --server = SERVER ( The Selenium Grid server/IP used for tests. ) --port = PORT ( The Selenium Grid port used by the test server. ) --proxy = SERVER:PORT ( Connect to a proxy server:port for tests. ) --proxy = USER:PASS@SERVER:PORT ( Use authenticated proxy server. ) For the full list of command-line options, type: \"pytest --help\" . behave-options Usage: sbase behave-options Output: Displays common Behave command-line options that are available when using SeleniumBase. -D browser = BROWSER ( The web browser to use. Default is \"chrome\" ) -D headless ( Run tests headlessly. Default mode on Linux OS. ) -D demo ( Slow down and visually see test actions as they occur. ) -D slow ( Slow down the automation. Faster than using Demo Mode. ) -D reuse-session / -D rs ( Reuse browser session between tests. ) -D crumbs ( Clear all cookies between tests reusing a session. ) -D maximize ( Start tests with the web browser window maximized. ) -D dashboard ( Enable SeleniumBase \\' s Dashboard at dashboard.html ) -D incognito ( Enable Chromium \\' s Incognito mode. ) -D guest ( Enable Chromium \\' s Guest mode. ) --no-snippets / -q ( Quiet mode. Don \\' t print snippets. ) --dry-run / -d ( Dry run. Only show discovered tests. ) --stop ( Stop running tests after the first failure is reached. ) -D pdb ( Enter the Post Mortem Debug Mode after any test fails. ) | Debug Mode Commands >>> help / h: List all commands. | | n: Next line of method. s: Step through. c: Continue. | | return / r: Run until method returns. j: Jump to line. | | where / w: Show stack spot. u: Up stack. d: Down stack. | | longlist / ll: See code. dir () : List namespace objects. | -D recorder ( Record browser actions to generate test scripts. ) -D save-screenshot ( Save a screenshot at the end of each test. ) -D archive-logs ( Archive old log files instead of deleting them. ) -D check-js ( Check for JavaScript errors after page loads. ) -D start-page = URL ( The browser start page when tests begin. ) -D agent = STRING ( Modify the web browser \\' s User-Agent string. ) -D mobile ( Use Chromium \\' s mobile device emulator during tests. ) -D metrics = STRING ( Set mobile \"CSSWidth,CSSHeight,PixelRatio\" . ) -D ad-block ( Block some types of display ads after page loads. ) -D settings-file = FILE ( Override default SeleniumBase settings. ) -D env = ENV ( Set the test env. Access with \"self.env\" in tests. ) -D data = DATA ( Extra test data. Access with \"self.data\" in tests. ) -D disable-csp ( Disable the Content Security Policy of websites. ) -D server = SERVER ( The Selenium Grid server/IP used for tests. ) -D port = PORT ( The Selenium Grid port used by the test server. ) -D proxy = SERVER:PORT ( Connect to a proxy server:port for tests. ) -D proxy = USER:PASS@SERVER:PORT ( Use authenticated proxy server. ) For the full list of command-line options, type: \"behave --help\" . gui / commander Usage: sbase gui [ OPTIONAL PATH or TEST FILE ] sbase commander [ OPTIONAL PATH or TEST FILE ] behave-gui Usage: sbase behave-gui [ OPTIONAL PATH or TEST FILE ] sbase gui-behave [ OPTIONAL PATH or TEST FILE ] Examples: sbase behave-gui sbase behave-gui -i = calculator sbase behave-gui features/ sbase behave-gui features/calculator.feature Output: Launches SeleniumBase Commander / GUI for Behave. caseplans Usage: sbase caseplans [ OPTIONAL PATH or TEST FILE ] Examples: sbase caseplans sbase caseplans -k agent sbase caseplans -m marker2 sbase caseplans test_suite.py sbase caseplans offline_examples/ Output: Launches the SeleniumBase Case Plans Generator. mkdir Usage: sbase mkdir [ DIRECTORY ] [ OPTIONS ] Example: sbase mkdir ui_tests Options: -b / --basic (Only config files. No tests added.) Output: Creates a new folder for running SBase scripts. The new folder contains default config files, sample tests for helping new users get started, and Python boilerplates for setting up customized test frameworks. ui_tests/ \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 my_first_test.py \u251c\u2500\u2500 parameterized_test.py \u251c\u2500\u2500 pytest.ini \u251c\u2500\u2500 requirements.txt \u251c\u2500\u2500 setup.cfg \u251c\u2500\u2500 test_demo_site.py \u2514\u2500\u2500 boilerplates/ \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 base_test_case.py \u251c\u2500\u2500 boilerplate_test.py \u251c\u2500\u2500 classic_obj_test.py \u251c\u2500\u2500 page_objects.py \u251c\u2500\u2500 sb_fixture_test.py \u2514\u2500\u2500 samples/ \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 google_objects.py \u251c\u2500\u2500 google_test.py \u251c\u2500\u2500 sb_swag_test.py \u2514\u2500\u2500 swag_labs_test.py If running with the -b or --basic option: ui_tests/ \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 pytest.ini \u251c\u2500\u2500 requirements.txt \u2514\u2500\u2500 setup.cfg mkfile Usage: sbase mkfile [ FILE.py ] [ OPTIONS ] Example: sbase mkfile new_test.py Options: -b / --basic (Basic boilerplate / single-line test) -r / --rec (adds ipdb breakpoint for Recorder Mode) Language Options: --en / --English | --zh / --Chinese --nl / --Dutch | --fr / --French --it / --Italian | --ja / --Japanese --ko / --Korean | --pt / --Portuguese --ru / --Russian | --es / --Spanish Output: Creates a new SeleniumBase test file with boilerplate code. If the file already exists, an error is raised. By default, uses English mode and creates a boilerplate with the 5 most common SeleniumBase methods, which are \"open\", \"type\", \"click\", \"assert_element\", and \"assert_text\". If using the basic boilerplate option, only the \"open\" method is included. mkrec / record / codegen Usage: sbase mkrec [ FILE.py ] [ OPTIONS ] sbase codegen [ FILE.py ] [ OPTIONS ] Examples: sbase mkrec new_test.py sbase mkrec new_test.py --url = seleniumbase.io sbase codegen new_test.py sbase codegen new_test.py --url = wikipedia.org Options: --url=URL (Sets the initial start page URL.) --edge (Use Edge browser instead of Chrome.) --gui / --headed (Use headed mode on Linux.) --overwrite (Overwrite file when it exists.) --behave (Also output Behave/Gherkin files.) Output: Creates a new SeleniumBase test using the Recorder. If the filename already exists, an error is raised. recorder Usage: sbase recorder [ OPTIONS ] Options: --behave (Also output Behave/Gherkin files.) Output: Launches the SeleniumBase Recorder Desktop App. mkpres Usage: sbase mkpres [ FILE.py ] [ LANG ] Example: sbase mkpres new_presentation.py --en Language Options: --en / --English | --zh / --Chinese --nl / --Dutch | --fr / --French --it / --Italian | --ja / --Japanese --ko / --Korean | --pt / --Portuguese --ru / --Russian | --es / --Spanish Output: Creates a new presentation with 3 example slides. If the file already exists, an error is raised. By default, the slides are written in English, and use \"serif\" theme with \"slide\" transition. The slides can be used as a basic boilerplate. mkchart Usage: sbase mkchart [ FILE.py ] [ LANG ] Example: sbase mkchart new_chart.py --en Language Options: --en / --English | --zh / --Chinese --nl / --Dutch | --fr / --French --it / --Italian | --ja / --Japanese --ko / --Korean | --pt / --Portuguese --ru / --Russian | --es / --Spanish Output: Creates a new SeleniumBase chart presentation. If the file already exists, an error is raised. By default, the slides are written in English, and use a \"sky\" theme with \"slide\" transition. The chart can be used as a basic boilerplate. print Usage: sbase print [ FILE ] [ OPTIONS ] Options: -n (Add line Numbers to the rows) Output: Prints the code/text of any file with syntax-highlighting. translate Usage: sbase translate [ SB_FILE.py ] [ LANGUAGE ] [ ACTION ] Languages: --en / --English | --zh / --Chinese --nl / --Dutch | --fr / --French --it / --Italian | --ja / --Japanese --ko / --Korean | --pt / --Portuguese --ru / --Russian | --es / --Spanish Actions: -p / --print (Print translation output to the screen) -o / --overwrite (Overwrite the file being translated) -c / --copy (Copy the translation to a new .py file) Options: -n (include line Numbers when using the Print action) Output: Translates a SeleniumBase Python file into the language specified. Method calls and \"import\" lines get swapped. Both a language and an action must be specified. The -p action can be paired with one other action. When running with -c (or --copy ), the new file name will be the original name appended with an underscore plus the 2-letter language code of the new language. (Example: Translating \"test_1.py\" into Japanese with -c will create a new file called \"test_1_ja.py\".) extract-objects Usage: sbase extract-objects [ SB_FILE.py ] Output: Creates page objects based on selectors found in a seleniumbase Python file and saves those objects to the \"page_objects.py\" file in the same folder as the tests. inject-objects Usage: sbase inject-objects [ SB_FILE.py ] [ OPTIONS ] Options: -c , --comments (Add object selectors to the comments.) Output: Takes the page objects found in the \"page_objects.py\" file and uses those to replace matching selectors in the selected seleniumbase Python file. objectify Usage: sbase objectify [ SB_FILE.py ] [ OPTIONS ] Options: -c , --comments (Add object selectors to the comments.) Output: A modified version of the file where the selectors have been replaced with variable names defined in \"page_objects.py\", supporting the Page Object Pattern. (This has the same outcome as combining extract-objects with inject-objects ) revert-objects Usage: sbase revert-objects [ SB_FILE.py ] [ OPTIONS ] Options: -c , --comments (Keep existing comments for the lines.) Output: Reverts the changes made by seleniumbase objectify ... or seleniumbase inject-objects ... when run against a seleniumbase Python file. Objects will get replaced by selectors stored in the \"page_objects.py\" file. convert Usage: sbase convert [ WEBDRIVER_UNITTEST_FILE.py ] Output: Converts a Selenium IDE exported WebDriver unittest file into a SeleniumBase file. Adds _SB to the new file name while keeping the original file intact. Works with Katalon Recorder scripts. See This ReadMe for details. encrypt / obfuscate Usage: sbase encrypt OR sbase obfuscate Output: Runs the password encryption/obfuscation tool. (Where you can enter a password to encrypt/obfuscate.) decrypt / unobfuscate Usage: sbase decrypt OR sbase unobfuscate Output: Runs the password decryption/unobfuscation tool. (Where you can enter an encrypted password to decrypt.) download Usage: sbase download server Output: Downloads the Selenium Server JAR file for Grid usage. (That JAR file is required when using a Selenium Grid) grid-hub Usage: sbase grid-hub { start | stop | restart } [ OPTIONS ] Options: -v , --verbose (Increases verbosity of logging output.) --timeout=TIMEOUT (Close idle browser windows after TIMEOUT seconds.) Output: Controls the Selenium Grid Hub server, which allows for running tests on multiple machines in parallel to speed up test runs and reduce the total time of test suite execution. You can start, restart, or stop the Grid Hub server. grid-node Usage: sbase grid-node { start | stop | restart } [ OPTIONS ] Options: --hub=HUB_IP (The Grid Hub IP Address to connect to.) (Default: 127.0.0.1 ) -v , --verbose (Increases verbosity of logging output.) Output: Controls the Selenium Grid node, which serves as a worker machine for your Selenium Grid Hub server. You can start, restart, or stop the Grid node.", "title": "Console Scripts"}, {"location": "seleniumbase/console_scripts/ReadMe/#console-scripts", "text": "\u2b50 SeleniumBase console scripts help you get things done, such as getting web drivers, creating a test directory with useful files, activating the SeleniumBase Recorder, launching the SeleniumBase Commander, translating tests into other languages, running a Selenium Grid, and more. Usage: seleniumbase [COMMAND] [PARAMETERS] (simplified): sbase [COMMAND] [PARAMETERS] To list all commands: seleniumbase --help ( For running tests, use pytest with SeleniumBase . ) COMMANDS: get / install [ DRIVER ] [ OPTIONS ] methods ( List common Python methods ) options ( List common pytest options ) behave-options ( List common behave options ) gui / commander [ OPTIONAL PATH or TEST FILE ] behave-gui ( SBase Commander for Behave ) caseplans [ OPTIONAL PATH or TEST FILE ] mkdir [ DIRECTORY ] [ OPTIONS ] mkfile [ FILE.py ] [ OPTIONS ] mkrec / codegen [ FILE.py ] [ OPTIONS ] recorder ( Open Recorder Desktop App. ) record ( If args: mkrec. Else: App. ) mkpres [ FILE.py ] [ LANG ] mkchart [ FILE.py ] [ LANG ] print [ FILE ] [ OPTIONS ] translate [ SB_FILE.py ] [ LANG ] [ ACTION ] convert [ WEBDRIVER_UNITTEST_FILE.py ] extract-objects [ SB_FILE.py ] inject-objects [ SB_FILE.py ] [ OPTIONS ] objectify [ SB_FILE.py ] [ OPTIONS ] revert-objects [ SB_FILE.py ] [ OPTIONS ] encrypt / obfuscate decrypt / unobfuscate download server ( Get Selenium Grid JAR file ) grid-hub [ start | stop ] [ OPTIONS ] grid-node [ start | stop ] --hub =[ HOST/IP ] * ( EXAMPLE: \"sbase get chromedriver latest\" ) * Type \"sbase help [COMMAND]\" for specific command info. For info on all commands, type: \"seleniumbase --help\" . Use \"pytest\" for running tests.", "title": " \ud83d\udd2e Console Scripts \ud83d\udd2e"}, {"location": "seleniumbase/masterqa/ReadMe/", "text": "MasterQA combines automation with manual verification steps. Here's code from basic_masterqa_test_0.py : from seleniumbase import MasterQA class MasterQATests ( MasterQA ): def test_masterqa ( self ): self . open ( \"https://xkcd.com/1700/\" ) self . verify ( \"Do you see a webcomic?\" ) self . open ( \"https://seleniumbase.io/demo_page\" ) self . highlight ( 'table' ) self . verify ( \"Do you see elements in a table?\" ) self . open ( \"https://seleniumbase.io/devices/\" ) self . highlight ( \"div.mockup-wrapper\" ) self . verify ( \"Do you see 4 computer devices?\" ) After each automation checkpoint, a pop-up window will ask the user questions for each verification command. When the test run completes, as seen from this longer example , you'll reach the results page that appears after answering all the verification questions. (Failed verifications generate links to screenshots and log files.) You may have noticed the Incomplete Test Runs row on the results page. If the value for that is not zero, it means that one of the automated steps failed. This could happen if you tell your script to perform an action on an element that doesn't exist. Now that we're mixing automation with manual QA, it's good to tell apart the failures from each. The results_table CSV file contains a spreadsheet with the details of each failure (if any) for both manual and automated steps. How to run the example tests from scratch \u00b6 git clone https://github.com/seleniumbase/SeleniumBase.git cd SeleniumBase pip install . cd examples/master_qa pytest basic_masterqa_test_0.py pytest masterqa_test_1.py At the end of your test run, you'll receive a report with results, screenshots, and log files. Close the Results Page window when you're done. Check out masterqa_test_1.py to learn how to write your own MasterQA tests \u00b6 You'll notice that tests are written the same way as regular SeleniumBase tests, with the key difference being a different import: from seleniumbase import MasterQA rather than from seleniumbase import BaseCase . Now your Python test class will import MasterQA instead of BaseCase . To add a manual verification step, use self.verify() in the code after each part of your test that needs a manual verification step. If you want to include a custom question, add text inside that call (in quotes). Example: self . verify () self . verify ( \"Can you find the moon?\" ) MasterQA is powered by SeleniumBase , the most advanced open-source automation framework on the Planet .", "title": "Master QA Hybrid Mode"}, {"location": "seleniumbase/masterqa/ReadMe/#how-to-run-the-example-tests-from-scratch", "text": "git clone https://github.com/seleniumbase/SeleniumBase.git cd SeleniumBase pip install . cd examples/master_qa pytest basic_masterqa_test_0.py pytest masterqa_test_1.py At the end of your test run, you'll receive a report with results, screenshots, and log files. Close the Results Page window when you're done.", "title": "How to run the example tests from scratch"}, {"location": "seleniumbase/masterqa/ReadMe/#check-out-masterqa_test_1py-to-learn-how-to-write-your-own-masterqa-tests", "text": "You'll notice that tests are written the same way as regular SeleniumBase tests, with the key difference being a different import: from seleniumbase import MasterQA rather than from seleniumbase import BaseCase . Now your Python test class will import MasterQA instead of BaseCase . To add a manual verification step, use self.verify() in the code after each part of your test that needs a manual verification step. If you want to include a custom question, add text inside that call (in quotes). Example: self . verify () self . verify ( \"Can you find the moon?\" ) MasterQA is powered by SeleniumBase , the most advanced open-source automation framework on the Planet .", "title": "Check out masterqa_test_1.py to learn how to write your own MasterQA tests"}, {"location": "seleniumbase/utilities/selenium_grid/ReadMe/", "text": "The Selenium Grid Hub: The Selenium Grid Hub lets you distribute tests to run in parallel across multiple node machines. Each node machine can then run its own allocation of tests. This allows you to run a large suite of tests very quickly. Running the Selenium Grid Hub: The following commands will work once you've installed seleniumbase. Downloading the Selenium Server JAR file: seleniumbase download server (Required for using your own Selenium Grid) Grid Hub server controls: seleniumbase grid-hub { start | stop | restart } [ OPTIONS ] Options: -v / --verbose (Increases verbosity of logging output.) --timeout=TIMEOUT (Close idle browser after TIMEOUT sec.) Grid node server controls: seleniumbase grid-node { start | stop | restart } --hub =[ HUB_IP ] [ OPTIONS ] Options: -v / --verbose (Increases verbosity of logging output.) --hub=[HUB_IP] (Specifies the Grid Hub to connect to. Default: \"127.0.0.1\".) When the Grid Hub Console is up and running, you'll be able to find it here: http://127.0.0.1:4444/grid/console Now you can run your tests on the Selenium Grid: pytest test_demo_site.py --server = IP_ADDRESS --port = 4444 You can also run your tests on someone else's Selenium Grid to avoid managing your own. Here are some Selenium Grids that you can use (and the run command format): BrowserStack Selenium Grid: pytest test_demo_site.py --server = USERNAME:KEY@hub.browserstack.com --port = 80 Sauce Labs Selenium Grid: pytest test_demo_site.py --server = USERNAME:KEY@ondemand.us-east-1.saucelabs.com --port = 443 --protocol = https Perfecto Selenium Grid: pytest test_demo_site.py --server = USERNAME:KEY@demo.perfectomobile.com/nexperience/perfectomobile --port = 443 TestingBot Selenium Grid: pytest test_demo_site.py --server = USERNAME:KEY@hub.testingbot.com --port = 80 LambdaTest Selenium Grid: pytest test_demo_site.py --server = USERNAME:KEY@hub.lambdatest.com --port = 80 CrossBrowserTesting Selenium Grid: pytest test_demo_site.py --server = USERNAME:KEY@hub.crossbrowsertesting.com --port = 80 To use a server on the https protocol, add --protocol=https : ( SeleniumBase 1.65.2 and newer uses https automatically for --port=443 . ) pytest test_demo_site.py --protocol = https --server = IP_ADDRESS --port = PORT (For setting browser desired capabilities while running Selenium remotely, see the desired capabilities documentation and the sample files located in SeleniumBase/examples/capabilities ) More info about the Selenium Grid Hub can be found here: https://www.selenium.dev/documentation/grid/", "title": "Selenium Grid"}]}